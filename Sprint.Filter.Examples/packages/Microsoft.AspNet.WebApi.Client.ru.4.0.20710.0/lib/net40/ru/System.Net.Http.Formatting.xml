<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Http.Formatting</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.HttpClientExtensions">
      <summary>Методы расширения, помогающие выполнять форматированные запросы с помощью <see cref="T:System.Net.Http.HttpClient" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Отправляет запрос POST в качестве асинхронной операции с указанным значением, сериализованным в JSON.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Отправляет запрос POST в качестве асинхронной операции с указанным значением, сериализованным в JSON. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Отправляет запрос POST в качестве асинхронной операции с указанным значением, сериализованным в XML.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Отправляет запрос POST в качестве асинхронной операции с указанным значением, сериализованным в XML. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Отправляет запрос POST в асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary>Отправляет запрос POST в качестве асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования и типа мультимедиа.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type. Может быть равно NULL. В этом случае используется тип содержимого модуля форматирования по умолчанию.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Отправляет запрос POST в качестве асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования и строки типа мультимедиа.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type. Может быть равно NULL. В этом случае используется тип содержимого модуля форматирования по умолчанию.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary>Отправляет запрос POST в качестве асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования и строки типа мультимедиа. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type. Может быть равно NULL. В этом случае используется тип содержимого модуля форматирования по умолчанию.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary>Отправляет запрос POST в асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Отправляет запрос PUT в качестве асинхронной операции с указанным значением, сериализованным в JSON.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Отправляет запрос PUT в качестве асинхронной операции с указанным значением, сериализованным в JSON. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене. </param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Отправляет запрос PUT в качестве асинхронной операции с указанным значением, сериализованным в XML.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Отправляет запрос PUT в качестве асинхронной операции с указанным значением, сериализованным в XML. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Отправляет запрос PUT в асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary> Отправляет запрос PUT в качестве асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования и типа мультимедиа. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type. Может быть равно NULL. В этом случае используется тип содержимого модуля форматирования по умолчанию.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Отправляет запрос PUT в качестве асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования и строки типа мультимедиа.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type. Может быть равно NULL. В этом случае используется тип содержимого модуля форматирования по умолчанию.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary>Отправляет запрос PUT в качестве асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования и строки типа мультимедиа. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type. Может быть равно NULL. В этом случае используется тип содержимого модуля форматирования по умолчанию.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary>Отправляет запрос PUT в качестве асинхронной операции с указанным значением, сериализованным с помощью указанного модуля форматирования и строки типа мультимедиа. Содержит маркер отмены для отмены запроса.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="client">Клиент, используемый для выполнения запроса.</param>
      <param name="requestUri">URI, куда отправляется запрос.</param>
      <param name="value">Значение для записи в текст запроса.</param>
      <param name="formatter">Модуль форматирования для сериализации значения.</param>
      <param name="cancellationToken">Маркер отмены, который другие объекты и потоки могут использовать для получения уведомлений об отмене.</param>
      <typeparam name="T">Тип объекта для сериализации.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpClientFactory">
      <summary>Представляет фабрику для создания нового экземпляра <see cref="T:System.Net.Http.HttpClient" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.DelegatingHandler[])">
      <summary>Создает новый экземпляр <see cref="T:System.Net.Http.HttpClient" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Net.Http.HttpClient" />.</returns>
      <param name="handlers">Список обработчиков HTTP, делегирующих обработку сообщений ответа HTTP другим обработчикам.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.HttpMessageHandler,System.Net.Http.DelegatingHandler[])">
      <summary>Создает новый экземпляр <see cref="T:System.Net.Http.HttpClient" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Net.Http.HttpClient" />.</returns>
      <param name="innerHandler">Внутренний обработчик, который отвечает за обработку сообщений ответов HTTP.</param>
      <param name="handlers">Список обработчиков HTTP, делегирующих обработку сообщений ответа HTTP другим обработчикам.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.CreatePipeline(System.Net.Http.HttpMessageHandler,System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler})">
      <summary>Создает новый экземпляр <see cref="T:System.Net.Http.HttpClient" />, который должен конвейеризироваться.</summary>
      <returns>Новый экземпляр <see cref="T:System.Net.Http.HttpClient" />, который должен конвейеризироваться.</returns>
      <param name="innerHandler">Внутренний обработчик, который отвечает за обработку сообщений ответов HTTP.</param>
      <param name="handlers">Список обработчиков HTTP, делегирующих обработку сообщений ответа HTTP другим обработчикам.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentExtensions">
      <summary>Задает методы расширения, позволяющие считывать строго типизированные объекты из экземпляров HttpContent.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)">
      <summary> Возвращает объект Task, дающий объект указанного типа &lt;typeparamref name="T" /&gt; из экземпляра content. </summary>
      <returns>Объект данного типа.</returns>
      <param name="content">Экземпляр HttpContent для чтения.</param>
      <typeparam name="T">Тип считываемого объекта.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Возвращает объект Task, дающий объект указанного типа &lt;typeparamref name="T" /&gt; из экземпляра content. </summary>
      <returns>Объект данного типа.</returns>
      <param name="content">Экземпляр HttpContent для чтения.</param>
      <param name="formatters">Коллекция используемых экземпляров MediaTypeFormatter.</param>
      <typeparam name="T">Тип считываемого объекта.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Возвращает объект Task, дающий объект указанного типа &lt;typeparamref name="T" /&gt; из экземпляра content. </summary>
      <returns>Объект данного типа.</returns>
      <param name="content">Экземпляр HttpContent для чтения.</param>
      <param name="formatters">Коллекция используемых экземпляров MediaTypeFormatter.</param>
      <param name="formatterLogger">Интерфейс IFormatterLogger для регистрации событий в журнале.</param>
      <typeparam name="T">Тип считываемого объекта.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)">
      <summary> Возвращает объект Task, дающий объект указанного type из экземпляра content. </summary>
      <returns>Объект Task, дающий экземпляр объекта указанного типа.</returns>
      <param name="content">Экземпляр HttpContent для чтения.</param>
      <param name="type">Тип считываемого объекта.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Возвращает объект Task, дающий объект указанного type из экземпляра content, используя для десериализации содержимого один из указанных в formatters модулей форматирования. </summary>
      <returns>Объект данного типа.</returns>
      <param name="content">Экземпляр HttpContent для чтения.</param>
      <param name="type">Тип считываемого объекта.</param>
      <param name="formatters">Коллекция используемых экземпляров MediaTypeFormatter.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Возвращает объект Task, дающий объект указанного type из экземпляра content, используя для десериализации содержимого один из указанных в formatters модулей форматирования. </summary>
      <returns>Объект данного типа.</returns>
      <param name="content">Экземпляр HttpContent для чтения.</param>
      <param name="type">Тип считываемого объекта.</param>
      <param name="formatters">Коллекция используемых экземпляров MediaTypeFormatter.</param>
      <param name="formatterLogger">Интерфейс IFormatterLogger для регистрации событий в журнале.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentFormDataExtensions">
      <summary>Методы расширения для чтения данных HTML-формы в URL-кодировке из экземпляров <see cref="T:System.Net.Http.HttpContent" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.IsFormData(System.Net.Http.HttpContent)">
      <summary>Определяет, является ли указанное содержимое данными HTML-формы в URL-кодировке.</summary>
      <returns>Значение true, если содержимое представляет данные HTML-формы в URL-кодировке; в противном случае — false.</returns>
      <param name="content">Содержимое.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent)">
      <summary>Асинхронно считывает данные HTML-формы в URL-кодировке из экземпляра <see cref="T:System.Net.Http.HttpContent" /> и сохраняет результаты в объекте <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="content">Содержимое.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMessageExtensions">
      <summary>Предоставляет методы расширения для чтения сущностей <see cref="T:System.Net.Http.HttpRequestMessage" /> и <see cref="T:System.Net.Http.HttpResponseMessage" /> из экземпляров <see cref="T:System.Net.Http.HttpContent" />. </summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent(System.Net.Http.HttpContent)">
      <summary>Определяет, является ли данное содержимое содержимым сообщения HTTP-запроса.</summary>
      <returns>Значение true, если данное содержимое является содержимым HTTP-сообщения; в противном случае — false.</returns>
      <param name="content">Проверяемое содержимое.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent(System.Net.Http.HttpContent)">
      <summary>Определяет, является ли данное содержимое содержимым сообщения HTTP-ответа.</summary>
      <returns>Значение true, если данное содержимое является содержимым HTTP-сообщения; в противном случае — false.</returns>
      <param name="content">Проверяемое содержимое.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent)">
      <summary> Считывает <see cref="T:System.Net.Http.HttpContent" /> как <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Экземпляр <see cref="T:System.Net.Http.HttpRequestMessage" /> после анализа.</returns>
      <param name="content">Считываемое содержимое.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String)">
      <summary> Считывает <see cref="T:System.Net.Http.HttpContent" /> как <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Экземпляр <see cref="T:System.Net.Http.HttpRequestMessage" /> после анализа.</returns>
      <param name="content">Считываемое содержимое.</param>
      <param name="uriScheme">Схема URI, которую следует использовать для URI запроса.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32)">
      <summary> Считывает <see cref="T:System.Net.Http.HttpContent" /> как <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Экземпляр <see cref="T:System.Net.Http.HttpRequestMessage" /> после анализа.</returns>
      <param name="content">Считываемое содержимое.</param>
      <param name="uriScheme">Схема URI, которую следует использовать для URI запроса.</param>
      <param name="bufferSize">Размер буфера.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32)">
      <summary>Считывает <see cref="T:System.Net.Http.HttpContent" /> как <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Экземпляр <see cref="T:System.Net.Http.HttpRequestMessage" /> после анализа.</returns>
      <param name="content">Считываемое содержимое.</param>
      <param name="uriScheme">Схема URI, которую следует использовать для URI запроса.</param>
      <param name="bufferSize">Размер буфера.</param>
      <param name="maxHeaderSize">Максимальная длина заголовка HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent)">
      <summary> Считывает <see cref="T:System.Net.Http.HttpContent" /> как <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>Экземпляр <see cref="T:System.Net.Http.HttpResponseMessage" /> после анализа.</returns>
      <param name="content">Считываемое содержимое.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32)">
      <summary>Считывает <see cref="T:System.Net.Http.HttpContent" /> как <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>Экземпляр <see cref="T:System.Net.Http.HttpResponseMessage" /> после анализа.</returns>
      <param name="content">Считываемое содержимое.</param>
      <param name="bufferSize">Размер буфера.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32)">
      <summary>Считывает <see cref="T:System.Net.Http.HttpContent" /> как <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Экземпляр <see cref="T:System.Net.Http.HttpResponseMessage" /> после анализа.</returns>
      <param name="content">Считываемое содержимое.</param>
      <param name="bufferSize">Размер буфера.</param>
      <param name="maxHeaderSize">Максимальная длина заголовка HTTP.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMultipartExtensions">
      <summary>Методы расширения для чтения составных сущностей MIME из экземпляров <see cref="T:System.Net.Http.HttpContent" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent)">
      <summary>Определяет, является ли содержимое составным содержимым MIME.</summary>
      <returns>Значение true, если данное содержимое является составным содержимым MIME; в противном случае — false.</returns>
      <param name="content">Содержимое.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)">
      <summary>Определяет, является ли данное содержимое составным содержимым MIME указанного подтипа.</summary>
      <returns>Значение true, если данное содержимое является составным содержимым MIME указанного подтипа; в противном случае — false.</returns>
      <param name="content">Содержимое.</param>
      <param name="subtype">Сопоставляемый подтип составного содержимого MIME.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent)">
      <summary>Считывает все части текста составного сообщения MIME и создает в качестве результата набор экземпляров <see cref="T:System.Net.Http.HttpContent" />.</summary>
      <returns>Объект &lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;, представляющий задачи получения коллекции экземпляров <see cref="T:System.Net.Http.HttpContent" />, каждый из которых представляет часть текста.</returns>
      <param name="content">Существующий экземпляр <see cref="T:System.Net.Http.HttpContent" />, используемый в качестве содержимого объекта.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0)">
      <summary>Считывает все части текста составного сообщения MIME и создает в качестве результата набор экземпляров <see cref="T:System.Net.Http.HttpContent" />, используя экземпляр streamProvider, чтобы определить, куда писать содержимое каждой части.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />, представляющая задачи получения коллекции экземпляров <see cref="T:System.Net.Http.HttpContent" />, где каждый экземпляр представляет часть текста.</returns>
      <param name="content">Существующий экземпляр <see cref="T:System.Net.Http.HttpContent" />, используемый в качестве содержимого объекта.</param>
      <param name="streamProvider">Поставщик выходных потоков для записи частей текста по мере анализа.</param>
      <typeparam name="T">Тип составного сообщения MIME.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32)">
      <summary>Считывает все части текста составного сообщения MIME и создает в качестве результата набор экземпляров <see cref="T:System.Net.Http.HttpContent" />, используя экземпляр streamProvider, чтобы определить, куда писать содержимое каждой части, а также bufferSize как размер буфера чтения.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />, представляющая задачи получения коллекции экземпляров <see cref="T:System.Net.Http.HttpContent" />, где каждый экземпляр представляет часть текста.</returns>
      <param name="content">Существующий экземпляр <see cref="T:System.Net.Http.HttpContent" />, используемый в качестве содержимого объекта.</param>
      <param name="streamProvider">Поставщик выходных потоков для записи частей текста по мере анализа.</param>
      <param name="bufferSize">Размер буфера для чтения содержимого.</param>
      <typeparam name="T">Тип составного сообщения MIME.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpMessageContent">
      <summary> Производный класс <see cref="T:System.Net.Http.HttpContent" />, который может инкапсулировать <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> или <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" /> в качестве сущности с типом мультимедиа "application/http". </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpMessageContent" />, инкапсулируя <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" />. </summary>
      <param name="httpRequest">Инкапсулируемый экземпляр <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" />.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.HttpMessageContent" />, инкапсулируя <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" />. </summary>
      <param name="httpResponse">Инкапсулируемый экземпляр <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" />.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.Dispose(System.Boolean)">
      <summary> Освобождает неуправляемые и (необязательно) управляемые ресурсы. </summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpRequestMessage">
      <summary> Получает сообщение HTTP-запроса. </summary>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpResponseMessage">
      <summary> Получает сообщение HTTP-ответа. </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary> Асинхронно сериализирует содержимое объекта в заданный поток. </summary>
      <returns>Экземпляр <see cref="T:System.Threading.Tasks.Task" />, асинхронно сериализующий содержимое объекта.</returns>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> для записи.</param>
      <param name="context">Связанный <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.TryComputeLength(System.Int64@)">
      <summary> Вычисляет длину потока, если это возможно. </summary>
      <returns>Значение true, если длина вычислена; в противном случае — значение false.</returns>
      <param name="length">Вычисленная длина потока.</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestHeadersExtensions">
      <summary>Предоставляет методы расширения для класса <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders)">
      <summary>Получает все заголовки cookie, представленные в запросе.</summary>
      <returns>Коллекция экземпляров <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</returns>
      <param name="headers">Заголовки запроса.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders,System.String)">
      <summary>Получает все заголовки cookie, присутствующие в запросе и содержащие состояния cookie, имена которых соответствуют заданному значению.</summary>
      <returns>Коллекция экземпляров <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</returns>
      <param name="headers">Заголовки запроса.</param>
      <param name="name">Имя состояния cookie для сравнения.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)"></member>
    <member name="T:System.Net.Http.HttpResponseHeadersExtensions">
      <summary> Предоставляет методы расширения для класса <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" />. </summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseHeadersExtensions.AddCookies(System.Net.Http.Headers.HttpResponseHeaders,System.Collections.Generic.IEnumerable{System.Net.Http.Headers.CookieHeaderValue})">
      <summary> Добавляет файлы cookie в ответ. Каждый заголовок Set-Cookie представляется одним экземпляром <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />. <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> содержит сведения о домене, пути и других свойствах файла cookie, а также один экземпляр <see cref="T:System.Net.Http.Headers.CookieState" /> или несколько. Каждый экземпляр <see cref="T:System.Net.Http.Headers.CookieState" /> содержит имя файла cookie и состояние, связанное с этим именем. Состояние представлено коллекцией <see cref="T:System.Collections.Specialized.NameValueCollection" />, которая при передаче кодируется как данные с URL-кодированием в HTML-формах.  Это представление позволяет передавать несколько связанных "файлов cookie" в одном заголовке Cookie, при этом разделяя их состояния. Пример заголовка Cookie приведен ниже. В этом примере есть два <see cref="T:System.Net.Http.Headers.CookieState" /> с именами state1 и state2. Состояние каждого файла cookie содержит две пары "имя-значение": (name1/value1 и name2/value2) и (name3/value3 и name4/value4). &lt;code&gt; Set-Cookie: state1:name1=value1&amp;amp;name2=value2; state2:name3=value3&amp;amp;name4=value4; domain=domain1; path=path1; &lt;/code&gt;</summary>
      <param name="headers">Заголовки ответа.</param>
      <param name="cookies">Значения cookie, добавляемые в ответ.</param>
    </member>
    <member name="T:System.Net.Http.MultipartFileData">
      <summary>Представляет данные составного файла.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileData.#ctor(System.Net.Http.Headers.HttpContentHeaders,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.MultipartFileData" />.</summary>
      <param name="headers">Заголовки данных составного файла.</param>
      <param name="localFileName">Имя локального файла для данных составного файла.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.Headers">
      <summary>Получает или задает заголовки данных составного файла.</summary>
      <returns>Заголовки данных составного файла.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.LocalFileName">
      <summary>Получает или задает имя локального файла для данных составного файла.</summary>
      <returns>Имя локального файла для данных составного файла.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFileStreamProvider">
      <summary>Представляет <see cref="T:System.Net.Http.IMultipartStreamProvider" />, приспособленный для записи составных частей сообщения MIME в файл с помощью <see cref="T:System.IO.FileStream" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.MultipartFileStreamProvider" />.</summary>
      <param name="rootPath">Корневой путь, куда записывается содержимое составных частей MIME.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.MultipartFileStreamProvider" />.</summary>
      <param name="rootPath">Корневой путь, куда записывается содержимое составных частей MIME.</param>
      <param name="bufferSize">Число байтов, буферизуемых при записи в файл.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.BufferSize">
      <summary>Получает или задает количество байтов, помещенных в буфер для записи данных в файл.</summary>
      <returns>Число байтов, буферизуемых при записи в файл.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.FileData">
      <summary>Получает или задает данные составного файла.</summary>
      <returns>Данные составного файла.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetLocalFileName(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Получает имя локального файла, которое в сочетании с корневым путем формирует абсолютное имя файла, где хранится содержимое текущей составной части текста MIME.</summary>
      <returns>Относительное имя файла без пути.</returns>
      <param name="headers">Заголовки для текущей составной части MIME.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Получает экземпляр потока, куда записывается часть текста сообщения.</summary>
      <returns>Экземпляр <see cref="T:System.IO.Stream" />, куда записывается часть текста сообщения.</returns>
      <param name="parent">Содержимое HTTP.</param>
      <param name="headers">Поля заголовков с описанием части текста.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.RootPath">
      <summary>Получает или задает корневой путь для записи составных частей текста MIME.</summary>
      <returns>Корневой путь, куда записывается содержимое составных частей MIME.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataStreamProvider">
      <summary>
        <see cref="T:System.Net.Http.IMultipartStreamProvider" />, приспособленный для использования при отправке файлов через HTML для записи содержимого файла в <see cref="T:System.IO.FileStream" />. Поставщик потока проверяет поле заголовка &lt;b&gt;Content-Disposition&lt;/b&gt; и определяет выходной <see cref="T:System.IO.Stream" /> на основе наличия параметра &lt;b&gt;filename&lt;/b&gt;. Если параметр &lt;b&gt;filename&lt;/b&gt; присутствует в поле заголовка &lt;b&gt;Content-Disposition&lt;/b&gt;, то часть текста записывается в <see cref="T:System.IO.FileStream" />, в противном случае она записывается в <see cref="T:System.IO.MemoryStream" />. Это упрощает обработку составных данных MIME в HTML-формах, представляющих собой сочетание данных формы и содержимого файла. </summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" />. </summary>
      <param name="rootPath">Корневой путь, куда записывается содержимое составных частей MIME.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String,System.Int32)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" />. </summary>
      <param name="rootPath">Корневой путь, куда записывается содержимое составных частей MIME.</param>
      <param name="bufferSize">Число байтов, буферизуемых при записи в файл.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.ExecutePostProcessingAsync">
      <summary>Считывает нефайловое содержимое как данные формы.</summary>
      <returns>Задача, которая представляет асинхронную операцию.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFormDataStreamProvider.FormData">
      <summary>Получает <see cref="T:System.Collections.Specialized.NameValueCollection" /> данных формы, которые передаются как часть данных составной формы.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> данных формы.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <returns>Экземпляр <see cref="T:System.IO.Stream" />, куда записывается часть текста сообщения.</returns>
      <param name="parent">Содержимое HTTP, содержащее эту часть текста.</param>
      <param name="headers">Поля заголовка, описывающие часть текста.</param>
    </member>
    <member name="T:System.Net.Http.MultipartMemoryStreamProvider">
      <summary>Представляет поставщик составного потока в памяти.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Возвращает <see cref="T:System.IO.Stream" /> для <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> для <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</returns>
      <param name="parent">Объект <see cref="T:System.Net.Http.HttpContent" />.</param>
      <param name="headers">Заголовки содержимого HTTP.</param>
    </member>
    <member name="T:System.Net.Http.MultipartRelatedStreamProvider">
      <summary>Представляет поставщика составного множественного потока.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Получает соответствующий поток для поставщика.</summary>
      <returns>Заголовки содержимого.</returns>
      <param name="parent">Родительское содержимое.</param>
      <param name="headers">Заголовки содержимого HTTP.</param>
    </member>
    <member name="P:System.Net.Http.MultipartRelatedStreamProvider.RootContent">
      <summary>Получает корневое содержимое из <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</summary>
      <returns>Корневое содержимое <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartStreamProvider">
      <summary>Реализация поставщика потоков, которая проверяет заголовки, предоставленные средством анализа составных типов MIME, в рамках методов расширения составных типов MIME (см. <see cref="T:System.Net.Http.HttpContentMultipartExtensions" />) и выбирает тип потока, возвращаемый для записи части текста.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartStreamProvider.Contents">
      <summary>Получает или задает содержимое для этого <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>Содержимое для этого <see cref="T:System.Net.Http.MultipartStreamProvider" />.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.ExecutePostProcessingAsync">
      <summary>Выполняет операцию постобработки для данного <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>Асинхронная задача для этой операции.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Возвращает поток, куда пишется часть текста. Этот метод вызывается после анализа части составного текста MIME.</summary>
      <returns>Экземпляр <see cref="T:System.IO.Stream" />, куда записывается часть текста сообщения.</returns>
      <param name="parent">Содержимое HTTP.</param>
      <param name="headers">Поля заголовков с описанием части текста.</param>
    </member>
    <member name="T:System.Net.Http.ObjectContent">
      <summary> Содержит значение, а также связанный <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, используемый для сериализации этого значения при записи содержимого. </summary>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.ObjectContent" />.</summary>
      <param name="type">Тип объекта, который будет содержать этот экземпляр.</param>
      <param name="value">Значение объекта, который будет содержать этот экземпляр.</param>
      <param name="formatter">Модуль форматирования для использования при сериализации значения.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.ObjectContent" />. </summary>
      <param name="type">Тип объекта, который будет содержать этот экземпляр.</param>
      <param name="value">Значение объекта, который будет содержать этот экземпляр.</param>
      <param name="formatter">Модуль форматирования для использования при сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type. Может быть равно NULL. В этом случае используется тип содержимого модуля форматирования по умолчанию.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.ObjectContent" />.</summary>
      <param name="type">Тип объекта, который будет содержать этот экземпляр.</param>
      <param name="value">Значение объекта, который будет содержать этот экземпляр.</param>
      <param name="formatter">Модуль форматирования для использования при сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Formatter">
      <summary>Возвращает модуль форматирования мультимедиа, связанный с этим экземпляром содержимого.</summary>
      <returns>Объект <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Net.Http.ObjectContent.ObjectType">
      <summary>Возвращает тип объекта, управляемого этим экземпляром <see cref="T:System.Net.Http.ObjectContent" />.</summary>
      <returns>Тип объекта.</returns>
    </member>
    <member name="M:System.Net.Http.ObjectContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Асинхронно сериализирует содержимое объекта в заданный поток.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="stream">Поток, в который требуется выполнить запись.</param>
      <param name="context">Связанный <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.TryComputeLength(System.Int64@)">
      <summary>Вычисляет длину потока, если это возможно.</summary>
      <returns>Значение true, если длина вычислена; в противном случае — значение false.</returns>
      <param name="length">Получает вычисленную длину потока.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Value">
      <summary>Получает или задает тип содержимого.</summary>
      <returns>Значение содержимого.</returns>
    </member>
    <member name="T:System.Net.Http.ObjectContent`1">
      <summary> Универсальная форма <see cref="T:System.Net.Http.ObjectContent" />. </summary>
      <typeparam name="T">Тип объекта, который будет содержать этот объект.</typeparam>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.ObjectContent`1" />.</summary>
      <param name="value">Значение объекта, который будет содержать этот экземпляр.</param>
      <param name="formatter">Модуль форматирования для использования при сериализации значения.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Инициализирует новый экземпляр класса &lt;see cref="T:System.Net.Http.ObjectContent`1" /&gt;. </summary>
      <param name="value">Значение объекта, который будет содержать этот экземпляр.</param>
      <param name="formatter">Модуль форматирования для использования при сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type. Может быть равно NULL. В этом случае используется тип содержимого модуля форматирования по умолчанию.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.ObjectContent`1" />.</summary>
      <param name="value">Значение объекта, который будет содержать этот экземпляр.</param>
      <param name="formatter">Модуль форматирования для использования при сериализации значения.</param>
      <param name="mediaType">Заслуживающее доверия значение заголовка Content-Type.</param>
    </member>
    <member name="T:System.Net.Http.PushStreamContent">
      <summary>Позволяет использовать сценарии, в которых производителю данных требуется вести запись напрямую (синхронно или асинхронно), используя поток.</summary>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Действие, которое вызывается, когда поток вывода доступен, что позволяет действию вести запись в него напрямую. </param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Действие, которое вызывается, когда поток вывода доступен, что позволяет действию вести запись в него напрямую.</param>
      <param name="mediaType">Тип мультимедиа.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Действие, которое вызывается, когда поток вывода доступен, что позволяет действию вести запись в него напрямую.</param>
      <param name="mediaType">Тип мультимедиа.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Асинхронно сериализирует push-содержимое в поток.</summary>
      <returns>Сериализованное push-содержимое.</returns>
      <param name="stream">Поток, куда сериализуется push-содержимое.</param>
      <param name="context">Контекст.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.TryComputeLength(System.Int64@)">
      <summary>Определяет, имеет ли содержимое потока допустимую длину в байтах.</summary>
      <returns>Значение true, если длина является допустимой; в противном случае — false.</returns>
      <param name="length">Длина содержимого потока в байтах.</param>
    </member>
    <member name="T:System.Net.Http.UriExtensions">
      <summary>Содержит методы расширения, позволяющие считывать строго типизированные объекты из компонентов запроса экземпляров <see cref="T:System.Uri" />. </summary>
    </member>
    <member name="M:System.Net.Http.UriExtensions.ParseQueryString(System.Uri)">
      <summary>Анализирует сегмент запроса указанного URI.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.NameValueCollection" />, содержащий параметры запроса.</returns>
      <param name="address">URI для анализа.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs(System.Uri,System.Type,System.Object@)">
      <summary>Считывает данные с URL-кодированием в HTML-формах, представленные в строке запроса URI как объект указанного типа.</summary>
      <returns>Значение true, если компонент запроса URI может быть прочитан в качестве указанного типа; в противном случае — false.</returns>
      <param name="address">URI для чтения.</param>
      <param name="type">Тип объекта для чтения.</param>
      <param name="value">При возврате из метода содержит объект, инициализируемый компонентом запроса URI. Этот параметр рассматривается как неинициализированный.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs``1(System.Uri,``0@)">
      <summary>Считывает данные с URL-кодированием в HTML-формах, представленные в строке запроса URI как объект указанного типа.</summary>
      <returns>Значение true, если компонент запроса URI может быть прочитан в качестве указанного типа; в противном случае — false.</returns>
      <param name="address">URI для чтения.</param>
      <param name="value">При возврате из метода содержит объект, инициализируемый компонентом запроса URI. Этот параметр рассматривается как неинициализированный.</param>
      <typeparam name="T">Тип объекта для чтения.</typeparam>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAsJson(System.Uri,Newtonsoft.Json.Linq.JObject@)">
      <summary>Считывает данные HTML-формы с URL-кодированием из компонента запроса <see cref="T:System.Uri" /> в качестве объекта <see cref="T:Newtonsoft.Json.Linq.JObject" />.</summary>
      <returns>  Значение true, если компонент запроса может быть считан в качестве <see cref="T:Newtonsoft.Json.Linq.JObject" />; в противном случае — false.</returns>
      <param name="address">Экземпляр <see cref="T:System.Uri" /> для чтения.</param>
      <param name="value">Объект, инициализируемый этим экземпляром, или значение null, если преобразование не может быть выполнено.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter">
      <summary>Представляет вспомогательный класс, реализующий синхронный модуль форматирования поверх асинхронной инфраструктуры форматирования.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" />.</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.BufferedMediaTypeFormatter.BufferSize">
      <summary>Получает или задает предлагаемый размер буфера для потоков (в байтах).</summary>
      <returns>Предлагаемый размер буфера для потоков (в байтах).</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Синхронное чтение из буферизованного потока.</summary>
      <returns>Объект данного <paramref name="type" />.</returns>
      <param name="type">Тип десериализуемого объекта.</param>
      <param name="readStream">Поток, из которого осуществляется чтение.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, если оно есть. Может равняться NULL.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> для регистрации событий в журнале.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Асинхронное чтение из буферизованного потока.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="type">Тип десериализуемого объекта.</param>
      <param name="readStream">Поток, из которого осуществляется чтение.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, если оно есть. Может равняться NULL.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> для регистрации событий в журнале.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Синхронная запись в буферизованный поток.</summary>
      <param name="type">Тип объекта для сериализации.</param>
      <param name="value">Значение объекта для записи. Может равняться NULL.</param>
      <param name="writeStream">Поток для записи.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, если оно есть. Может равняться NULL.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Асинхронная запись в буферизованный поток.</summary>
      <returns>Объект задачи, представляющий асинхронную операцию.</returns>
      <param name="type">Тип объекта для сериализации.</param>
      <param name="value">Значение объекта для записи.  Значение может быть равно null.</param>
      <param name="writeStream">Поток для записи.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, если оно есть. Может равняться NULL.</param>
      <param name="transportContext">Контекст транспорта.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.ContentNegotiationResult">
      <summary> Представляет результат согласования содержимого, выполняемого с помощью &lt;see cref="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" /&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.ContentNegotiationResult.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Создает объекта результата согласования содержимого. </summary>
      <param name="formatter">Модуль форматирования данных.</param>
      <param name="mediaType">Предпочитаемый тип мультимедиа. Может равняться NULL.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.Formatter">
      <summary> Выбранный для сериализации модуль форматирования данных. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.MediaType">
      <summary> Тип мультимедиа, связанный с выбранным для сериализации модулем форматирования. Может равняться NULL. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.DefaultContentNegotiator">
      <summary>Реализация по умолчанию для <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />, который используется при выборе <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для <see cref="T:System.Net.Http.HttpRequestMessage" /> или <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" />.</summary>
      <param name="excludeMatchOnTypeOnly">Значение true, чтобы исключить модули форматирования, которые соответствуют только типу объекта; в противном случае — false.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.ComputeFormatterMatches(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Определяет степень соответствия каждого модуля форматирования запросу HTTP.</summary>
      <returns>Возвращает коллекцию объектов <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />, которые представляют все совпадения.</returns>
      <param name="type">Сериализуемый тип.</param>
      <param name="request">Запрос.</param>
      <param name="formatters">Набор объектов <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, среди которых идет выбор.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.DefaultContentNegotiator.ExcludeMatchOnTypeOnly">
      <summary>Значение true, чтобы исключить модули форматирования, которые соответствуют только типу объекта; в противном случае — false.</summary>
      <returns>Возвращает значение <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchAcceptHeader(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue},System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Сопоставляет набор полей заголовка Accept с типами мультимедиа, которые поддерживает модуль форматирования.</summary>
      <returns>Возвращает объект <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />, который указывает на качество совпадения, или значение NULL, если совпадение отсутствует.</returns>
      <param name="sortedAcceptValues">Список значений заголовка Accept, отсортированных в порядке убывания q-фактора. Создать этот список можно путем вызова метода <see cref="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})" />.</param>
      <param name="formatter">Модуль форматирования для сопоставления.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchMediaTypeMapping(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Сопоставляет запрос с объектами <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> в модуле форматирования типа мультимедиа.</summary>
      <returns>Возвращает объект <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />, который указывает на качество совпадения, или значение NULL, если совпадение отсутствует.</returns>
      <param name="request">Запрос.</param>
      <param name="formatter">Модуль форматирования типа мультимедиа.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchRequestMediaType(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Сопоставляет тип содержимого запроса с типами мультимедиа, которые поддерживает модуль форматирования.</summary>
      <returns>Возвращает объект <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />, который указывает на качество совпадения, или значение NULL, если совпадение отсутствует.</returns>
      <param name="request">Запрос.</param>
      <param name="formatter">Модуль форматирования для сопоставления.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchType(System.Type,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Выбирает первый поддерживаемый тип мультимедиа модуля форматирования.</summary>
      <returns>Возвращает <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> с <see cref="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking" />, равным <see cref="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType" />, или значение NULL, если соответствие отсутствует. </returns>
      <param name="type">Тип для сопоставления.</param>
      <param name="formatter">Модуль форматирования для сопоставления.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Выполняет согласование содержимого, выбрав наиболее подходящий <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> из переданных <paramref name="formatters" /> для заданного <paramref name="request" />, который может сериализовать объект данного <paramref name="type" />. </summary>
      <returns>Результат согласования — наиболее подходящий экземпляр <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, или null, если подходящего модуля форматирования нет.</returns>
      <param name="type">Сериализуемый тип.</param>
      <param name="request">Запрос.</param>
      <param name="formatters">Набор объектов <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, среди которых идет выбор.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseCharacterEncoding(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Определяет лучшую кодировку символов для записи ответа.</summary>
      <returns>Возвращает оптимальную кодировку в <see cref="T:System.Text.Encoding" />.</returns>
      <param name="request">Запрос.</param>
      <param name="formatter">Выбранный модуль форматирования мультимедиа.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseMediaTypeFormatter(System.Collections.Generic.ICollection{System.Net.Http.Formatting.MediaTypeFormatterMatch})">
      <summary>Выбирает лучшее совпадение между найденными кандидатами.</summary>
      <returns>Возвращает объект <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />, представляющий лучшее совпадение.</returns>
      <param name="matches">Коллекция совпадений.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})">
      <summary>Сортирует значения заголовка Accept по убыванию q-фактора.</summary>
      <returns>Возвращает отсортированный список объектов MediaTypeWithQualityHeaderValue.</returns>
      <param name="headerValues">Коллекция объектов MediaTypeWithQualityHeaderValue, представляющих значения заголовка Accept.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})">
      <summary>Сортирует список значений заголовка Accept-Charset, Accept-Encoding, Accept-Language и т. п. по убыванию q-фактора. </summary>
      <returns>Возвращает отсортированный список объектов StringWithQualityHeaderValue.</returns>
      <param name="headerValues">Коллекция объектов StringWithQualityHeaderValue, представляющих поля заголовка.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.UpdateBestMatch(System.Net.Http.Formatting.MediaTypeFormatterMatch,System.Net.Http.Formatting.MediaTypeFormatterMatch)">
      <summary>Определяет, лучше ли это совпадение, чем текущее.</summary>
      <returns>Возвращает лучшее совпадение из двух в объекте <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />.</returns>
      <param name="current">Текущее совпадение.</param>
      <param name="potentialReplacement">Совпадение, сравниваемое с текущим.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.DelegatingEnumerable`1">
      <summary> Вспомогательный класс для сериализации типов &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; путем их делегирования конкретной реализации."/&amp;gt;. </summary>
      <typeparam name="T">Интерфейс прокси-реализации.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor">
      <summary> Инициализация DelegatingEnumerable. Этот конструктор необходим для работы <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary> Инициализация DelegatingEnumerable с &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. Это вспомогательный класс для проксирования интерфейсов &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; для <see cref="T:System.Xml.Serialization.XmlSerializer" />. </summary>
      <param name="source">Экземпляр &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;, откуда берется перечислитель.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.Add(System.Object)">
      <summary> Этот метод не реализован, но он необходим для работы метода сериализации. Не используйте. </summary>
      <param name="item">Добавляемый элемент. Не используется.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.GetEnumerator">
      <summary> Возвращает перечислитель связанного &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. </summary>
      <returns>Перечислитель исходного &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary> Возвращает перечислитель связанного &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. </summary>
      <returns>Перечислитель исходного &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormDataCollection">
      <summary>Представляет коллекцию данных формы.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.FormDataCollection" />.</summary>
      <param name="pairs">Пары.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.FormDataCollection" />.</summary>
      <param name="query">Запрос.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Uri)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.FormDataCollection" />.</summary>
      <param name="uri">URI.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.Get(System.String)">
      <summary>Получает коллекцию данных формы.</summary>
      <returns>Коллекция данных формы.</returns>
      <param name="key">Ключ.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetEnumerator">
      <summary>Возвращает перечислитель, который используется для итерации по коллекции.</summary>
      <returns>Перечислитель, который используется для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetValues(System.String)">
      <summary>Получает значения коллекции данных формы.</summary>
      <returns>Значения коллекции данных формы.</returns>
      <param name="key">Ключ.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.ReadAsNameValueCollection">
      <summary>Читает коллекцию данных формы в формате коллекции пар "имя-значение".</summary>
      <returns>Коллекция данных формы в формате коллекции пар "имя-значение".</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который используется для итерации по коллекции.</summary>
      <returns>Перечислитель, который используется для итерации по коллекции.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter">
      <summary>Класс <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для обработки данных с URL-кодированием в HTML-формах, то есть "application/x-www-form-urlencoded".  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Запрашивает, может ли <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> десериализовать объект указанного типа.</summary>
      <returns>Значение true, если <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> может провести десериализацию типа; в противном случае — false.</returns>
      <param name="type">Тип для десериализации.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Запрашивает, может ли <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> сериализовать объект указанного типа.</summary>
      <returns>Значение true, если <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> может провести сериализацию типа; в противном случае — false.</returns>
      <param name="type">Тип для сериализации.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.DefaultMediaType">
      <summary>Получает тип мультимедиа по умолчанию для данных с URL-кодированием в HTML-формах — "application/x-www-form-urlencoded".</summary>
      <returns>Тип мультимедиа по умолчанию для данных с URL-кодированием в HTML-формах.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.MaxDepth">
      <summary>Возвращает или задает максимальную глубину этого модуля форматирования.</summary>
      <returns>Максимальная глубина.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadBufferSize">
      <summary>Возвращает или задает размер буфера при считывании входящего потока.</summary>
      <returns>Размер буфера.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Асинхронно десериализует объект указанного типа.</summary>
      <returns>Экземпляр <see cref="T:System.Threading.Tasks.Task" />, результатом которого будет считанный экземпляр объекта.</returns>
      <param name="type">Тип объекта для сериализации.</param>
      <param name="readStream">
        <see cref="T:System.IO.Stream" /> для чтения.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> считываемого содержимого.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> для регистрации событий в журнале.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IContentNegotiator">
      <summary> Выполняет согласование содержимого.  Это процесс выбора модуля записи ответа (модуля форматирования) в соответствии со значениями заголовков в запросе. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Выполняет согласование содержимого, выбирая наиболее подходящий <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> из переданных модулей форматирования для данного запроса, способный сериализовать объект данного типа. </summary>
      <returns>Результат согласования, содержащий наиболее подходящий экземпляр <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, или null, если подходящего модуля форматирования нет.</returns>
      <param name="type">Сериализуемый тип.</param>
      <param name="request">Сообщение запроса, в котором содержатся значения заголовка, используемые для согласования.</param>
      <param name="formatters">Набор объектов <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, среди которых идет выбор.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IFormatterLogger">
      <summary>Задает интерфейс обратного вызова, который модуль форматирования может использовать для ведения журнала ошибок при чтении.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.Exception)">
      <summary>Заносит в журнал ошибку.</summary>
      <param name="errorPath">Путь к члену, ошибка которого заносится в журнал.</param>
      <param name="exception">Сообщение об ошибке.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.String)">
      <summary>Заносит в журнал ошибку.</summary>
      <param name="errorPath">Путь к члену, ошибка которого заносится в журнал.</param>
      <param name="errorMessage">Сообщение об ошибке, заносимое в журнал.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IRequiredMemberSelector">
      <summary>Определяет метод, который указывает, необходим ли данный член для десериализации.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>Определяет, необходим ли данный член для десериализации.</summary>
      <returns>Значение true, если <paramref name="member" /> считается обязательным. В противном случае — значение false.</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> для десериализации.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.JsonMediaTypeFormatter">
      <summary>Представляет класс <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для обработки JSON. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Определяет, может ли этот <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> читать объекты указанного <paramref name="type" />.</summary>
      <returns>Значение true, если объекты этого <paramref name="type" /> можно читать, в противном случае — false.</returns>
      <param name="type">Тип считываемого объекта.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Определяет, может ли этот <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> писать объекты указанного <paramref name="type" />.</summary>
      <returns>Значение true, если объекты этого <paramref name="type" /> можно писать, в противном случае — false.</returns>
      <param name="type">Тип записываемого объекта.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateDefaultSerializerSettings">
      <summary> Создает экземпляр JsonSerializerSettings с параметрами по умолчанию, используемый <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />. </summary>
      <returns>Созданный экземпляр JsonSerializerSettings с параметрами по умолчанию, используемый <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.DefaultMediaType">
      <summary>Возвращает тип мультимедиа JSON по умолчанию, а именно "application/json".</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> для JSON.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.Indent">
      <summary> Возвращает или задает значение, указывающее, используется ли отступ для элементов при записи данных.  </summary>
      <returns>Значение true для задания отступа элементов при записи данных. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.MaxDepth">
      <summary>Возвращает или задает максимальную глубину этого модуля форматирования.</summary>
      <returns>Максимальная глубина этого модуля форматирования.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Считывает объект указанного <paramref name="type" /> из заданного <paramref name="stream" />. Этот метод вызывается во время десериализации.</summary>
      <returns>Возвращает значение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="type">Тип объекта для чтения.</param>
      <param name="readStream">Поток, из которого осуществляется чтение.</param>
      <param name="content">Записываемое содержимое.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> для регистрации событий в журнале.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.SerializerSettings">
      <summary> Получает или задает параметры JsonSerializerSettings, которые используются для настройки JsonSerializer. </summary>
      <returns> Параметры JsonSerializerSettings, которые используются для настройки JsonSerializer. </returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.UseDataContractJsonSerializer">
      <summary> Возвращает или задает значение, указывающее, используется ли <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> по умолчанию. </summary>
      <returns>Значение true, если <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> используется по умолчанию. В противном случае — false.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Записывает объект указанного <paramref name="type" /> в заданный <paramref name="stream" />. Этот метод вызывается во время сериализации.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />, который ведет запись объекта в поток.</returns>
      <param name="type">Тип объекта для записи.</param>
      <param name="value">Объект для записи.</param>
      <param name="writeStream">
        <see cref="T:System.IO.Stream" /> для записи.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, куда записывается содержимое.</param>
      <param name="transportContext">Объект <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatter">
      <summary> Базовый класс, отвечающий за сериализацию и десериализацию строго типизированных объектов с помощью <see cref="T:System.Net.Http.ObjectContent" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)">
      <summary>Запрашивает, может ли <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> десериализовать объект указанного типа.</summary>
      <returns>Значение true, если <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> может провести десериализацию типа; в противном случае — false.</returns>
      <param name="type">Тип для десериализации.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Запрашивает, может ли <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> сериализовать объект указанного типа.</summary>
      <returns>Значение true, если <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> может провести сериализацию типа; в противном случае — false.</returns>
      <param name="type">Тип для сериализации.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)">
      <summary>Получает значение по умолчанию для заданного типа.</summary>
      <returns>Значение по умолчанию.</returns>
      <param name="type">Тип, для которого необходимо получить значение по умолчанию.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Возвращает специализированный экземпляр <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, который может провести форматирование ответа с указанными параметрами.</summary>
      <returns>Возвращает значение <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
      <param name="type">Тип для форматирования.</param>
      <param name="request">Запрос.</param>
      <param name="mediaType">Тип мультимедиа.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys">
      <summary>Получает или задает максимальное количество ключей, хранящихся в T: <see cref="System.Collections.Specialized.NameValueCollection" />.</summary>
      <returns>Максимальное количество ключей.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings">
      <summary>Получает изменяемую коллекцию объектов <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />, которые сопоставляют запросы HTTP с типами мультимедиа.</summary>
      <returns>Коллекция <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Асинхронно десериализует объект указанного типа.</summary>
      <returns>Экземпляр <see cref="T:System.Threading.Tasks.Task" />, результатом которого будет объект данного типа.</returns>
      <param name="type">Тип десериализуемого объекта.</param>
      <param name="readStream">
        <see cref="T:System.IO.Stream" /> для чтения.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, если оно есть. Значение может быть равно null.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> для регистрации событий в журнале.</param>
      <exception cref="T:System.NotSupportedException">Производные типы, необходимые для поддержки чтения.</exception>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector">
      <summary>Получает или задает <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" />, который используется для определения необходимых членов.</summary>
      <returns>Экземпляр <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Определяет оптимальную кодировку для чтения или записи тела объекта HTTP по набору заголовков содержимого.</summary>
      <returns>Оптимальная кодировка.</returns>
      <param name="contentHeaders">Заголовки содержимого.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Задает заголовки содержимого по умолчанию, который будут форматироваться с использованием этого модуля форматирования. Этот метод вызывается из конструктора <see cref="T:System.Net.Http.ObjectContent" />. Эта реализация задает заголовок Content-Type как mediaType, если это значение не равно NULL. Если оно равно NULL, она задает Content-Type как тип мультимедиа по умолчанию для этого модуля форматирования данных. Если Content-Type не задает кодировку, то она будет задана по <see cref="T:System.Text.Encoding" />, настроенной для этого модуля форматирования. </summary>
      <param name="type">Тип сериализуемого объекта. См. <see cref="T:System.Net.Http.ObjectContent" />.</param>
      <param name="headers">Заголовки содержимого, которые необходимо настроить.</param>
      <param name="mediaType">Достоверный тип мультимедиа. Может равняться NULL.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings">
      <summary>Получает изменяемую коллекцию кодировок, поддерживаемых этим <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <returns>Коллекция объектов <see cref="T:System.Text.Encoding" />.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes">
      <summary>Получает изменяемую коллекцию типов мультимедиа, поддерживаемых этим <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <returns>Коллекция объектов <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Асинхронно записывает объект указанного типа.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />, которая будет производить запись.</returns>
      <param name="type">Тип объекта для записи.</param>
      <param name="value">Значение объекта для записи.  Значение может быть равно null.</param>
      <param name="writeStream">
        <see cref="T:System.IO.Stream" /> для записи.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, если они есть. Значение может быть равно null.</param>
      <param name="transportContext">
        <see cref="T:System.Net.TransportContext" />, если они есть. Значение может быть равно null.</param>
      <exception cref="T:System.NotSupportedException">Производные типы, необходимые для поддержки записи.</exception>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterCollection">
      <summary>Представляет класс коллекции, содержащей экземпляры <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> значениями по умолчанию.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> с указанными <paramref name="formatters" />.</summary>
      <param name="formatters">Коллекция экземпляров <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, помещаемая в коллекцию.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindReader(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Ищет в коллекции модуль форматирования, который может считывать <paramref name="type" /> .NET в указанном <paramref name="mediaType" />. </summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, который может читать этот тип, или NULL, если модуль форматирования найти не удалось.</returns>
      <param name="type">Тип .NET для чтения.</param>
      <param name="mediaType">Тип мультимедиа для сопоставления.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindWriter(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Ищет в коллекции модуль форматирования, который может записывать <paramref name="type" /> .NET в указанном <paramref name="mediaType" />. </summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, который может писать этот тип, или NULL, если модуль форматирования найти не удалось.</returns>
      <param name="type">Тип .NET для записи.</param>
      <param name="mediaType">Тип мультимедиа для сопоставления.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.FormUrlEncodedFormatter">
      <summary> Получает <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для использования с данными application/x-www-form-urlencoded. </summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для использования с данными application/x-www-form-urlencoded. </returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.IsTypeExcludedFromValidation(System.Type)">
      <summary> Определяет, является ли <paramref name="type" /> слабо определенным типом, который не должен проходить проверку.</summary>
      <returns>Значение true, если тип исключается. В противном случае — значение false.</returns>
      <param name="type">Тип <see cref="T:System.Type" /> .NET для проверки.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.JsonFormatter">
      <summary> Получает <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для использования с JSON. </summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, используемый для JSON.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.XmlFormatter">
      <summary> Получает <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для использования с XML.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, используемый для XML.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Обновляет данный набор formatter элементов <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> так, чтобы он связывал mediaType с <see cref="T:System.Uri" />, содержащими определенные параметры и значения запросов. </summary>
      <param name="formatter">
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, получающий новый элемент <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />.</param>
      <param name="queryStringParameterName">Имя параметра запроса.</param>
      <param name="queryStringParameterValue">Значение параметра запроса.</param>
      <param name="mediaType">
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, связываемое с <see cref="T:System.Uri" />, содержащим строку запроса, соответствующую queryStringParameterName и queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)">
      <summary> Обновляет данный набор formatter элементов <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> так, чтобы он связывал mediaType с <see cref="T:System.Uri" />, содержащими определенные параметры и значения запросов. </summary>
      <param name="formatter">
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, получающий новый элемент <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />.</param>
      <param name="queryStringParameterName">Имя параметра запроса.</param>
      <param name="queryStringParameterValue">Значение параметра запроса.</param>
      <param name="mediaType">Тип мультимедиа, связываемый с <see cref="T:System.Uri" />, содержащим строку запроса, соответствующую queryStringParameterName и queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Обновляет в данном наборе formatter элементов <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> так, чтобы он связывал mediaType с определенным полем заголовка HTTP-запроса, имеющим конкретное значение. </summary>
      <param name="formatter">
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, получающий новый элемент <see cref="T:System.Net.Http.Formatting.MediaRangeMapping" />.</param>
      <param name="headerName">Имя сопоставляемого заголовка.</param>
      <param name="headerValue">Сопоставляемое значение заголовка.</param>
      <param name="valueComparison">
        <see cref="T:System.StringComparison" />, которое будет использоваться для сопоставления headerValue.</param>
      <param name="isValueSubstring">Если значение равно true, то headerValue считается совпадением, если соответствует подстроке фактического значения заголовка.</param>
      <param name="mediaType">
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, связываемое с записью <see cref="M:HttpRequestMessage.Header" /> с именем, соответствующим headerName, и значением, соответствующим headerValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> Обновляет в данном наборе formatter элементов <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> так, чтобы он связывал mediaType с определенным полем заголовка HTTP-запроса, имеющим конкретное значение. </summary>
      <param name="formatter">
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, получающий новый элемент <see cref="T:System.Net.Http.Formatting.MediaRangeMapping" />.</param>
      <param name="headerName">Имя сопоставляемого заголовка.</param>
      <param name="headerValue">Сопоставляемое значение заголовка.</param>
      <param name="valueComparison">
        <see cref="T:System.StringComparison" />, которое будет использоваться для сопоставления headerValue.</param>
      <param name="isValueSubstring">Если значение равно true, то headerValue считается совпадением, если соответствует подстроке фактического значения заголовка.</param>
      <param name="mediaType">Тип мультимедиа, связываемый с записью <see cref="M:HttpRequestMessage.Header" /> с именем, соответствующим headerName, и значением, соответствующим headerValue.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatch">
      <summary> Этот класс описывает, насколько конкретный <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> соответствует запросу. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterMatch.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Nullable{System.Double},System.Net.Http.Formatting.MediaTypeFormatterMatchRanking)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />. </summary>
      <param name="formatter">Соответствующий модуль форматирования данных.</param>
      <param name="mediaType">Тип мультимедиа. Значение может быть равно NULL, если используется тип мультимедиа "application/octet-stream".</param>
      <param name="quality">Качество совпадения. Значение может быть равно NULL, тогда считается, что это полное совпадение со значением 1,0.</param>
      <param name="ranking">Вид совпадения.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Formatter">
      <summary> Получает модуль форматирования типа мультимедиа. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.MediaType">
      <summary> Получает соответствующий тип мультимедиа. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Quality">
      <summary> Получает качество совпадения. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking">
      <summary> Получает вид найденного совпадения. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking">
      <summary> Содержит сведения о том, в какой степени <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> соответствует явным или неявным предпочтениям, найденным во входящем запросе. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.None">
      <summary> Соответствие не найдено. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType">
      <summary> Найдено совпадение с типом. Модуль форматирования данных может его сериализовать.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderLiteral">
      <summary>Найдено совпадение с явным литералом-заголовком Accept, например "application/json".</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderSubtypeMediaRange">
      <summary>Найдено совпадение с явным диапазоном подтипов в заголовке Accept, например "application/*".</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderAllMediaRange">
      <summary>Найдено совпадение с явным диапазоном "*/*" в заголовке Accept.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestWithMediaTypeMapping">
      <summary> Найдено совпадение с <see cref="T:System.Net.Http.HttpRequestMessage" /> после применения различных <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestMediaType">
      <summary> Найдено совпадение с типом мультимедиа тела объекта в сообщении HTTP-запроса.</summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeMapping">
      <summary> Абстрактный базовый класс, который используется для создания связи между экземплярами <see cref="T:System.Net.Http.HttpRequestMessage" /> или <see cref="T:System.Net.Http.HttpResponseMessage" />, имеющими определенные характеристики и конкретное <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Инициализирует новый экземпляр <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> с указанным значением mediaType. </summary>
      <param name="mediaType">
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, связанная с экземплярами <see cref="T:System.Net.Http.HttpRequestMessage" /> или <see cref="T:System.Net.Http.HttpResponseMessage" />, имеющими определенные характеристики <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.String)">
      <summary> Инициализирует новый экземпляр <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> с указанным значением mediaType. </summary>
      <param name="mediaType">
        <see cref="T:System.String" />, связанная с экземплярами <see cref="T:System.Net.Http.HttpRequestMessage" /> или <see cref="T:System.Net.Http.HttpResponseMessage" />, имеющими определенные характеристики <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeMapping.MediaType">
      <summary> Получает <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, связанное с экземплярами <see cref="T:System.Net.Http.HttpRequestMessage" /> или <see cref="T:System.Net.Http.HttpResponseMessage" />, имеющими определенные характеристики <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Возвращает качество сопоставления <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, связанного с запросом. </summary>
      <returns> Качество совпадения. Значение должно находиться между 0,0 и 1,0. Значение 0,0 означает отсутствие совпадения. Значение 1,0 означает полное совпадение. </returns>
      <param name="request">
        <see cref="T:System.Net.Http.HttpRequestMessage" /> для проверки на характеристики, связанные с <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> из <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="T:System.Net.Http.Formatting.QueryStringMapping">
      <summary> Класс, который предоставляет <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> из строки запроса. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />. </summary>
      <param name="queryStringParameterName">Имя параметра строки запроса для сопоставления, если он присутствует.</param>
      <param name="queryStringParameterValue">Значение параметра строки запроса, указанного queryStringParameterName.</param>
      <param name="mediaType">
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, используемое, если параметр запроса, заданный queryStringParameterName, присутствует и имеет значение queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.String)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />. </summary>
      <param name="queryStringParameterName">Имя параметра строки запроса для сопоставления, если он присутствует.</param>
      <param name="queryStringParameterValue">Значение параметра строки запроса, указанного queryStringParameterName.</param>
      <param name="mediaType">Тип мультимедиа, используемый, если параметр запроса, заданный queryStringParameterName, присутствует и имеет значение queryStringParameterValue.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterName">
      <summary> Получает имя параметра строки запроса. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterValue">
      <summary> Получает значение параметра строки запроса. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Возвращает значение, указывающее, может ли этот экземпляр <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> вернуть <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> из запроса. </summary>
      <returns>Если этот экземпляр может создать <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> по запросу, возвращает 1,0, в противном случае — 0,0.</returns>
      <param name="request">Проверяемое <see cref="T:System.Net.Http.HttpRequestMessage" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.RequestHeaderMapping">
      <summary> Этот класс предоставляет сопоставление произвольного поля заголовка HTTP-запроса с <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, которое используется для выбора экземпляров <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для обработки текста сущности <see cref="T:System.Net.Http.HttpRequestMessage" /> или <see cref="T:System.Net.Http.HttpResponseMessage" />. &lt;remarks&gt;Этот класс проверяет на совпадение только поля заголовка, связанные с <see cref="M:HttpRequestMessage.Headers" />. Он не проверяет поля заголовка, связанные с экземплярами <see cref="M:HttpResponseMessage.Headers" /> или <see cref="M:HttpContent.Headers" />.&lt;/remarks&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />. </summary>
      <param name="headerName">Имя сопоставляемого заголовка.</param>
      <param name="headerValue">Сопоставляемое значение заголовка.</param>
      <param name="valueComparison">
        <see cref="T:System.StringComparison" />, которое будет использоваться для сопоставления headerValue.</param>
      <param name="isValueSubstring">Если значение равно true, то headerValue считается совпадением, если соответствует подстроке фактического значения заголовка.</param>
      <param name="mediaType">
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, используемое при совпадении headerName и headerValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />. </summary>
      <param name="headerName">Имя сопоставляемого заголовка.</param>
      <param name="headerValue">Сопоставляемое значение заголовка.</param>
      <param name="valueComparison">Сравнение значений, которое будет использоваться для сопоставления headerValue.</param>
      <param name="isValueSubstring">Если значение равно true, то headerValue считается совпадением, если соответствует подстроке фактического значения заголовка.</param>
      <param name="mediaType">Тип мультимедиа, используемый при совпадении headerName и headerValue.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderName">
      <summary> Получает имя сопоставляемого заголовка. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue">
      <summary> Получает сопоставляемое значение заголовка. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValueComparison">
      <summary> Получает <see cref="T:System.StringComparison" />, которое будет использоваться при сопоставлении <see cref="M:HeaderValue" />. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.IsValueSubstring">
      <summary> Получает значение, указывающее, сопоставляется ли <see cref="M:HeaderValue" /> как подстрока фактического значения заголовка. Этот экземпляр использует значение подстроки. </summary>
      <returns>true<see cref="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue" />false</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Возвращает значение, указывающее, может ли этот экземпляр <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> вернуть <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> из запроса. </summary>
      <returns> Качество совпадения. Значение должно находиться между 0,0 и 1,0. Значение 0,0 означает отсутствие совпадения. Значение 1,0 означает полное совпадение. </returns>
      <param name="request">Проверяемое <see cref="T:System.Net.Http.HttpRequestMessage" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping">
      <summary> Объект <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />, который сопоставляет поле HTTP-заголовка X-Requested-With, заданное через XmlHttpRequest (XHR) в AJAX, с типом мультимедиа "application/json", если в запросе не заданы явно поля заголовка Accept. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.#ctor">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Возвращает значение, указывающее, может ли этот экземпляр <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> вернуть <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> из запроса. </summary>
      <returns> Качество совпадения. Значение 0,0 означает отсутствие совпадения. Значение 1,0 означает полное совпадение: запрос был сделан с помощью XmlHttpRequest без заголовка Accept. </returns>
      <param name="request">Проверяемое <see cref="T:System.Net.Http.HttpRequestMessage" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlMediaTypeFormatter">
      <summary>Класс <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> для обработки Xml. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Запрашивает, может ли <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> десериализовать объект указанного типа.</summary>
      <returns>Значение true, если <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> может провести десериализацию типа; в противном случае — false.</returns>
      <param name="type">Тип для десериализации.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Запрашивает, может ли <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> сериализовать объект указанного типа.</summary>
      <returns>Значение true, если <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> может провести сериализацию типа; в противном случае — false.</returns>
      <param name="type">Тип для сериализации.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.DefaultMediaType">
      <summary>Получает тип мультимедиа для модуля XML-форматирования по умолчанию.</summary>
      <returns>Тип мультимедиа по умолчанию — "application/xml".</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.Indent">
      <summary>Возвращает или задает значение, указывающее, используется ли отступ для элементов при записи данных.</summary>
      <returns>Значение true для отделения элементов отступом; в противном случае — false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.MaxDepth">
      <summary>Получает и устанавливает максимальную глубину вложения узлов.</summary>
      <returns>Максимальная глубина вложенных узлов.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Вызывается при десериализации для считывания объекта указанного type из указанного readStream. </summary>
      <returns>Экземпляр <see cref="T:System.Threading.Tasks.Task" />, результатом которого будет считанный экземпляр объекта.</returns>
      <param name="type">Тип объекта для чтения.</param>
      <param name="readStream">Экземпляр <see cref="T:System.IO.Stream" /> для чтения.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> считываемого содержимого.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> для регистрации событий в журнале.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.RemoveSerializer(System.Type)">
      <summary>Отменяет регистрацию сериализатора, который сейчас связан с данным типом.</summary>
      <returns>Значение true, если для типа зарегистрирован сериализатор; в противном случае — false.</returns>
      <param name="type">Тип объекта, для которого удаляется сериализатор.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Регистрирует <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> для чтения или записи объектов указанного типа.</summary>
      <param name="serializer">Экземпляр <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <typeparam name="T">Тип объекта, который будет сериализироваться или десериализироваться <paramref name="serializer" />.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Регистрирует <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> для чтения или записи объектов указанного типа.</summary>
      <param name="type">Тип объекта, который будет сериализироваться или десериализироваться <paramref name="serializer" />.</param>
      <param name="serializer">Экземпляр <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
      <summary>Регистрирует <see cref="T:System.Xml.Serialization.XmlSerializer" /> для чтения или записи объектов указанного типа.</summary>
      <param name="type">Тип объекта, который будет сериализироваться или десериализироваться <paramref name="serializer" />.</param>
      <param name="serializer">Экземпляр <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Регистрирует <see cref="T:System.Xml.Serialization.XmlSerializer" /> для чтения или записи объектов указанного типа.</summary>
      <param name="serializer">Экземпляр <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
      <typeparam name="T">Тип объекта, который будет сериализироваться или десериализироваться <paramref name="serializer" />.</typeparam>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.UseXmlSerializer">
      <summary>Получает или задает значение, указывающее, использует ли модуль XML-форматирования <see cref="T:System.Xml.Serialization.XmlSerializer" /> как сериализатор по умолчанию вместо <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
      <returns>Если значение равно true, модуль форматирования использует <see cref="T:System.Xml.Serialization.XmlSerializer" /> по умолчанию; в противном случае он по умолчанию использует <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary> Вызывается при сериализации для записи объекта указанного type в указанный writeStream. </summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />, который ведет запись объекта в поток.</returns>
      <param name="type">Тип объекта для записи.</param>
      <param name="value">Объект для записи.</param>
      <param name="writeStream">
        <see cref="T:System.IO.Stream" /> для записи.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> записываемого содержимого.</param>
      <param name="transportContext">Объект <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="T:System.Net.Http.Handlers.HttpProgressEventArgs">
      <summary>Представляет аргументы событий для хода выполнения в HTTP.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.HttpProgressEventArgs.#ctor(System.Int32,System.Object,System.Int32,System.Nullable{System.Int64})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Handlers.HttpProgressEventArgs" />.</summary>
      <param name="progressPercentage">Процент выполнения.</param>
      <param name="userToken">Маркер пользователя.</param>
      <param name="bytesTransferred">Число переданных байтов.</param>
      <param name="totalBytes">Общее число переданных байтов.</param>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.BytesTransferred">
      <summary>Получает количество байтов, переданных в ходе выполнения в HTTP.</summary>
      <returns>Количество байтов, переданных в ходе выполнения в HTTP.</returns>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.TotalBytes">
      <summary>Получает общее количество байтов, переданных в ходе выполнения в HTTP.</summary>
      <returns>Общее количество байтов, переданных в ходе выполнения в HTTP.</returns>
    </member>
    <member name="T:System.Net.Http.Handlers.ProgressMessageHandler">
      <summary>Создает уведомление о ходе выполнения как для отправляемых объектов запроса, так и для загружаемых объектов ответа.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" />.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" />.</summary>
      <param name="innerHandler">Внутренний обработчик сообщений.</param>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpReceiveProgress">
      <summary>Возникает, когда загружаются объекты событий.</summary>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpSendProgress">
      <summary>Возникает, когда отправляются объекты событий.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpRequestProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Вызывает событие, обрабатывающее запрос хода выполнения.</summary>
      <param name="request">Запрос.</param>
      <param name="e">Обработчик события для запроса.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpResponseProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Вызывает событие, обрабатывающее ответ о ходе выполнения.</summary>
      <param name="request">Запрос.</param>
      <param name="e">Обработчик события для запроса.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Отправляет указанное сообщение о ходе выполнения для доставки на HTTP-сервер.</summary>
      <returns>Отправленное сообщение о ходе.</returns>
      <param name="request">Запрос.</param>
      <param name="cancellationToken">Маркер отмены.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieHeaderValue">
      <summary>Предоставляет значение заголовка cookie.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</summary>
      <param name="name">Значение имени.</param>
      <param name="values">Значения.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</summary>
      <param name="name">Значение имени.</param>
      <param name="value">Значение.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.Clone">
      <summary>Создает неполную копию значения cookie.</summary>
      <returns>Неполная копия значения cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Cookies">
      <summary>Получает коллекцию cookie, отправленных клиентом.</summary>
      <returns>Объект, представляющий коллекцию переменных cookie клиента.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Domain">
      <summary>Получает или задает домен, связанный с cookie.</summary>
      <returns>Имя домена для связи с cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Expires">
      <summary>Получает или задает дату и время окончания действия cookie.</summary>
      <returns>Время суток (на клиенте), когда истекает срок действия cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.HttpOnly">
      <summary>Получает или задает значение, указывающее, доступен ли cookie клиентским сценариям.</summary>
      <returns>Значение true, если cookie имеет атрибут HttpOnly и недоступен клиентским сценариям; в противном случае — false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Item(System.String)">
      <summary>Получает ярлык свойства cookie.</summary>
      <returns>Значение cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.MaxAge">
      <summary>Получает или задает максимальный возраст ресурса.</summary>
      <returns>Максимальный возраст ресурса.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Path">
      <summary>Получает или задает виртуальный путь для передачи с текущим cookie.</summary>
      <returns>Виртуальный путь для передачи с cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Secure">
      <summary>Получает или задает значение, указывающее, используется ли для передачи cookie протокол SSL, то есть признак обязательного использования HTTPS.</summary>
      <returns>Значение true для передачи cookie через SSL (HTTPS); в противном случае — false.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.TryParse(System.String,System.Net.Http.Headers.CookieHeaderValue@)">
      <summary>Указывает, будет ли преобразовываться строковое представление.</summary>
      <returns>Значение true, если строковое представление будет преобразовано; в противном случае — false.</returns>
      <param name="input">Входное значение.</param>
      <param name="parsedValue">Преобразуемое значение.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieState">
      <summary>Содержит имя cookie и соответствующее состояние.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Headers.CookieState" />.</summary>
      <param name="name">Имя cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Headers.CookieState" />.</summary>
      <param name="name">Имя cookie.</param>
      <param name="values">Коллекция пар "имя-значение" для cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Http.Headers.CookieState" />.</summary>
      <param name="name">Имя cookie.</param>
      <param name="value">Значение cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.Clone">
      <summary>Возвращает новый объект, содержащий копию текущего экземпляра.</summary>
      <returns>Новый объект, содержащий копию текущего экземпляра.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Item(System.String)">
      <summary>Получает или задает значение cookie с указанным именем, если данные cookie структурированы.</summary>
      <returns>Значение cookie с указанным именем.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Name">
      <summary>Получает или задает имя cookie.</summary>
      <returns>Имя cookie.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.ToString">
      <summary>Возвращает строковое представление текущего объекта.</summary>
      <returns>Строковое представление текущего объекта.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Value">
      <summary>Получает или задает значение cookie, если данные cookie — простая строка.</summary>
      <returns>Значение cookie. </returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Values">
      <summary>Получает или задает коллекцию пар "имя-значение", если данные cookie структурированы.</summary>
      <returns>Коллекция пар "имя-значение" для cookie.</returns>
    </member>
  </members>
</doc>