<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sprint.Core</name>
    </assembly>
    <members>
        <member name="T:Sprint.Extensions.CollectionExtensions">
            <summary>
            Содержит расширяющие методы для <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="M:Sprint.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Добавляет элементы <paramref name="collection"/> в <paramref name="instance"/>.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="instance">Коллекция в которую будет добавлены элементы коллекции <paramref name="collection"/>.</param>
            <param name="collection">Коллекция которая будет добавлена.</param>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="instance"></paramref> равен null.</exception>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="collection"></paramref> равен null.</exception>
        </member>
        <member name="T:Sprint.Extensions.EnumerableExtensions">
            <summary>
            Содержит расширяющие методы для <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Sprint.Extensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
             <summary>
             Выполняет указанное действие с каждым элементом последовательности.
             </summary>
             <typeparam name="T">Тип элементов последовательности.</typeparam>
             <param name="instance"></param>
             <param name="action">Делегат <see cref="T:System.Action`2"/>, выполняемый для каждого элемента последовательности <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> равен null.</exception>
        </member>
        <member name="M:Sprint.Extensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
             <summary>
             Выполняет указанное действие с каждым элементом последовательности.
             </summary>
             <typeparam name="T">Тип элементов последовательности.</typeparam>
             <param name="instance"></param>
             <param name="action">Делегат <see cref="T:System.Action`1"/>, выполняемый для каждого элемента последовательности <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> равен null.</exception>
        </member>
        <member name="M:Sprint.Extensions.EnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Преобразовавает текущую последовательность <paramref name="sequence"/> в коллекцию, доступную только для чтения.
            </summary>
            <typeparam name="T">Тип элементов в последовательности.</typeparam>
            <param name="sequence">Последовательность.</param>        
            <returns>Возвращает коолекцию, доступную только для чтения.</returns>
        </member>
        <member name="M:Sprint.Extensions.EnumerableExtensions.SelectRecursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
             <summary>
             Рекурсивно выбирает все элементы последовательности. 
             http://work.j832.com/2008/01/selectrecursive-if-3rd-times-charm-4th.html
             </summary>
             <param name="sequence">Последовательность.</param>
             <param name="recursiveSelector">Селектор.</param>        
             <typeparam name="T">Тип элементов последовательности.</typeparam>
             <returns>Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="recursiveSelector"/> равен null.</exception>
        </member>
        <member name="M:Sprint.Extensions.EnumerableExtensions.ToSelectList``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Проецирует универсальный объект <see cref="T:System.Collections.Generic.IEnumerable`1"/> в последовательность <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             </summary>
             <param name="sequence">        
             Последовательность типа <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
             </param>
             <param name="name">Функция проекции.</param>
             <param name="value">Функция проекции.</param>
             <param name="selected">Функция проекции.</param>
             <typeparam name="T">Тип элемента проецируемой последовательности.</typeparam>
             <returns>
             Объект <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
             </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selected"/> равен null.</exception>
        </member>
        <member name="M:Sprint.Extensions.EnumerableExtensions.ToSelectList``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
             <summary>
             Проецирует универсальный объект <see cref="T:System.Collections.Generic.IEnumerable`1"/> в последовательность <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             </summary>
             <param name="sequence">        
             Последовательность типа <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
             </param>
             <param name="name">Функция проекции.</param>
             <param name="value">Функция проекции.</param>        
             <typeparam name="T">Тип элемента проецируемой последовательности.</typeparam>
             <returns>
             Последовательность типа <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
             </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> равен null.</exception>        
        </member>
        <member name="T:Sprint.Extensions.EventArgsExtensions">
            <summary>
            Содержит расширяющие методы для  <see cref="T:System.EventArgs"/>
            </summary>
        </member>
        <member name="M:Sprint.Extensions.EventArgsExtensions.Raise``1(``0,System.Object,System.EventHandler{``0}@)">
            <summary>
            Безопасне в отношении потоков оповещение о возникновении события. 
            (Джеффри Рихтер "CLR via C#")        
            </summary>
            <param name="e">Объект типа TEventArgs, содержащий данные события. </param>
            <param name="sender">Источник события.</param>
            <param name="eventDelegate">Метод обработки события.</param>
            <typeparam name="TEventArgs">Тип данных, создаваемых событием.</typeparam>
        </member>
        <member name="T:Sprint.Extensions.QueryableExtensions">
            <summary>
            Содержит расширяющие методы для <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:Sprint.Extensions.QueryableExtensions.ToSelectList``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Проецирует универсальный объект <see cref="T:System.Linq.IQueryable`1"/> в последовательность <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             </summary>
             <param name="query">        
             Объект <see cref="T:System.Linq.IQueryable`1"/>, представляющий входную последовательность.
             </param>
             <param name="name">Функция проекции.</param>
             <param name="value">Функция проекции.</param>
             <param name="selected">Функция проекции.</param>
             <typeparam name="T">Тип элемента проецируемой последовательности.</typeparam>
             <returns>
             Объект <see cref="T:System.Linq.IQueryable`1"/>, элементы которого получены в результате вызова функций проекций для объекта <paramref name="query"/>.        
             </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="query"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> равен null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selected"/> равен null.</exception>
        </member>
        <member name="M:Sprint.Extensions.QueryableExtensions.ToSelectList``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Проецирует универсальный объект <see cref="T:System.Linq.IQueryable`1"/> в последовательность <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="query">        
            Объект <see cref="T:System.Linq.IQueryable`1"/>, представляющий входную последовательность.
            </param>
            <param name="name">Функция проекции.</param>
            <param name="value">Функция проекции.</param>        
            <typeparam name="T">Тип элемента проецируемой последовательности.</typeparam>
            <returns>
            Объект <see cref="T:System.Linq.IQueryable`1"/>, элементы которого получены в результате вызова функций проекций для объекта <paramref name="query"/>.        
            </returns>
        </member>
        <member name="T:Sprint.Extensions.SpecificationExtensions">
            <summary>
             Содержит расширяющие методы для <see cref="T:Sprint.Specifications.ISpecification`1"/>.
            </summary>
        </member>
        <member name="M:Sprint.Extensions.SpecificationExtensions.And``1(Sprint.Specifications.ISpecification{``0},Sprint.Specifications.ISpecification{``0})">
            <summary>                
            Возвращает новую спецификацию объединяя <paramref name="rightHand"/> и <paramref name="leftHand"/> используя условие AND.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rightHand">Правая спецификация.</param>
            <param name="leftHand">Левая спецификация.</param>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="rightHand"></paramref> равен null.</exception>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="leftHand"></paramref> равен null.</exception>
            <returns>Спецификация.</returns>
        </member>
        <member name="M:Sprint.Extensions.SpecificationExtensions.Or``1(Sprint.Specifications.ISpecification{``0},Sprint.Specifications.ISpecification{``0})">
            <summary>                
            Возвращает новую спецификацию объединяя <paramref name="rightHand"/> и <paramref name="leftHand"/> используя условие OR.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rightHand">Правая спецификация.</param>
            <param name="leftHand">Левая спецификация.</param>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="rightHand"></paramref> равен null.</exception>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="leftHand"></paramref> равен null.</exception>
        </member>
        <member name="T:Sprint.Extensions.StringExtensions">
            <summary>
            Содержит расширяющие методы для <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>       
            Заменяет каждый элемент формата в указанной строке текстовым эквивалентом значения соответствующего объекта.
            </summary>
            <param name="instance">Строка составного формата</param>
            <param name="args">Массив System.Object строковых представлений</param>
            <returns>Копия instance, в которой все элементы формата заменены строковыми представлениями.</returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.HasValue(System.String)">
            <summary>
            Указывает, имеет ли указанная строка значение не равное null или Empty.
            </summary>
            <param name="value">Строка для проверки</param>
            <returns>
            <c>true</c> Строка имеет значение
            <c>false</c> Строка не имеет заничения
            </returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.IsCaseSensitiveEqual(System.String,System.String)">
            <summary>       
            Определяет является ли этот экземпляр и заданная строка одинаковыми.
            Сравнение происходит с учетом регистра.
            </summary>
            <param name="instance">Строка для проверки равенства.</param>
            <param name="comparing">Строка для сравения.</param>
            <returns>        
            <c>true</c> если строки одинаковые, в противном случае <c>false</c>.
            </returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.IsCaseInsensitiveEqual(System.String,System.String)">
            <summary>
            Определяет является ли этот экземпляр и заданная строка одинаковыми.
            Сравнение происходит без учета регистра.
            </summary>
            <param name="instance">Строка для проверки равенства.</param>
            <param name="comparing">Строка для сравения.</param>
            <returns>        
            <c>true</c> если строки одинаковые, в противном случае <c>false</c>.
            </returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.Compress(System.String)">
            <summary>
            Сжатие указанного экземпляра.
            GZipStream сжатие.
            </summary>
            <param name="instance">Экземпляр.</param>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="instance"></paramref> равен null.</exception>
            <returns>Сжатая строка</returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.Decompress(System.String)">
            <summary>
            Распаковка указанного экземпляра. 
            GZipStream распаковка.
            </summary>
            <param name="instance">Экземпляр.</param>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="instance"/> равен null.</exception>
            <returns>Распакованная строка</returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.Decode(System.String)">
             <summary>
             Преобразует заданную строку, представляющую двоичные данные в виде цифр в кодировке Base64, в эквивалентный массив 8-разрядных целых чисел без знака.
             </summary>
             <param name="value">Преобразуемая строка.</param>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="value"/> равен null.</exception>
             <exception cref="T:System.FormatException">
             Длина массива <paramref name="value"/>, исключая пробелы, не равна нулю и не кратна 4.
             Формат параметра <paramref name="value"/> неверен. 
             <paramref name="value"/> содержит знак не из base 64, более чем два символа заполнения, или другой символ (не пробел) среди символов заполнения.
             </exception>
             <returns>Массив 8-разрядных целых чисел без знака, эквивалентный <paramref name="value"/></returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.ToUpperCamelCase(System.String)">
             <summary>
             PascalCase - стиль написания составных слов, при котором несколько слов пишутся слитно без пробелов, при этом каждое слово пишется с заглавной буквы.
             </summary>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="instance"/> равен null.</exception>
             <param name="instance">Преобразуемая строка.</param>
             <returns>Преобразованная строка</returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.ToLowerCamelCase(System.String)">
             <summary>
             CamelCase - стиль написания составных слов, при котором несколько слов пишутся слитно без пробелов, при этом каждое словопр, кромер первого, слово пишется с заглавной буквы.
             </summary>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="instance"/> равен null.</exception>
             <param name="instance">Преобразуемая строка.</param>
             <returns>Преобразованная строка</returns>
        </member>
        <member name="M:Sprint.Extensions.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            Преобразует строковое представление имени или числового значения одной или нескольких перечислимых констант в эквивалентный перечислимый объект.
            Регистр игнорируется.
            </summary>
            <param name="value">Строка, содержащая имя или значение для преобразования. </param>
            <param name="defaultValue">Значение по умолчанию</param>
            <typeparam name="T"></typeparam>
            <returns>Объект типа <typeparamref name="T"/>, значение которого представлено параметром <paramref name="value"/>. </returns>
        </member>
        <member name="T:Sprint.Extensions.TagBuilderExtensions">
            <summary>
            Содержит расширяющие методы для <see cref="T:System.Web.Mvc.TagBuilder"/>
            </summary>
        </member>
        <member name="M:Sprint.Extensions.TagBuilderExtensions.ToMvcHtmlString(System.Web.Mvc.TagBuilder,System.Web.Mvc.TagRenderMode)">
            <summary>
            Создает строку в кодировке HTML, используя указанное текстовое значение <paramref name="tagBuilder"/>.
            </summary>
            <param name="tagBuilder">экземпляр TagBuilder</param>
            <param name="renderMode">Режим визуализации тега.</param>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="tagBuilder"></paramref> равен null.</exception>
            <returns>строка в кодировке HTML</returns>
        </member>
        <member name="T:Sprint.Extensions.TypeExtensions">
            <summary>
            Содержит расширяющие методы для <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Sprint.Extensions.TypeExtensions.TypeAllowsNullValue(System.Type)">
            <summary>
            Проверяет допускает ли данный тип значение null.
            </summary>
            <param name="type">Тип.</param>
            <returns>Если тип допускает null true, в противном случае false</returns>
        </member>
        <member name="M:Sprint.Extensions.TypeExtensions.GetDefaultValue(System.Type)">
            <summary>
            Возвращает значение по умолчанию для типа <paramref name="type"/>
            </summary>
            <param name="type">Тип.</param>
            <returns>Значение по умолчанию для <paramref name="type"/></returns>
        </member>
        <member name="M:Sprint.Extensions.TypeExtensions.IsNullableValueType(System.Type)">
            <summary>
            Проверят является ли <paramref name="type"/> Nullable типом.
            </summary>
            <param name="type">Тип.</param>
            <returns>
            <c>true</c> Nullable тип.
            <c>false</c> Не Nullable тип. 
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type"></paramref> равен null.</exception>
            </returns>
        </member>
        <member name="T:Sprint.Helpers.ConvertHelper">
            <summary>
            Вспомогательные методы.
            </summary>
        </member>
        <member name="M:Sprint.Helpers.ConvertHelper.ConvertTo(System.Object,System.Type)">
            <summary>
            Преобразует значение, которое инкапсулируется этим результатом, в указанный тип.
            </summary>
            <param name="value">Объект, реализующий интерфейс <see cref="T:System.IConvertible"/>.</param>
            <param name="conversionType">Тип целевого объекта.</param>        
            <returns>
            Преобразованное значение.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="conversionType"/> равен null. </exception>
            <exception cref="T:System.InvalidCastException">
            Данное преобразование не поддерживается.
            -или-
            Параметр <paramref name="value"/> не реализует интерфейс IConvertible.
            </exception>
        </member>
        <member name="M:Sprint.Helpers.ConvertHelper.ToNullable``1(System.Object)">
            <summary>
            Приводит упаковонное значение к Nullable типу
            </summary>
            <param name="target">Объект, реализующий интерфейс <see cref="T:System.IConvertible"/>.</param>
            <typeparam name="T"></typeparam>        
        </member>
        <member name="M:Sprint.Helpers.ConvertHelper.ConvertTo(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Преобразует значение, которое инкапсулируется этим результатом, в указанный тип, используя заданные сведения о языке и региональных параметрах.        
            </summary>
            <param name="value">Объект, реализующий интерфейс <see cref="T:System.IConvertible"/>.</param>
            <param name="conversionType">Тип целевого объекта.</param>
            <param name="culture">Язык и региональные параметры, используемые при преобразовании.</param>
            <returns>
            Преобразованное значение.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="conversionType"/> равен null. </exception>
            <exception cref="T:System.InvalidCastException">
            Данное преобразование не поддерживается.
            -или-
            Параметр <paramref name="value"/> не реализует интерфейс IConvertible.
            </exception>
        </member>
        <member name="M:Sprint.Helpers.ConvertHelper.TryConvertTo(System.Object,System.Object@,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Преобразует значение, которое инкапсулируется этим результатом, в указанный тип, используя заданные сведения о языке и региональных параметрах.        
            Возвращает значение, указывающее, успешно ли выполнено преобразование.
            </summary>
            <param name="value">Объект, реализующий интерфейс <see cref="T:System.IConvertible"/>.</param>
            <param name="outResult">Преобразованное значение.</param>
            <param name="conversionType">Тип целевого объекта.</param>
            <param name="culture">Язык и региональные параметры, используемые при преобразовании.</param>
            <returns>Значение true, если параметр <paramref name="value"/> успешно преобразован; в противном случае — значение false.</returns>
        </member>
        <member name="M:Sprint.Helpers.ConvertHelper.TryConvertTo(System.Object,System.Object@,System.Type)">
            <summary>
            Преобразует значение, которое инкапсулируется этим результатом, в указанный тип.
            Возвращает значение, указывающее, успешно ли выполнено преобразование.
            </summary>
            <param name="value">Объект, реализующий интерфейс <see cref="T:System.IConvertible"/>.</param>
            <param name="outResult">Преобразованное значение.</param>
            <param name="conversionType">Тип целевого объекта.</param>        
            <returns>Значение true, если параметр <paramref name="value"/> успешно преобразован; в противном случае — значение false.</returns>
        </member>
        <member name="M:Sprint.Helpers.ConvertHelper.ConvertEnumerable(System.Collections.IEnumerable,System.Type)">
            <summary>
            Преобразует элементы текущей последовательности <paramref name="sequence"/> в другой тип и возвращает последовательность преобразованных элементов.        
            </summary>
            <param name="sequence">Исходная последовательность.</param>
            <param name="elementType">Тип элементов новой последовательности.</param>        
            <returns>
            Последовательность <see cref="T:System.Collections.IEnumerable"/> с элементами конечного типа, преобразованными из текущей последовательность <paramref name="sequence"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> равен null. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> равен null. </exception>
        </member>
        <member name="M:Sprint.Helpers.ConvertHelper.ConvertEnumerable(System.Collections.IEnumerable,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Преобразует элементы текущей последовательности <paramref name="sequence"/> в другой тип и возвращает последовательность преобразованных элементов.        
            </summary>
            <param name="sequence">Исходная последовательность.</param>
            <param name="elementType">Тип элементов новой последовательности.</param>
            <param name="culture">Языковой стандарт.</param>
            <returns>
            Последовательность <see cref="T:System.Collections.IEnumerable"/> с элементами конечного типа, преобразованными из текущей последовательность <paramref name="sequence"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> равен null. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> равен null. </exception>
        </member>
        <member name="T:Sprint.Helpers.ExpressionHelper">
            <summary>
            Вспомогательные методы для работы с деревьями выражений.
            </summary>
        </member>
        <member name="M:Sprint.Helpers.ExpressionHelper.GetVisitedProperties(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Возвращает список названий свойств или полей типа <paramref name="type"/>, для которых будет совершена операция чтения, например obj.SampleProperty.
            </summary>
            <param name="expression">Дерево выражений.</param>
            <param name="type">Тип.</param>        
            <returns>Список свойств или полей.</returns>
        </member>
        <member name="M:Sprint.Helpers.ExpressionHelper.IsIntersection``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,``1)">
            <summary>
            Строит строго типизированное лямбда-выражения для вычисления пересечений интервалов.
            </summary>
            <typeparam name="TSource">Тип источника.</typeparam>
            <typeparam name="TProperty">Тип поля.</typeparam>
            <param name="firstIntervalBegin">Крайняя левая граница первого интервала.</param>
            <param name="firstIntervalEnd">Крайняя правая граница первого интервала.</param>
            <param name="secondIntervalBegin">Крайняя левая граница второго интервала.</param>
            <param name="secondIntervalEnd">Крайняя правая граница второго интервала.</param>
            <returns>Строго типизированное лямбда-выражение.</returns>
        </member>
        <member name="M:Sprint.Helpers.ExpressionHelper.IsIntersectionWithBegin``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Строит строго типизированное лямбда-выражения для вычисления пересечений интервалов.
            </summary>
            <typeparam name="TSource">Тип источника.</typeparam>
            <typeparam name="TProperty">Тип поля.</typeparam>        
            <param name="firstIntervalEnd">Крайняя правая граница первого интервала.</param>
            <param name="secondIntervalBegin">Крайняя левая граница второго интервала.</param>        
            <returns>Строго типизированное лямбда-выражение.</returns>
        </member>
        <member name="M:Sprint.Helpers.ExpressionHelper.IsIntersectionWithEnd``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Строит строго типизированное лямбда-выражения для вычисления пересечений интервалов.
            </summary>
            <typeparam name="TSource">Тип источника.</typeparam>
            <typeparam name="TProperty">Тип поля.</typeparam>
            <param name="firstIntervalBegin">Крайняя левая граница первого интервала.</param>
            <param name="firstIntervalEnd">Крайняя правая граница первого интервала.</param>        
            <param name="secondIntervalEnd">Крайняя правая граница второго интервала.</param>
            <returns>Строго типизированное лямбда-выражение.</returns>
        </member>
        <member name="T:Sprint.Helpers.ReflectionHelper">
            <summary>
            Набор вспомогательных методов для работы с рефлексией.
            </summary>
        </member>
        <member name="M:Sprint.Helpers.ReflectionHelper.GetMethodInvokeHandler(System.Reflection.MethodInfo)">
             <summary>
             Создается динамический метод(используется Reflection.Emit) типа <see cref="T:Sprint.Helpers.ReflectionHelper.MethodInvokeHandler"/> выполняющий описанный метод <paramref name="methodInfo"/>        
             </summary>
             <param name="methodInfo">Объект, представляющий открытый метод.</param>
             <returns>Делегат типа <see cref="T:Sprint.Helpers.ReflectionHelper.MethodInvokeHandler"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodInfo"/> равен null.</exception>        
        </member>
        <member name="T:Sprint.Helpers.ReflectionHelper.MethodInvokeHandler">
            <summary>
            Вызывает метод, представленный текущим экземпляром, с использованием заданных параметров.
            </summary>
            <param name="target">
            Объект, для которого вызывается метод. 
            Если метод является статическим, данный аргумент не обрабатывается. 
            </param>
            <param name="parameters">
            Список аргументов для вызываемого метода. 
            Этот список представляет собой массив объектов с таким же количеством, 
            последовательностью и типом элементов, что и у параметров вызываемого метода. 
            В отсутствие параметров значение parameters должно быть равно null. 
            Если метод, представленный этим экземпляром, принимает параметр ref (ByRef в Visual Basic), 
            для вызова метода с использованием этой функции не требуются никакие специальные атрибуты. 
            Любой объект этого массива, который не был явно инициализирован с помощью значения, 
            будет содержать значение по умолчанию для данного типа объекта. 
            Для элементов ссылочного типа это значение равно null. 
            Для элементов, тип которых соответствует значению, это значение равно 0, 0,0 или false, в зависимости от заданного типа элемента. 
            </param>
        </member>
        <member name="T:Sprint.Infrastructure.Guard">
            <summary>
            Набор методов, упрощающих работу с исключениями
            </summary>
        </member>
        <member name="M:Sprint.Infrastructure.Guard.HttpExceptionWithAssertion(System.Boolean,System.Int32,System.String)">
            <summary>
            Генерация HttpException исключения
            </summary>
            <param name="assertion">Утверждение</param>
            <param name="httpCode">http код ошибки</param>
            <param name="message">Сообщение</param>
            <exception cref="T:System.Web.HttpException">HttpException</exception>
        </member>
        <member name="M:Sprint.Infrastructure.Guard.Against``1(System.Boolean,System.String)">
            <summary>
            Если <paramref name="assertion"/> истино, то создает исключение типа <typeparamref name="TException"/>
            </summary>
            <typeparam name="TException">Тип исключения.</typeparam>
            <param name="assertion">Утверждение.</param>
            <param name="message">Сообщение.</param>
        </member>
        <member name="M:Sprint.Infrastructure.Guard.Against``1(System.Func{System.Boolean},System.String)">
            <summary>
            Если <paramref name="assertion"/> истино, то создает исключение типа <typeparamref name="TException"/>
            </summary>
            <typeparam name="TException">Тип исключения.</typeparam>
            <param name="assertion">Утверждение.</param>
            <param name="message">Сообщение.</param>
        </member>
        <member name="T:Sprint.Resources.TextResource">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:Sprint.Resources.TextResource.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:Sprint.Resources.TextResource.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:Sprint.Resources.TextResource.ArrayCannotBeEmpty">
            <summary>
              Ищет локализованную строку, похожую на &quot;{0}&quot; array cannot be empty..
            </summary>
        </member>
        <member name="P:Sprint.Resources.TextResource.CannotBeNegative">
            <summary>
              Ищет локализованную строку, похожую на &quot;{0}&quot; cannot be negative..
            </summary>
        </member>
        <member name="P:Sprint.Resources.TextResource.CannotBeNull">
            <summary>
              Ищет локализованную строку, похожую на &quot;{0}&quot; cannot be null..
            </summary>
        </member>
        <member name="P:Sprint.Resources.TextResource.CannotBeNullOrEmpty">
            <summary>
              Ищет локализованную строку, похожую на &quot;{0}&quot; cannot be null or empty..
            </summary>
        </member>
        <member name="P:Sprint.Resources.TextResource.CollectionCannotBeEmpty">
            <summary>
              Ищет локализованную строку, похожую на &quot;{0}&quot; collection cannot be empty..
            </summary>
        </member>
        <member name="P:Sprint.Resources.TextResource.FilterTargetPropertyIsNull">
            <summary>
              Ищет локализованную строку, похожую на Не задано целевое свойство, по которому будет осуществляться фильтрция..
            </summary>
        </member>
        <member name="T:Sprint.Specifications.ISpecification`1">
            <summary>
            The <see cref="T:Sprint.Specifications.ISpecification`1"/> interface defines a basic contract to express specifications declaratively.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sprint.Specifications.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Evaluates the specification against an entity of <typeparamref name="T"/>.
            </summary>
            <param name="entity">The <typeparamref name="T"/> instance to evaluate the specificaton
            against.</param>
            <returns>Should return true if the specification was satisfied by the entity, else false. </returns>
        </member>
        <member name="P:Sprint.Specifications.ISpecification`1.Predicate">
            <summary>
            Gets the expression that encapsulates the criteria of the specification.
            </summary>
        </member>
        <member name="T:Sprint.Specifications.Specification`1">
            <summary>
            Provides a default implementation of the <see cref="T:Sprint.Specifications.ISpecification`1"/> interface.
            </summary>
            <remarks>
            The <see cref="T:Sprint.Specifications.Specification`1"/> implements Composite Specification pattern by overloading
            the &amp; and | (And, Or in VB.Net) operators to allow composing multiple specifications together.
            </remarks>
        </member>
        <member name="M:Sprint.Specifications.Specification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:Sprint.Specifications.Specification`1"/> instnace with the
            provided predicate expression.
            </summary>
            <param name="predicate">A predicate that can be used to check entities that
            satisfy the specification.</param>
        </member>
        <member name="M:Sprint.Specifications.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Evaluates the specification against an entity of <typeparamref name="T"/>.
            </summary>
            <param name="entity">The <typeparamref name="T"/> instance to evaluate the specificaton
            against.</param>
            <returns>Should return true if the specification was satisfied by the entity, else false. </returns>
        </member>
        <member name="M:Sprint.Specifications.Specification`1.op_BitwiseAnd(Sprint.Specifications.Specification{`0},Sprint.Specifications.Specification{`0})">
            <summary>
            Overloads the &amp; operator and combines two <see cref="T:Sprint.Specifications.Specification`1"/> in a Boolean And expression
            and returns a new see cref="Specification{TEntity}"/&gt;.
            </summary>
            <param name="leftHand">The left hand <see cref="T:Sprint.Specifications.Specification`1"/> to combine.</param>
            <param name="rightHand">The right hand <see cref="T:Sprint.Specifications.Specification`1"/> to combine.</param>
            <returns>The combined <see cref="T:Sprint.Specifications.Specification`1"/> instance.</returns>
        </member>
        <member name="M:Sprint.Specifications.Specification`1.op_BitwiseOr(Sprint.Specifications.Specification{`0},Sprint.Specifications.Specification{`0})">
            <summary>
            Overloads the &amp; operator and combines two <see cref="T:Sprint.Specifications.Specification`1"/> in a Boolean Or expression
            and returns a new see cref="Specification{TEntity}"/&gt;.
            </summary>
            <param name="leftHand">The left hand <see cref="T:Sprint.Specifications.Specification`1"/> to combine.</param>
            <param name="rightHand">The right hand <see cref="T:Sprint.Specifications.Specification`1"/> to combine.</param>
            <returns>The combined <see cref="T:Sprint.Specifications.Specification`1"/> instance.</returns>
        </member>
        <member name="P:Sprint.Specifications.Specification`1.Predicate">
            <summary>
            Gets the expression that encapsulates the criteria of the specification.
            </summary>
        </member>
    </members>
</doc>
