<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>Реализация интерфейса <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, которая повторно создает и (необязательно) заполняет начальными значениями базу данных, если она не существует. Чтобы заполнить базу данных начальными значениями, создайте производный класс и переопределите метод Seed. </summary>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>Выполняет стратегию инициализации базы данных для заданного контекста. </summary>
      <param name="context">Контекст.</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>При переопределении добавляет в контекст данные для заполнения начальными значениями.  Реализация по умолчанию не выполняет никаких действий. </summary>
      <param name="context">Контекст для заполнения начальными значениями.</param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>Экземпляры этого класса получаются из объекта <see cref="T:System.Data.Entity.DbContext" /> и могут быть использованы для управления фактической базой данных, поддерживающей объект <see cref="T:System.Data.Entity.DbContext" /> или соединение. В частности, поддерживается создание, удаление и проверка наличия базы данных. Удаление и проверка наличия базы данных могут осуществляться при помощи только соединения (без полного контекста) с использованием статических методов данного класса. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>Этот метод возвращает значение true, если контекст имеет хэш моделей, база данных содержит хэш моделей и эти хэши совпадают.  Это означает, что модель, использованная для создания базы данных, совпадает с текущей моделью, то есть они могут использоваться совместно. </summary>
      <returns>Значение true, если хэш модели в контексте и базе данных совпадают. В противном случае — значение false. </returns>
      <param name="throwIfNoMetadata">Если задано значение true, то в случае, если в модели, связанной с контекстом, или в самой базе данных отсутствуют метаданные модели, возникнет исключение.  Если задано значение false, метод возвращает значение true в случае, если метаданные не обнаружены.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>Возвращает соединение, используемое данным контекстом.  При этом контекст может быть инициализирован, а соединение создано, если оно еще не существует. </summary>
      <returns>Соединение, используемое данным контекстом.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>Создает новую базу данных на сервере базы данных для модели, определенной в поддерживающем контексте. Учтите, что вызов этого метода до выполнения стратегии инициализации базы данных не позволит в дальнейшем выполнить эту стратегию. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>Создает новую базу данных на сервере базы данных для модели, определенной в поддерживающем контексте, но только если на сервере пока не имеется базы данных с тем же именем. </summary>
      <returns>Значение true, если база данных не существовала и была создана. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>Фабрика соединений, используемая при создании объекта <see cref="T:System.Data.Common.DbConnection" /> из имени базы данных или строки подключения. </summary>
      <returns>Используемая фабрика соединений.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>Удаляет базу данных с сервера базы данных, если она существует. В противном случае не делает ничего. </summary>
      <returns>Значение true, если база данных существовала и была удалена. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>Удаляет базу данных с сервера базы данных, если она существует. В противном случае не делает ничего. </summary>
      <returns>Значение true, если база данных существовала и была удалена. В противном случае — значение false.</returns>
      <param name="existingConnection">Существующее соединение с базой данных.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>Удаляет базу данных с сервера базы данных, если она существует. В противном случае не делает ничего. Соединение с базой данных создается при помощи имени базы данных или строки подключения способом, описанным в документации по классу <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Значение true, если база данных существовала и была удалена. В противном случае — значение false.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения к базе данных.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равна ли заданная база данных текущей базе данных.</summary>
      <returns>Значение true, если указанная база данных равна текущей базе данных. В противном случае — значение false.</returns>
      <param name="obj">База данных для сравнения с текущим объектом. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>Выполняет указанную команду DDL/DML применительно к базе данных. </summary>
      <returns>Результат, возвращаемый базой данных после выполнения команды.</returns>
      <param name="sql">Строка команды.</param>
      <param name="parameters">Параметры, подставляемые в строку команды.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>Проверяет, существует ли на сервере база данных. </summary>
      <returns>Значение true, если база данных существует. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>Проверяет, существует ли на сервере база данных. </summary>
      <returns>Значение true, если база данных существует. В противном случае — значение false.</returns>
      <param name="existingConnection">Существующее соединение с базой данных.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>Проверяет, существует ли на сервере база данных. Соединение с базой данных создается при помощи имени базы данных или строки подключения способом, описанным в документации по классу <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Значение true, если база данных существует. В противном случае — значение false.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения к базе данных.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>Возвращает хэш-функцию для указанной базы данных.</summary>
      <returns>Хэш-функция для указанной базы данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>Возвращает тип текущей базы данных.</summary>
      <returns>Тип текущей базы данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>Запускает интерфейс <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, зарегистрированный в данном контексте.  Если параметр <paramref name="force" /> имеет значение true, инициализатор запускается независимо от того, запускался ли он уже прежде.  Это может оказаться полезным, если база данных была удалена во время выполнения приложения и должна быть повторно инициализирована. </summary>
      <param name="force">Если этот параметр имеет значение true, инициализатор выполняется, даже если уже был выполнен.</param>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Возвращает или задает стратегию инициализации базы данных. Стратегия инициализации базы данных вызывается, когда экземпляр <see cref="T:System.Data.Entity.DbContext" /> инициализируется из объекта <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />.  </summary>
      <param name="strategy">Стратегия.</param>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>Создает необработанный SQL-запрос, возвращающий элементы заданного универсального типа. Типом может быть любой тип, содержащий свойства, совпадающие с именами столбцов, возвращаемых запросом, либо простой тип-примитив. </summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, выполняющий запрос при перечислении.</returns>
      <param name="sql">Строка SQL-запроса.</param>
      <param name="parameters">Параметры, подставляемые в строку SQL-запроса.</param>
      <typeparam name="TElement">Тип объекта, возвращаемого запросом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>Создает необработанный SQL-запрос, возвращающий элементы заданного типа. Типом может быть любой тип, содержащий свойства, совпадающие с именами столбцов, возвращаемых запросом, либо простой тип-примитив. </summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerable" />, выполняющий запрос при перечислении.</returns>
      <param name="elementType">Тип объекта, возвращаемого запросом.</param>
      <param name="sql">Строка SQL-запроса.</param>
      <param name="parameters">Параметры, подставляемые в строку SQL-запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>Возвращает строковое представление базы данных.</summary>
      <returns>Строковое представление базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>Дает возможность выполнять запросы и работать с данными сущностей как с объектами.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>Создает новый экземпляр контекста с использованием соглашений для создания имени базы данных, с которой будет установлено соединение.  По соглашению имя представляет собой полное имя (пространство имен + имя класса) производного класса контекста. Дополнительные сведения о том, как это используется при создании соединения, см. в разделе «Примечания» в описании объекта <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>Создает новый экземпляр контекста с использованием существующего соединения с базой данных. Соединение не будет освобождено при освобождении контекста. </summary>
      <param name="existingConnection">Существующее соединение, которое будет использоваться новым контекстом.</param>
      <param name="contextOwnsConnection">Если задано значение true, соединение освобождается при освобождении контекста. В противном случае за освобождение соединения отвечает вызывающая сторона.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>Создает новый экземпляр контекста с использованием существующего соединения с базой данных и инициализирует его из заданной модели. Соединение не будет освобождено при освобождении контекста. </summary>
      <param name="existingConnection">Существующее соединение, которое будет использоваться новым контекстом.</param>
      <param name="model">Модель, которая будет поддерживать данный контекст.</param>
      <param name="contextOwnsConnection">Если задано значение true, соединение освобождается при освобождении контекста. В противном случае за освобождение соединения отвечает вызывающая сторона.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Создает новый экземпляр контекста с использованием соглашений для создания имени базы данных, с которой будет установлено соединение, и инициализирует его из заданной модели. По соглашению имя представляет собой полное имя (пространство имен + имя класса) производного класса контекста. Дополнительные сведения о том, как это используется при создании соединения, см. в разделе «Примечания» в описании объекта <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="model">Модель, которая будет поддерживать данный контекст.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
      <summary>Создает новый экземпляр контекста на основе существующего объекта <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />.  </summary>
      <param name="objectContext">Существующий объект <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />, который будет заключен в новый контекст.</param>
      <param name="dbContextOwnsObjectContext">Если задано значение true, объект <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> освобождается при освобождении объекта <see cref="T:System.Data.Entity.DbContext" />. В противном случае соединение должно быть освобождено вызывающей стороной.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>Создает новый экземпляр контекста с использованием соглашений для создания имени или строки подключения базы данных, с которой будет установлено соединение. Дополнительные сведения о том, как это используется при создании соединения, см. в разделе «Примечания» в описании объекта <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Создает новый экземпляр контекста с использованием указанной строки в качестве имени или строки подключения с базой данных, с которой будет установлено соединение, и инициализирует его из заданной модели. Дополнительные сведения о том, как это используется при создании соединения, см. в разделе «Примечания» в описании объекта <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
      <param name="model">Модель, которая будет поддерживать данный контекст.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>Предоставляет доступ к функциям контекста, осуществляющим отслеживание изменений в сущностях. </summary>
      <returns>Объект, используемый для обращения к функциям, осуществляющим отслеживание изменений.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>Предоставляет доступ к параметрам конфигурации контекста. </summary>
      <returns>Объект, используемый для доступа к параметрам конфигурации.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>Создает экземпляр базы данных для этого контекста и позволяет выполнять создание, удаление или проверку существования в основной базе данных. </summary>
      <returns>Созданная база данных.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>Вызывает защищенный метод Dispose. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>Освобождает контекст. Базовый объект <see cref="T:System.Data.Objects.ObjectContext" /> также освобождается, если был создан данным контекстом либо если при создании данного контекста этот объект был передан ему во владение. Соединение с базой данных (объект <see cref="T:System.Data.Common.DbConnection" />) также освобождается, если оно было создано данным контекстом либо если при создании данного контекста это соединение было передано ему во владение. </summary>
      <param name="disposing">Значение true, чтобы освободить управляемые и неуправляемые ресурсы; значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>Возвращает для заданной сущности объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, предоставляющий доступ к сведениям о сущности и о возможности выполнения действий над ней. </summary>
      <returns>Запись для сущности.</returns>
      <param name="entity">Сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>Возвращает для заданной сущности объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, предоставляющий доступ к сведениям о сущности и о возможности выполнения действий над ней. </summary>
      <returns>Запись для сущности.</returns>
      <param name="entity">Сущность.</param>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли заданный контекст текущему контексту.</summary>
      <returns>Значение true, если указанный контекст равен текущему контексту. В противном случае — значение False.</returns>
      <param name="obj">Контекст для сравнения с текущим контекстом. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного контекста.</summary>
      <returns>Хэш-функция для указанного контекста.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>Возвращает тип текущего контекста.</summary>
      <returns>Тип текущего контекста.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>Проверяет отслеживаемые сущности и возвращает коллекцию <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />, содержащую результаты проверки. </summary>
      <returns>Коллекция результатов проверки для недопустимых сущностей. Эта коллекция никогда не равна значению NULL и не должна содержать значения null или результаты для допустимых сущностей. </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Этот метод вызывается, если модель для производного контекста была инициализирована, прежде чем модель была заблокирована и использована для инициализации контекста.  Реализация этого метода по умолчанию не делает ничего, но его можно переопределить в производном классе и выполнить в нем дальнейшую настройку модели перед ее блокировкой. </summary>
      <param name="modelBuilder">Построитель, который определяет модель для создаваемого контекста.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>Сохраняет все изменения основной базы данных, произведенные в контексте. </summary>
      <returns>Количество объектов, записанных в основную базу данных.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>Возвращает <see cref="T:System.Data.Entity.DbSet" /> для указанного типа, что позволяет выполнять операции CRUD с данной сущностью в контексте. </summary>
      <returns>Экземпляр <see cref="T:System.Data.Entity.DbSet" /> для заданного типа сущности.</returns>
      <typeparam name="TEntity">Тип сущности, для которой возвращается набор.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>Возвращает <see cref="T:System.Data.Entity.DbSet" /> для указанного типа, что позволяет выполнять операции CRUD с данной сущностью в контексте. </summary>
      <returns>Объект <see cref="T:System.Data.Entity.DbSet" /> для заданного типа сущности.</returns>
      <param name="entityType">Тип сущности, для которой возвращается набор.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Расширение, позволяющее пользователю переопределить поведение по умолчанию, предполагающее проверку только добавленных и измененных сущностей. </summary>
      <returns>Значение true, если проверку следует продолжить. В противном случае — значение false.</returns>
      <param name="entityEntry">Экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, который должен быть проверен.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Возвращает объект Entity Framework <see cref="T:System.Data.Objects.ObjectContext" />, который является базовым для данного контекста.</summary>
      <returns>Возвращает <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>Возвращает строковое представление контекста.</summary>
      <returns>Строковое представление контекста.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Расширение, позволяющее пользователю настраивать проверку сущности или отфильтровать результаты проверки. Вызывается методом <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />. </summary>
      <returns>Результат проверки сущности. Может содержать значение NULL при переопределении.</returns>
      <param name="entityEntry">Экземпляр DbEntityEntry, который должен быть проверен.</param>
      <param name="items">Определяемый пользователем словарь, который содержит дополнительные сведения для пользовательской проверки. Он будет передан в объект <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> и предоставлен через свойство <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />. Это необязательный параметр, он может содержать значение NULL.</param>
    </member>
    <member name="T:System.Data.Entity.DbExtensions">
      <summary>Содержит набор методов расширения, позволяющих выполнять типовые задачи.</summary>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>Возвращает новый запрос, возвращающий сущности, которые не будут кэшироваться в контексте <see cref="T:System.Data.Entity.DbContext" /> или <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
      <returns>Новый запрос с атрибутом NoTracking или исходный запрос, если атрибут NoTracking не поддерживается.</returns>
      <param name="source">Исходный запрос.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает новый запрос, возвращающий сущности, которые не будут кэшироваться в контексте <see cref="T:System.Data.Entity.DbContext" /> или <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
      <returns>Новый запрос с атрибутом NoTracking или исходный запрос, если атрибут NoTracking не поддерживается.</returns>
      <param name="source">Исходный запрос.</param>
      <typeparam name="T">Тип элемента.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый интерфейс IQueryable с указанным путем запроса.</returns>
      <param name="source">Исходный интерфейс IQueryable, для которого вызывается метод Include.</param>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый интерфейс IQueryable типа T с указанным путем запроса.</returns>
      <param name="source">Исходный интерфейс IQueryable, для которого вызывается метод Include.</param>
      <param name="path">Лямбда-выражение, представляющее включаемый путь.</param>
      <typeparam name="T">Запрашиваемый тип сущности.</typeparam>
      <typeparam name="TProperty">Тип включаемого свойства навигации.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый интерфейс IQueryable типа T с указанным путем запроса.</returns>
      <param name="source">Исходный интерфейс IQueryable, для которого вызывается метод Include.</param>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
      <typeparam name="T">Запрашиваемый тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
      <summary>Метод расширения для интерфейса IQueryable, перечисляющий результаты запроса. Это эквивалентно вызову метода ToList без создания списка. </summary>
      <param name="source">Исходный запрос.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary> Возвращает реализацию <see cref="T:System.ComponentModel.BindingList`1" />, которая остается синхронизированной с заданным объектом <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />. </summary>
      <returns>Связанный список.</returns>
      <param name="source">Коллекция, с которой остается синхронизированным данный связанный список.</param>
      <typeparam name="T">Тип элемента.</typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>Объект <see cref="T:System.Data.Entity.DbModelBuilder" /> используется для сопоставления классов CLR со схемой базы данных. Этот ориентированный на код подход к построению модели EDM известен как подход Code First. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DbModelBuilder" />. Процесс обнаружения исходной модели использует набор соглашений, включенный в самую последнюю версию платформы Entity Framework, установленную на компьютере.  </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DbModelBuilder" />, который будет использовать конкретный набор соглашений для обнаружения исходной модели. </summary>
      <param name="modelBuilderVersion">Версия соглашений, которая будет использована.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> на основе настроек, произведенных построителем. Подключение используется для определения используемого поставщика базы данных, так как он влияет на уровень базы данных в формируемой модели. </summary>
      <returns>Построенная модель.</returns>
      <param name="providerConnection">Подключение, используемое для определения сведений о поставщике.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> на основе настроек, произведенных построителем. Необходимо указать сведения о поставщике, так как они влияют на уровень базы данных в формируемой модели. Для поставщика SqlClient используется неизменяемое имя «System.Data.SqlClient» и маркер манифеста, содержащий год выхода версии (например, «2005» или «2008»). </summary>
      <returns>Построенная модель.</returns>
      <param name="providerInfo">Поставщик базы данных, с которым будет использоваться модель.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>Регистрирует тип в качестве сложного типа модели и возвращает объект, который можно использовать для настройки этого сложного типа. Данный метод можно вызывать повторно для одного и того же типа, чтобы применить несколько строк настроек. </summary>
      <returns>Объект конфигурации для указанного сложного типа.</returns>
      <typeparam name="TComplexType">Регистрируемый или настраиваемый тип.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> для данного объекта <see cref="T:System.Data.Entity.DbModelBuilder" />.  Регистратор позволяет регистрировать конфигурации с производными сущностями и сложными типами при помощи построителя. </summary>
      <returns>Конфигурация для объекта <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>Предоставляет доступ к параметрам объекта <see cref="T:System.Data.Entity.DbModelBuilder" />, который работает с соглашениями. </summary>
      <returns>доступ к параметру</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>Регистрирует тип сущности как часть модели и возвращает объект, который можно использовать для настройки этой сущности. Данный метод можно вызывать повторно для одной и той же сущности, чтобы применить несколько строк настроек. </summary>
      <returns>Объект конфигурации для указанного типа сущности.</returns>
      <typeparam name="TEntityType">Регистрируемый или настраиваемый тип.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли указанный построитель модели текущему построителю модели.</summary>
      <returns>Значение True, если указанный построитель модели равен текущему построителю модели. В противном случае — значение False.</returns>
      <param name="obj">Построитель модели, сравниваемый с текущим объектом. </param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного построителя модели.</summary>
      <returns>Хэш-функция для указанного построителя модели.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>Возвращает тип текущего построителя модели.</summary>
      <returns>Тип текущего построителя модели.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>Исключает тип из модели. Используется для удаления из модели типов, добавленных по соглашению в процессе обнаружения исходной модели. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.DbModelBuilder" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <typeparam name="T">Тип, который должен быть исключен.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Исключает из модели тип или типы. Используется для удаления из модели типов, добавленных по соглашению в процессе обнаружения исходной модели. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.DbModelBuilder" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="types">Типы, исключаемые из модели.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>Возвращает строковое представление построителя модели.</summary>
      <returns>Строковое представление построителя модели.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>Значение из этого перечисления можно передать непосредственно в класс <see cref="T:System.Data.Entity.DbModelBuilder" /> или использовать в атрибуте <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />, примененном к классу, производному от класса <see cref="T:System.Data.Entity.DbContext" />. Используемое значение определяет версию соглашений <see cref="T:System.Data.Entity.DbContext" /> и <see cref="T:System.Data.Entity.DbModelBuilder" />, которая будет использована при построении модели из кода. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>Указывает, что следует использовать последнюю версию соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>Указывает, что должна использоваться версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />, поставляемая в составе платформы Entity Framework 4.1. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>Указывает, что, когда целью является платформа .Net Framework 4, следует использовать версию соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />, поставляемую в составе платформы Entity Framework 5.0. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>Указывает, что должна использоваться версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />, поставляемая в составе платформы Entity Framework 5.0. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>Этот атрибут может быть применен к классу, производному от класса <see cref="T:System.Data.Entity.DbContext" />, чтобы задать версию соглашений <see cref="T:System.Data.Entity.DbContext" /> и <see cref="T:System.Data.Entity.DbModelBuilder" />, которая должна быть использована при построении модели из кода. См. описание перечисления <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> для получения дополнительных сведений о версиях <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />. </summary>
      <param name="version">Версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" />, которая будет использоваться.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>Возвращает версию соглашений <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <returns>Версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>Представляет набор сущностей, используемый для выполнения операций создания, чтения, обновления и удаления. Неуниверсальная версия <see cref="T:System.Data.Entity.DbSet`1" />, которая может использоваться, если тип сущности во время сборки неизвестен. </summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>Добавляет данную сущность в контекст в состоянии <see cref="F:System.Data.EntityState.Added" />. При сохранении изменений сущности в состоянии Added вставляются в базу данных. После сохранения изменений состояние объекта меняется на <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Сущность.</returns>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>Присоединяет заданную сущность к контексту в <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Сущность.</returns>
      <param name="entity">Присоединяемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.DbSet`1" />. </summary>
      <returns>Универсальный объект набора.</returns>
      <typeparam name="TEntity">Базовый тип объекта, который должен быть приведен к универсальному объекту набора.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>Создает новый экземпляр сущности для типа данного набора. Этот экземпляр не добавляется в набор и не присоединяется к нему. Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников. </summary>
      <returns>Экземпляр сущности, который может быть учетной записью-посредником.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>Создает новый экземпляр сущности для типа данного набора или для типа, производного от типа данного набора. Этот экземпляр не добавляется в набор и не присоединяется к нему. Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников. </summary>
      <returns>Экземпляр сущности, который может быть учетной записью-посредником. </returns>
      <param name="derivedEntityType">Тип производной сущности.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли указанный набор текущему набору.</summary>
      <returns>Значение True, если указанный объект равен текущему набору. Значение False в противном случае.</returns>
      <param name="obj">Набор, который требуется сравнить с текущим объектом. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>Использует значение первичного ключа для попытки поиска сущности, отслеживаемой контекстом. Если сущность находится не в контексте, то запрос будет выполняться и вычисляться на основе данных из источника данных, а значение NULL возвращается в том случае, если сущность не найдена в контексте или в источнике данных. Обратите внимание, что метод Find также возвращает сущности, которые были добавлены в контекст, но еще не были сохранены в базе данных.</summary>
      <returns>Обнаруженная сущность или значение NULL.</returns>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного набора.</summary>
      <returns>Хэш-функция для указанного набора.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>Возвращает тип текущего набора.</summary>
      <returns>Тип текущего набора.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>Возвращает коллекцию <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, представляющую сущности набора, которые в данный момент отслеживаются контекстом и не были помечены как удаленные. Обращение к свойству Local не приводит к отправке запроса в базу данных. Это свойство обычно используется после того, как запрос уже был выполнен.</summary>
      <returns>Локальное представление.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>Помечает данную сущность как <see cref="F:System.Data.EntityState.Deleted" />. При сохранении изменений эта сущность будет удалена из базы данных. Перед вызовом этого метода сущность должна существовать в контексте в каком-либо другом состоянии. </summary>
      <returns>Сущность.</returns>
      <param name="entity">Удаляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>Создает необработанный SQL-запрос, возвращающий сущности в данном наборе. По умолчанию возвращаемые сущности отслеживаются контекстом. Это поведение можно изменить, вызвав метод AsNoTracking для объекта <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />, возвращаемого этим методом. </summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />, выполняющий запрос при перечислении.</returns>
      <param name="sql">Строка SQL-запроса.</param>
      <param name="parameters">Параметры, подставляемые в строку SQL-запроса.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>Представляет набор типизированных сущностей, используемый для выполнения операций создания, чтения, обновления и удаления. Объект DbSet не является открыто конструируемым, его можно создать только из экземпляра <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <typeparam name="TEntity">Тип, определяющий набор. Тип, может быть производным типом, а также базовым типом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>Добавляет данную сущность в контекст в состоянии <see cref="F:System.Data.EntityState.Added" />. При сохранении изменений сущности в состоянии Added вставляются в базу данных. После сохранения изменений состояние объекта меняется на <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Возвращает значение <see cref="{0}" />.</returns>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>Присоединяет заданную сущность к контексту в <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Возвращает значение <see cref="{0}" />.</returns>
      <param name="entity">Присоединяемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>Создает новый экземпляр сущности для типа данного набора или для типа, производного от типа данного набора. Этот экземпляр не добавляется в набор и не присоединяется к нему. Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников. </summary>
      <returns>Возвращает значение <see cref="{0}" />.</returns>
      <typeparam name="TDerivedEntity">Тип, определяющий набор.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>Создает новый экземпляр сущности для типа данного набора. Этот экземпляр не добавляется в набор и не присоединяется к нему. Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников. </summary>
      <returns>Возвращает значение <see cref="{0}" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли заданный объект текущему набору.</summary>
      <returns>Значение True, если заданный набор равен текущему. В противном случае — значение False.</returns>
      <param name="obj">Набор, который требуется сравнить с текущим объектом. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>Использует значение первичного ключа для попытки поиска сущности, отслеживаемой контекстом. Если сущность находится не в контексте, то запрос будет выполняться и вычисляться на основе данных из источника данных, а значение NULL возвращается в том случае, если сущность не найдена в контексте или в источнике данных. Обратите внимание, что метод Find также возвращает сущности, которые были добавлены в контекст, но еще не были сохранены в базе данных.</summary>
      <returns>Возвращает <see cref="T:System.Boolean" />.</returns>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного набора.</summary>
      <returns>Хэш-функция для указанного набора.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>Возвращает тип текущего набора.</summary>
      <returns>Тип текущего набора.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>Возвращает коллекцию <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, представляющую сущности набора, которые в данный момент отслеживаются контекстом и не были помечены как удаленные. Обращение к свойству Local не приводит к отправке запроса в базу данных. Это свойство обычно используется после того, как запрос уже был выполнен.</summary>
      <returns>Локальное представление.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>Возвращает эквивалентный неуниверсальный объект <see cref="T:System.Data.Entity.DbSet" />.</summary>
      <returns>Возвращает неуниверсальный объект набора <see cref="T:System.Data.Entity.DbSet" />.</returns>
      <param name="entry">Запись, для которой необходимо вернуть эквивалентный неуниверсальный объект <see cref="T:System.Data.Entity.DbSet" />.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>Помечает данную сущность как <see cref="F:System.Data.EntityState.Deleted" />. При сохранении изменений эта сущность будет удалена из базы данных. Перед вызовом этого метода сущность должна существовать в контексте в каком-либо другом состоянии. </summary>
      <returns>Возвращает значение типа <see cref="T:System.Data.Entity.DbSet" />.</returns>
      <param name="entity">Удаляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>Создает необработанный SQL-запрос, возвращающий сущности в данном наборе. По умолчанию возвращаемые сущности отслеживаются контекстом. Это поведение можно изменить, вызвав метод AsNoTracking для объекта <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />, возвращаемого этим методом. </summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />, выполняющий запрос при перечислении.</returns>
      <param name="sql">Строка SQL-запроса.</param>
      <param name="parameters">Возвращаемые сущности всегда имеют тип, заданный для набора, и никогда не имеют производного типа. Если запрашиваемая таблица или таблицы могут содержать данные других типов сущностей, SQL-запрос должен быть написан соответствующим образом, при этом обеспечивается возврат только сущностей нужного типа.Параметры, подставляемые в строку SQL-запроса.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>Реализация интерфейса <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, которая всегда повторно создает и (необязательно) повторно заполняет базу данных начальными значениями, соответствующими первому использованию контекста в домене приложений. Чтобы заполнить базу данных начальными значениями, создайте производный класс и переопределите метод Seed. </summary>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>Выполняет стратегию инициализации базы данных для заданного контекста. </summary>
      <param name="context">Контекст.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>При переопределении добавляет в контекст данные для заполнения начальными значениями.  Реализация по умолчанию не выполняет никаких действий. </summary>
      <param name="context">Контекст для заполнения начальными значениями.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>Реализация интерфейса <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, которая удаляет, повторно создает и (необязательно) повторно заполняет начальными значениями базу данных только в случае, если модель была изменена со времени создания базы данных.  Это осуществляется с помощью записи хэша модели хранения в базе данных при ее создании и последующего сравнения этого хэша с хэшем, формируемым из текущей модели. Чтобы заполнить базу данных начальными значениями, создайте производный класс и переопределите метод Seed. </summary>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>Выполняет стратегию инициализации базы данных для заданного контекста. </summary>
      <param name="context">Контекст.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>Должен быть переопределен для фактического добавления данных в контекст для заполнения начальными значениями.  Реализация по умолчанию не выполняет никаких действий. </summary>
      <param name="context">Контекст для заполнения начальными значениями.</param>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>Определяет метод для инициализации базы данных.</summary>
      <typeparam name="TContext">Тип контекста.Этот параметр типа контравариантен.
				Это означает, что можно использовать либо указанный тип, либо любой тип, от которого он унаследован.
				Дополнительные сведения о ковариации и контравариантности см. в разделе .</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>Выполняет стратегию инициализации базы данных для заданного контекста. </summary>
      <param name="context">Контекст.</param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>Представляет коллекцию всех сущностей указанного типа, которые содержатся в контексте или могут быть запрошены из базы данных. Класс <see cref="T:System.Data.Entity.DbSet" /> является конкретной реализацией интерфейса <see cref="T:System.Data.Entity.IDbSet`1" />. </summary>
      <typeparam name="TEntity">Тип, определяющий набор.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>Добавляет данную сущность в контекст в состоянии <see cref="F:System.Data.EntityState.Added" />. При сохранении изменений сущности в состоянии Added вставляются в базу данных. После сохранения изменений состояние объекта меняется на <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Возвращает сущность.</returns>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>Присоединяет заданную сущность к контексту в <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Возвращает сущность.</returns>
      <param name="entity">Присоединяемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>Создает новый экземпляр сущности для типа данного набора. Этот экземпляр не добавляется в набор и не присоединяется к нему. Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников. </summary>
      <returns>Возвращает экземпляр сущности, который может быть учетной записью-посредником. </returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>Создает новый экземпляр сущности для типа данного набора или для типа, производного от типа данного набора. Этот экземпляр не добавляется в набор и не присоединяется к нему. Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников. </summary>
      <returns>Возвращает экземпляр сущности, который может быть учетной записью-посредником.</returns>
      <typeparam name="TDerivedEntity">Тип создаваемой сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>Использует значение первичного ключа для попытки поиска сущности, отслеживаемой контекстом. Если сущность находится не в контексте, то запрос будет выполняться и вычисляться на основе данных из источника данных, а значение NULL возвращается в том случае, если сущность не найдена в контексте или в источнике данных. Обратите внимание, что метод Find также возвращает сущности, которые были добавлены в контекст, но еще не были сохранены в базе данных.</summary>
      <returns>Возвращает обнаруженную сущность или значение NULL.</returns>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>Возвращает коллекцию <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, представляющую сущности набора, которые в данный момент отслеживаются контекстом и не были помечены как удаленные. Обращение к свойству Local не приводит к отправке запроса в базу данных. Это свойство обычно используется после того, как запрос уже был выполнен.</summary>
      <returns>Локальное представление.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>Помечает данную сущность как <see cref="F:System.Data.EntityState.Deleted" />. При сохранении изменений эта сущность будет удалена из базы данных. Перед вызовом этого метода сущность должна существовать в контексте в каком-либо другом состоянии. </summary>
      <returns>Возвращает сущность.</returns>
      <param name="entity">Удаляемая сущность.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Реализация IDatabaseInitializer, которая будет использовать Code First Migrations для обновления базы данных до последней миграции.</summary>
      <typeparam name="TContext"></typeparam>
      <typeparam name="TMigrationsConfiguration"></typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary> Инициализирует новый экземпляр класса MigrateDatabaseToLatestVersion.  </summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary> Инициализирует новый экземпляр класса MigrateDatabaseToLatestVersion, который будет использовать определенную строку подключения из файла конфигурации для подключения к базе данных, чтобы выполнить миграцию. </summary>
      <param name="connectionStringName">Имя строки подключения, используемой для миграции.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>Выполняет стратегию инициализации базы данных для заданного контекста.</summary>
      <param name="context">Контекст.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>Возвращается методом ChangeTracker объекта <see cref="T:System.Data.Entity.DbContext" /> для предоставления доступа к функциям контекста, которые относятся к отслеживанию изменений сущностей. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>Обнаруживает изменения, внесенные в свойства и связи сущностей POCO.  Обратите внимание, что некоторые типы сущностей (например, прокси отслеживания изменений и сущности, производные от класса <see cref="T:System.Data.Objects.DataClasses.EntityObject" />) автоматически сообщают об изменениях, в силу чего для этих типов сущностей вызов данного метода обычно не нужен. Также заметьте, что обычно этот метод автоматически вызывается многими методами класса <see cref="T:System.Data.Entity.DbContext" /> и связанных с ним классов, так что этот метод редко нужно вызывать явным образом. Однако может быть желательно, особенно из соображений производительности, отключить автоматический вызов этого метода при помощи флага AutoDetectChangesEnabled в свойстве <see cref="P:System.Data.Entity.DbContext.Configuration" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>Возвращает объекты <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> для всех сущностей, отслеживаемых данным контекстом. </summary>
      <returns>Записи.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>Возвращает объекты <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> для всех сущностей указанного типа, отслеживаемых данным контекстом. </summary>
      <returns>Записи.</returns>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли указанный объект отслеживания текущему объекту отслеживания.</summary>
      <returns>Если указанный объект отслеживания равен текущему объекту отслеживания, значение true; в противном случае — false.</returns>
      <param name="obj">Объект отслеживания для сравнения с текущим объектом. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного объекта отслеживания.</summary>
      <returns>Хэш-функция для указанного объекта отслеживания.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>Возвращает тип текущего объекта отслеживания.</summary>
      <returns>Тип текущего объекта отслеживания.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>Возвращает строковое представление объекта отслеживания.</summary>
      <returns>Строковое представление объекта отслеживания.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. </summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TElement">Тип элемента коллекции.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>Возвращает или задает текущее значение свойства навигации.  Текущее значение равно сущности, на которую ссылается свойство навигации. </summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, которому принадлежит данное свойство навигации. </summary>
      <returns>Запись для сущности, которая владеет данным свойством навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>Возвращает значение, указывающее, загружена ли коллекция сущностей из базы данных. </summary>
      <returns>Если коллекция загружена, значение true; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>Загружает коллекцию сущностей из базы данных. Обратите внимание, что сущности, уже существующие в контексте, не перезаписываются значениями из базы данных. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>Возвращает имя свойства. </summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>Возвращает запрос, который может использоваться для загрузки этой коллекции из базы данных. Возвращаемый запрос можно изменить с помощью LINQ для выполнения фильтрации или таких операций в базе данных, как подсчет количества сущностей в коллекции базы данных без их фактической загрузки. </summary>
      <returns>Запрос для коллекции.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>Экземпляры этого класса возвращаются методом <see cref="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)" /> объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и позволяют выполнять такие операции, как загрузка свойств навигации по коллекции для сущности. </summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TElement">Тип элемента в коллекции сущностей.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>Возвращает или задает текущее значение свойства навигации.  Текущее значение равно сущности, на которую ссылается свойство навигации. </summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, которому принадлежит данное свойство навигации. </summary>
      <returns>Запись для сущности, которая владеет данным свойством навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>Возвращает значение, указывающее, загружена ли коллекция сущностей из базы данных. </summary>
      <returns>Если коллекция загружена, значение true; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>Загружает коллекцию сущностей из базы данных. Обратите внимание, что сущности, уже существующие в контексте, не перезаписываются значениями из базы данных. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>Возвращает имя свойства. </summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> для свойства навигации, представленного данным объектом. </summary>
      <returns>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.</returns>
      <param name="entry">Запись.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>Возвращает запрос, который может использоваться для загрузки этой коллекции из базы данных. Возвращаемый запрос можно изменить с помощью LINQ для выполнения фильтрации или таких операций в базе данных, как подсчет количества сущностей в коллекции базы данных без их фактической загрузки. </summary>
      <returns>Запрос для коллекции.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>Неизменяемое представление модели EDM, которое может быть использовано для создания объекта <see cref="T:System.Data.Objects.ObjectContext" /> или передано в конструктор объекта <see cref="T:System.Data.Entity.DbContext" />.  Для повышения производительности экземпляры этого типа должны кэшироваться и повторно использоваться при создании контекстов.  </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> или класса, производного от ObjectContext. Обратите внимание, что вместо этого можно создать экземпляр DbContext при помощи соответствующего конструктора DbContext. Если используется производный объект ObjectContext, он должен иметь публичный конструктор с единственным параметром EntityConnection. Передаваемое соединение используется созданным объектом ObjectContext, но не находится во владении контекста.  Вызывающая сторона должна освободить соединение после освобождения контекста. </summary>
      <returns>Возвращает контекст.</returns>
      <param name="existingConnection">Существующее соединение с базой данных, которое будет использоваться контекстом.</param>
      <typeparam name="TContext">Тип создаваемого контекста.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />. </summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TComplexProperty">Тип сложного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>Возвращает объект, представляющий вложенное сложное свойство данного свойства. </summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>Возвращает объект, представляющий вложенное свойство данного свойства. Этот метод может использоваться как для скалярных, так и для сложных свойств. </summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>Экземпляры данного класса возвращаются методом ComplexProperty объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и позволяют обращаться к состоянию сложного свойства. </summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TComplexProperty">Тип сущности, которой принадлежит это свойство.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Возвращает объект, представляющий вложенное сложное свойство данного свойства. </summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="property">Выражение, представляющее вложенное свойство.</param>
      <typeparam name="TNestedComplexProperty">Тип вложенного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>Возвращает объект, представляющий вложенное сложное свойство данного свойства. </summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>Возвращает объект, представляющий вложенное сложное свойство данного свойства. </summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
      <typeparam name="TNestedComplexProperty">Тип вложенного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> для свойства, представленного данным объектом.</summary>
      <returns>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</returns>
      <param name="entry">Запись.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Возвращает объект, представляющий вложенное свойство данного свойства. Этот метод может использоваться как для скалярных, так и для сложных свойств. </summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="property">Выражение, представляющее вложенное свойство.</param>
      <typeparam name="TNestedProperty">Тип вложенного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>Возвращает объект, представляющий вложенное свойство данного свойства. Этот метод может использоваться как для скалярных, так и для сложных свойств. </summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
      <typeparam name="TNestedProperty">Тип вложенного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>Возвращает объект, представляющий вложенное свойство данного свойства. Этот метод может использоваться как для скалярных, так и для сложных свойств. </summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>Представляет сведения о подключении базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />, представляющего соединение, указанное в файле конфигурации приложения.</summary>
      <param name="connectionName">Имя строки подключения в конфигурации приложения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> на основе строки подключения.</summary>
      <param name="connectionString">Имя строки подключения, используемой для подключения.</param>
      <param name="providerInvariantName">Имя поставщика, используемого для соединения. Для SQL Server следует использовать «System.Data.SqlClient».</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>Указывает, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Тип текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>Описывает источник строки подключения к базе данных, связанный с объектом <see cref="T:System.Data.Entity.DbContext" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>Строка подключения была создана соглашением.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>Строка подключения была получена из внешней конфигурации.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>Строка подключения была явно указана во время выполнения.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>     Строка подключения была переопределена данными о подключении, указанными для DbContextInfo.  </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>Возвращается методом Configuration объекта <see cref="T:System.Data.Entity.DbContext" /> для предоставления доступа к параметрам конфигурации контекста. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>Возвращает или задает значение, указывающее, включено ли автоматическое обнаружение изменений в конфигурации.</summary>
      <returns>Если автоматическое обнаружение изменений в конфигурации включено, значение true; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равна ли заданная конфигурация текущей конфигурации.</summary>
      <returns>Если указанная конфигурация равна текущей конфигурации, значение true; в противном случае — false.</returns>
      <param name="obj">Конфигурация для сравнения с текущим объектом. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>Возвращает хэш-функцию для указанной конфигурации.</summary>
      <returns>Хэш-функция для указанной конфигурации.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>Возвращает тип текущей конфигурации.</summary>
      <returns>Тип текущей конфигурации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>Возвращает или задает значение, указывающее, включена ли отложенная загрузка связей, представленных как свойства навигации.  По умолчанию отложенная загрузка включена. </summary>
      <returns>Если отложенная загрузка включена, значение true; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>Возвращает или задает значение, которое указывает, будет ли платформа создавать экземпляры динамически формируемых прокси-классов при создании экземпляра типа сущности. Учтите, что, даже если создание прокси включено этим флагом, экземпляры прокси будут создаваться только для типов сущностей, удовлетворяющих соответствующим требованиям. Создание прокси включено по умолчанию. </summary>
      <returns>Если создание прокси включено, значение true; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>Возвращает строковое представление конфигурации.</summary>
      <returns>Строковое представление конфигурации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>Возвращает или задает значение, указывающее, должны ли автоматически проверяться отслеживаемые сущности при вызове метода <see cref="M:System.Data.Entity.DbContext.SaveChanges" />. Значение по умолчанию — true. </summary>
      <returns>Если отслеживаемые сущности должны проверяться автоматически, значение true; в противном случае — false.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>Содержит сведения о среде выполнения для данного типа <see cref="T:System.Data.Entity.DbContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр, представляющий данный тип <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>Инициализирует новый экземпляр, представляющий данный тип <see cref="T:System.Data.Entity.DbContext" />. Можно указать внешний объект конфигурации (например, файл app.config или web.config), который будет использован при разрешении строки подключения. Сюда относится поиск строк подключения и записи DefaultConnectionFactory. </summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Объект, представляющий файл конфигурации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Инициализирует новый экземпляр, представляющий данный <see cref="T:System.Data.Entity.DbContext" /> для определенной базы данных.     Можно указать внешний объект конфигурации (например, файл app.config или web.config), который будет использован при разрешении строки подключения. Сюда относится поиск строк подключения и записи DefaultConnectionFactory. </summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Объект, представляющий файл конфигурации.</param>
      <param name="connectionInfo">Сведения о соединении для использования базой данных.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Инициализирует новый экземпляр, представляющий данный тип <see cref="T:System.Data.Entity.DbContext" />. Можно указать внешний список строк подключения, который будет использован при разрешении строк подключения вместо всех строк подключения, указанных во внешних файлах конфигурации.</summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionStringSettings">Коллекция строк подключения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Инициализирует новый экземпляр, представляющий данный <see cref="T:System.Data.Entity.DbContext" /> для определенной базы данных. </summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionInfo">Сведения о соединении для использования базой данных.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Инициализирует новый экземпляр, представляющий данный тип <see cref="T:System.Data.Entity.DbContext" />. Объект <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> может быть предоставлен для переопределения поставщика, определенного по умолчанию, при построении базовой модели EDM.</summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="modelProviderInfo">Объект <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />, указывающий базовый поставщик ADO.NET для целевого объекта.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>Возвращает или задает имя поставщика ADO.NET для соединения, используемого базовым типом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Имя поставщика ADO.NET для соединения, используемого базовым типом.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>Возвращает или задает строку подключения, используемую базовым типом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Строка подключения, используемая базовым типом <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>Возвращает или задает имя строки подключения, используемой базовым типом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Имя строки подключения, используемой базовым типом <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>Возвращает или задает источник строки подключения, используемый базовым типом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Источник строки подключения, используемый базовым типом <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>Возвращает или задает конкретный тип <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Конкретный тип <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>Создает новый экземпляр, представляющий данный тип <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Если можно создавать экземпляры базового типа <see cref="T:System.Data.Entity.DbContext" />, возвращает новый экземпляр; в противном случае возвращается значение NULL.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>Возвращает или задает значение, показывающее, может ли создаваться базовый тип <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Значение true, если можно создать базовый тип <see cref="T:System.Data.Entity.DbContext" />. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>Возвращает или задает модель для производного контекста, который был инициализирован.</summary>
      <returns>Модель для производного контекста, который был инициализирован.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>Возвращает новый экземпляр универсального класса <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> для указанного универсального типа для отслеживаемой сущности, представленной данным объектом. Тип отслеживаемой сущности должен быть совместим с универсальным типом, в противном случае возникнет исключение. </summary>
      <returns>Универсальная версия.</returns>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по коллекции из этой сущности в коллекцию связанных сущностей. </summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>Возвращает объект, представляющий сложное свойство данной сущности. </summary>
      <returns>Объект, представляющий сложное свойство.</returns>
      <param name="propertyName">Имя сложного свойства.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>Возвращает текущие значения свойств отслеживаемой сущности, представленной данным объектом. </summary>
      <returns>Текущие значения.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>Возвращает сущность. </summary>
      <returns>Сущность.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> данному экземпляру. Два экземпляра <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> считаются равными, если оба они являются записями для одной и той же сущности в одном и том же контексте <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Если указанный объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> равен данному экземпляру, значение true; в противном случае — false. </returns>
      <param name="other">Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект <see cref="T:System.Object" /> данному экземпляру. Два экземпляра <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> считаются равными, если оба они являются записями для одной и той же сущности в одном и том же контексте <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Если заданный объект равен текущему экземпляру, значение true; в противном случае — false. </returns>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>Запрашивает в базе данных копии значений отслеживаемой сущности в том виде, в котором они сейчас существуют в базе данных. При изменении значений в возвращенном словаре значения в базе данных не обновляются. Если сущность не найдена в базе данных, возвращается значение NULL. </summary>
      <returns>Значения из хранилища.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>Возвращает хэш-код для данного экземпляра. </summary>
      <returns>Хэш-код для данного экземпляра, подходящий для использования в алгоритмах хэширования и структурах данных, подобных хэш-таблицам.  </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>Возвращает тип текущей записи сущности базы данных.</summary>
      <returns>Тип текущей записи сущности базы данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>Проверяет данный экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> и возвращает результат проверки. </summary>
      <returns>Результат проверки сущности. Может иметь значение NULL, если метод <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> переопределен. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>Возвращает объект, представляющий элемент сущности.  Тип среды выполнения для возвращаемого объекта варьируется в зависимости от того, какой вид элемента запрашивается.  В настоящее время поддерживаются следующие типы элементов и соответствующие возвращаемые типы: свойство навигации по ссылке (<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />), свойство навигации по коллекции (<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />), примитивное или скалярное свойство (<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />) и сложное свойство (<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />). </summary>
      <returns>Объект, представляющий элемент.</returns>
      <param name="propertyName">Имя элемента.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>Возвращает исходные значения свойств отслеживаемой сущности, представленной данным объектом. Исходные значения — это обычно значения свойств сущности в том виде, в котором они были в последний раз извлечены запросом из базы данных. </summary>
      <returns>Исходные значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>Возвращает объект, представляющий скалярное или сложное свойство данной сущности. </summary>
      <returns>Объект, представляющий свойство.</returns>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по ссылке (то есть не по коллекции) из этой сущности в другую сущность. </summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>Повторно загружает сущность из базы данных, перезаписывая все значения свойств значениями из базы данных. После вызова этого метода сущность будет в неизмененном состоянии. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>Возвращает или задает состояние сущности. </summary>
      <returns>Состояние.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>Возвращает строковое представление записи сущности базы данных.</summary>
      <returns>Строковое представление записи сущности базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>Экземпляры данного класса предоставляют доступ к сведениям о сущностях, отслеживаемых классом <see cref="T:System.Data.Entity.DbContext" />, и возможность управления этими сущностями.  Используйте методы Entity или Entities контекста для получения объектов этого типа. </summary>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Возвращает объект, представляющий свойство навигации по коллекции из этой сущности в коллекцию связанных сущностей. </summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Выражение, представляющее свойство навигации.</param>
      <typeparam name="TElement">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по коллекции из этой сущности в коллекцию связанных сущностей. </summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
      <typeparam name="TElement">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по коллекции из этой сущности в коллекцию связанных сущностей. </summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Возвращает объект, представляющий сложное свойство данной сущности. </summary>
      <returns>Объект, представляющий сложное свойство.</returns>
      <param name="property">Свойство.</param>
      <typeparam name="TComplexProperty">Тип сложного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>Возвращает объект, представляющий сложное свойство данной сущности. </summary>
      <returns>Объект, представляющий сложное свойство.</returns>
      <param name="propertyName">Имя сложного свойства.</param>
      <typeparam name="TComplexProperty">Тип сложного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>Возвращает объект, представляющий сложное свойство данной сущности. </summary>
      <returns>Объект, представляющий сложное свойство.</returns>
      <param name="propertyName">Имя сложного свойства.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>Возвращает текущие значения свойств отслеживаемой сущности, представленной данным объектом. </summary>
      <returns>Текущие значения.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>Возвращает сущность. </summary>
      <returns>Возвращает <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>Определяет, равен ли заданный объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> данному экземпляру. Два экземпляра <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> считаются равными, если оба они являются записями для одной и той же сущности в одном и том же контексте <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Если указанный объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> равен данному экземпляру, значение true; в противном случае — false. </returns>
      <param name="other">Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект <see cref="T:System.Object" /> данному экземпляру. Два экземпляра <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> считаются равными, если оба они являются записями для одной и той же сущности в одном и том же контексте <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Если заданный объект равен текущему экземпляру, значение true; в противном случае — false. </returns>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>Запрашивает в базе данных копии значений отслеживаемой сущности в том виде, в котором они сейчас существуют в базе данных. При изменении значений в возвращенном словаре значения в базе данных не обновляются. Если сущность не найдена в базе данных, возвращается значение NULL. </summary>
      <returns>Значения из хранилища.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>Возвращает хэш-код для данного экземпляра.</summary>
      <returns>Хэш-код для данного экземпляра, подходящий для использования в алгоритмах хэширования и структурах данных, подобных хэш-таблицам.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>Возвращает тип текущей сущности базы данных.</summary>
      <returns>Тип текущей сущности базы данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>Проверяет данный экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и возвращает результат проверки. </summary>
      <returns>Результат проверки сущности. Может иметь значение NULL, если метод <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> переопределен. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>Возвращает объект, представляющий элемент сущности.  Тип среды выполнения для возвращаемого объекта варьируется в зависимости от того, какой вид элемента запрашивается.  В настоящее время поддерживаются следующие типы элементов и соответствующие им возвращаемые типы. Свойство навигации по ссылке: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />. Свойство навигации по коллекции: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />. Примитивное или скалярное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />. Сложное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />. </summary>
      <returns>Элемент сущности. </returns>
      <param name="propertyName">Имя элемента.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>Возвращает объект, представляющий элемент сущности.  Тип среды выполнения для возвращаемого объекта варьируется в зависимости от того, какой вид элемента запрашивается.  В настоящее время поддерживаются следующие типы элементов и соответствующие им возвращаемые типы. Свойство навигации по ссылке: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />. Свойство навигации по коллекции: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. Примитивное или скалярное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />. Сложное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />. </summary>
      <returns>Объект, представляющий элемент.</returns>
      <param name="propertyName">Имя элемента.</param>
      <typeparam name="TMember">Тип элемента.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> для отслеживаемой сущности, представленной данным объектом. </summary>
      <returns>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
      <param name="entry">Запись.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>Возвращает исходные значения свойств отслеживаемой сущности, представленной данным объектом. Исходные значения — это обычно значения свойств сущности в том виде, в котором они были в последний раз извлечены запросом из базы данных. </summary>
      <returns>Исходные значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Возвращает объект, представляющий скалярное или сложное свойство данной сущности. </summary>
      <returns>Объект, представляющий свойство.</returns>
      <param name="property">Свойство.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>Возвращает объект, представляющий скалярное или сложное свойство данной сущности. </summary>
      <returns>Объект, представляющий свойство.</returns>
      <param name="propertyName">Имя свойства.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>Возвращает объект, представляющий скалярное или сложное свойство данной сущности. </summary>
      <returns>Объект, представляющий свойство.</returns>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Возвращает объект, представляющий свойство навигации по ссылке (то есть не по коллекции) из этой сущности в другую сущность. </summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Выражение, представляющее свойство навигации.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по ссылке (не по коллекции) из этой сущности в другую сущность. </summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по ссылке (то есть не по коллекции) из этой сущности в другую сущность. </summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>Повторно загружает сущность из базы данных, перезаписывая все значения свойств значениями из базы данных. После вызова этого метода сущность будет в неизмененном состоянии. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>Возвращает или задает состояние сущности. </summary>
      <returns>Состояние.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>Возвращает строковое представление значений сущности базы данных.</summary>
      <returns>Строковое представление значений сущности базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Это абстрактный базовый класс, используемый для представления скалярного или сложного свойства либо свойства навигации у сущности.  Скалярные и сложные свойства используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />, свойства навигации по ссылке используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />, а свойства навигации по коллекции используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />. </summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>Возвращает или задает текущее значение данного свойства. </summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>Класс <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, которому принадлежит данный элемент. </summary>
      <returns>Запись для сущности, которая владеет данным элементом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равна ли указанная запись текущему запросу.</summary>
      <returns>Если указанная запись равна текущей записи, значение true; в противном случае — false.</returns>
      <param name="obj">Запись, которую требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>Возвращает хэш-функцию для указанной записи.</summary>
      <returns>Хэш-функция для указанной записи.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>Возвращает тип текущей записи.</summary>
      <returns>Тип текущей записи.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>Проверяет данное свойство. </summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Никогда не равно NULL. Если сущность действительна, коллекция будет пустой. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>Возвращает имя свойства. </summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>Возвращает строковое представление значений свойств базы данных.</summary>
      <returns>Строковое представление значений свойств базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>Абстрактный базовый класс, используемый для представления скалярного или сложного свойства либо свойства навигации у сущности.  Скалярные и сложные свойства используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />, свойства навигации по ссылке используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />, а свойства навигации по коллекции используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. </summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TProperty">Тип сущности, которой принадлежит это свойство.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>Возвращает или задает текущее значение данного свойства. </summary>
      <returns>Возвращает значение типа <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>Класс <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, к которому принадлежит данный элемент. </summary>
      <returns>Запись для сущности, которая владеет данным элементом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли заданный запрос текущему запросу.</summary>
      <returns>Если указанный запрос равен текущему запросу, значение true; в противном случае — false.</returns>
      <param name="obj">Запрос для сравнения с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного запроса.</summary>
      <returns>Хэш-функция для указанного запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>Возвращает тип текущего запроса.</summary>
      <returns>Тип текущего запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>Проверяет данное свойство. </summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Никогда не равно NULL. Если сущность действительна, коллекция будет пустой. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>Возвращает имя записи элемента базы данных.</summary>
      <returns>Имя записи элемента базы данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> для свойства, представленного данным объектом. </summary>
      <returns>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</returns>
      <param name="entry">Запись.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>Возвращает строковое представление значений свойств базы данных.</summary>
      <returns>Строковое представление значений свойств базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>Представляет модель EDM, созданную объектом <see cref="T:System.Data.Entity.DbModelBuilder" />. Метод <see cref="M:System.Data.Entity.Infrastructure.DbModel.Compile" /> может использоваться для преобразования из представления EDM в представление <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />, которое представляет собой скомпилированный снимок модели, подходящий для кэширования и создания экземпляров класса <see cref="T:System.Data.Entity.DbContext" /> или <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>Создает для данного режима объект <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />, который представляет собой скомпилированный моментальный снимок, подходящий для кэширования и создания экземпляров класса <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Скомпилированная модель.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />. </summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>Возвращает или задает текущее значение данного свойства. </summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, которому принадлежит данное свойство. </summary>
      <returns>Запись для сущности, которая владеет данным свойством.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>Возвращает или задает значение, указывающее, изменялось ли значение данного свойства со времени его загрузки из базы данных. </summary>
      <returns>Если данный экземпляр изменялся, значение true; в противном случае — false. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>Возвращает имя свойства. </summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>Возвращает или задает исходное значение данного свойства. </summary>
      <returns>Исходное значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> для свойства, по отношению к которому данное свойство является вложенным. Для свойств сложных объектов этот метод возвращает только запись, отличную от NULL. Для свойств самой сущности метод возвращает NULL. </summary>
      <returns>Запись для родительского сложного свойства или NULL, если данное свойство является свойством сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>Экземпляры данного класса возвращаются методом Property объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и позволяют обращаться к состоянию скалярного или сложного свойства. </summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>Возвращает или задает текущее значение данного свойства. </summary>
      <returns>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, которому принадлежит данное свойство. </summary>
      <returns>Запись для сущности, которая владеет данным свойством.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>Возвращает или задает значение, указывающее, изменялось ли значение данного свойства со времени его загрузки из базы данных. </summary>
      <returns>Если данный экземпляр изменялся, значение true; в противном случае — false. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>Возвращает имя свойства. </summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> для свойства, представленного данным объектом. </summary>
      <returns>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.</returns>
      <param name="entry">Запись.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>Возвращает или задает исходное значение данного свойства. </summary>
      <returns>Возвращает значение типа <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> для свойства, по отношению к которому данное свойство является вложенным. Для свойств сложных объектов этот метод возвращает только запись, отличную от NULL. Для свойств самой сущности метод возвращает NULL. </summary>
      <returns>Запись для родительского сложного свойства или NULL, если данное свойство является свойством сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>Коллекция всех свойств базовой сущности или сложного объекта. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>Создает новый словарь, содержащий копии всех свойств в данном словаре. Изменения, вносимые в новый словарь, не будут отражаться в данном словаре, и наоборот. </summary>
      <returns>Клон данного словаря.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равно ли заданное значение текущему значению.</summary>
      <returns>Если заданное значение равно текущему, значение true; в противном случае — false.</returns>
      <param name="obj">Значение для сравнения с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>Возвращает хэш-функцию для заданного значения.</summary>
      <returns>Хэш-функция для заданного значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>Возвращает тип текущего значения.</summary>
      <returns>Тип текущего значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>Возвращает значение свойства так же, как при использовании метода считывания индексированного свойства, но приводит значение к типу универсального параметра.  Это особенно полезно при работе с вложенными словарями, чтобы избежать написания выражений с множеством приведений. </summary>
      <returns>Возвращает значение типа <see cref="T:System.Type" /> для свойства, указанного параметром <paramref name="propertyName" />.</returns>
      <param name="propertyName">Имя свойства.</param>
      <typeparam name="TValue">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>Возвращает или задает значение свойства с указанным именем свойства. Значение может представлять вложенный экземпляр данного класса. </summary>
      <returns>Значение свойства.</returns>
      <param name="propertyName">Имя свойства, которое необходимо извлечь.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>Возвращает набор только для чтения, содержащий имена всех свойств в словаре. </summary>
      <returns>Имена свойств.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>Задает значения данного словаря, считывая значения из другого словаря. Другой словарь должен быть основан на том же типе, что и данный словарь, либо на типе, производном от типа данного словаря. </summary>
      <param name="propertyValues">Словарь, из которого будут считываться значения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>Задает значения данного словаря, считывая значения из указанного объекта. Указанный объект может быть любого типа.  Будет считано любое свойство объекта, которое имеет имя, совпадающее с именем одного из свойств в словаре, и может быть считано.  Остальные свойства будут пропущены.  Это позволяет копировать свойства из простых объектов DTO. </summary>
      <param name="obj">Объект, из которого будут считываться значения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>Создает объект базового типа для данного словаря и заполняет его значениями свойств из этого словаря. </summary>
      <returns>Свойства в этом словаре копируются в новый объект.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>Возвращает строковое представление значений свойств базы данных.</summary>
      <returns>Строковое представление значений свойств базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>Хранит сведения о поставщике базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика, указывающее выпуск SQL Server Compact Edition, который необходимо использовать.</param>
      <param name="providerManifestToken">Сведения из маркера манифеста поставщика для элемента Schema.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>Возвращает неизменяемое имя поставщика, указывающее выпуск SQL Server Compact Edition, который необходимо использовать.</summary>
      <returns>Поставщик данных поставщика базы данных.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Возвращает сведения из маркера манифеста поставщика для элемента Schema.</summary>
      <returns>Маркер манифеста.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>Представляет неуниверсальный запрос LINQ to Entities к объекту <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>Возвращает новый запрос, возвращающий сущности, которые не будут кэшироваться в объекте <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Новый запрос с атрибутом NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />. </summary>
      <returns>Универсальный объект набора.</returns>
      <typeparam name="TElement">Тип элемента, для которого был создан запрос.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>Тип элемента IQueryable. </summary>
      <returns>Тип элемента.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли заданный запрос текущему запросу.</summary>
      <returns>Если указанный запрос равен текущему запросу, значение true; в противном случае — false.</returns>
      <param name="obj">Запрос, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного запроса.</summary>
      <returns>Хэш-функция для указанного запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>Возвращает тип текущего запроса.</summary>
      <returns>Тип текущего запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>Возвращает включенный неуниверсальный запрос LINQ to Entities к объекту <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Включенный запрос LINQ.</returns>
      <param name="path">Путь включенного запроса LINQ.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечисление для данного запроса, вызывая выполнение этого запроса к хранилищу.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" /> для данного запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>Вызывает исключение, указывающее, что прямая привязка к запросу к хранилищу не поддерживается. </summary>
      <returns>Никогда не возвращает значение, всегда вызывает исключение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>LINQ-выражение IQueryable.</summary>
      <returns>Возвращает значение типа <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>Поставщик IQueryable.</summary>
      <returns>Возвращает <see cref="T:System.Linq.IQueryProvider" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>Возвращает представление базового запроса в виде значения типа <see cref="T:System.String" />. </summary>
      <returns>Строка запроса. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>Представляет запрос LINQ to Entities к объекту <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <typeparam name="TResult">Тип сущности, для которой выполняется запрос.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>Возвращает новый запрос, возвращающий сущности, которые не будут кэшироваться в объекте <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Новый запрос с атрибутом NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли заданный запрос текущему запросу.</summary>
      <returns>Если указанный запрос равен текущему запросу, значение true; в противном случае — false.</returns>
      <param name="obj">Запрос, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного запроса.</summary>
      <returns>Хэш-функция для указанного запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>Возвращает тип текущего запроса.</summary>
      <returns>Тип текущего запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>Возвращает включенный запрос LINQ to Entities к объекту <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Включенный запрос LINQ.</returns>
      <param name="path">Путь включенного запроса LINQ.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> для данного запроса. </summary>
      <returns>Возвращает <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />.</returns>
      <param name="entry">Запись.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечисление для данного запроса, вызывая выполнение этого запроса к хранилищу.</summary>
      <returns>Возвращает объект <see cref="T:System.Collections.Generic.IEnumerator`1" /> для запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечисление для данного запроса, вызывая выполнение этого запроса к хранилищу.</summary>
      <returns>Возвращает объект <see cref="T:System.Collections.IEnumerator" /> для запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Вызывает исключение, указывающее, что прямая привязка к запросу к хранилищу не поддерживается. </summary>
      <returns>Никогда не возвращает значение, всегда вызывает исключение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Тип элемента IQueryable.</summary>
      <returns>Возвращает значение типа <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>LINQ-выражение IQueryable.</summary>
      <returns>Возвращает значение типа <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>Поставщик IQueryable.</summary>
      <returns>Возвращает <see cref="T:System.Linq.IQueryProvider" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>Возвращает представление базового запроса в виде значения типа <see cref="T:System.String" />. </summary>
      <returns>Строка запроса. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />. </summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>Возвращает или задает текущее значение свойства навигации.  Текущее значение равно сущности, на которую ссылается свойство навигации. </summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, которому принадлежит данное свойство навигации. </summary>
      <returns>Запись для сущности, которая владеет данным свойством навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>Возвращает значение, указывающее, загружена ли сущность из базы данных. </summary>
      <returns>Если сущность загружена, значение true; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>Загружает сущность из базы данных. Обратите внимание, что, если сущность уже существует в контексте, она не будет перезаписана значениями из базы данных. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>Возвращает имя свойства. </summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>Возвращает запрос, который будет использоваться для загрузки этой сущности из базы данных. Возвращаемый запрос можно изменить с помощью LINQ для выполнения фильтрации или операций в базе данных. </summary>
      <returns>Запрос для сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>Экземпляры этого класса возвращаются методом Reference объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и позволяют выполнять такие операции, как загрузка свойств навигации по ссылке для сущности. </summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>Возвращает или задает текущее значение свойства навигации.  Текущее значение равно сущности, на которую ссылается свойство навигации. </summary>
      <returns>Возвращает значение типа <see cref="T:System.Linq.IQueryable`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, которому принадлежит данное свойство навигации. </summary>
      <returns>Запись для сущности, которая владеет данным свойством навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>Возвращает значение, указывающее, загружена ли сущность из базы данных. </summary>
      <returns>Если сущность загружена, значение true; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>Загружает сущность из базы данных. Если сущность уже существует в контексте, то она не будет перезаписана значениями из базы данных. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>Возвращает имя свойства. </summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary> Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> для свойства навигации, представленного данным объектом. </summary>
      <returns>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.</returns>
      <param name="entry">Запись.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>Возвращает запрос, который будет использоваться для загрузки этой сущности из базы данных. Возвращаемый запрос можно изменить с помощью LINQ для выполнения фильтрации или операций в базе данных. </summary>
      <returns>Запрос для сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>Представляет SQL-запрос для сущностей, который создан из объекта <see cref="T:System.Data.Entity.DbContext" /> и выполняется с использованием соединения из этого контекста. Экземпляры этого класса получаются из экземпляра <see cref="T:System.Data.Entity.DbSet" /> для типа сущности. Запрос не выполняется при создании этого объекта. Он выполняется при каждом перечислении объекта, например при выполнении инструкции foreach. SQL-запросы для несущностей создаются с использованием свойства <see cref="P:System.Data.Entity.DbContext.Database" />. Сведения об универсальной версии данного класса см. в описании класса <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>Возвращает новый запрос, результаты которого не будут отслеживаться связанным объектом <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Новый запрос без отслеживания.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли заданный запрос текущему запросу.</summary>
      <returns>Если указанный запрос равен текущему запросу, значение true; в противном случае — false.</returns>
      <param name="obj">Запрос, который требуется сравнить с текущим объектом. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
      <summary>Выполняет запрос и возвращает перечислитель для элементов. </summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который можно использовать для выполнения итерации по элементам. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного запроса.</summary>
      <returns>Хэш-функция для указанного запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>Возвращает тип текущего запроса.</summary>
      <returns>Тип текущего запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>Вызывает исключение, указывающее, что прямая привязка к запросу к хранилищу не поддерживается.</summary>
      <returns>Никогда не возвращает значение, всегда вызывает исключение.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>Возвращает объект типа <see cref="T:System.String" />, который содержит строку SQL, заданную при создании запроса.  Параметры не включены. </summary>
      <returns>Объект типа <see cref="T:System.String" />, представляющий данный экземпляр. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>Представляет SQL-запрос для сущностей, созданных из объекта <see cref="T:System.Data.Entity.DbContext" />, который выполняется с использованием подключения из этого контекста. Экземпляры этого класса получаются из экземпляра <see cref="T:System.Data.Entity.DbSet`1" /> для типа сущности. Запрос не выполняется при создании этого объекта. Он выполняется при каждом перечислении объекта, например при выполнении инструкции foreach. SQL-запросы для несущностей создаются с использованием свойства <see cref="P:System.Data.Entity.DbContext.Database" />. Сведения о неуниверсальной версии данного класса см. в описании класса <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />. </summary>
      <typeparam name="TEntity">Сущность.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>Возвращает новый запрос, результаты которого не будут отслеживаться связанным объектом <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Новый запрос без отслеживания.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли заданный запрос текущему запросу.</summary>
      <returns>Если указанный запрос равен текущему запросу, значение true; в противном случае — false.</returns>
      <param name="obj">Запрос, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
      <summary>Выполняет запрос и возвращает перечислитель для элементов. </summary>
      <returns>Перечислитель для элементов.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного запроса.</summary>
      <returns>Хэш-функция для указанного запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>Возвращает тип текущего запроса.</summary>
      <returns>Тип текущего запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Выполняет запрос и возвращает перечислитель для элементов.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который можно использовать для выполнения итерации по элементам.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Вызывает исключение, указывающее, что прямая привязка к запросу к хранилищу не поддерживается.</summary>
      <returns>Никогда не возвращает значение, всегда вызывает исключение.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>Возвращает объект типа <see cref="T:System.String" />, который содержит строку SQL, заданную при создании запроса.  Параметры не включены. </summary>
      <returns> Объект типа <see cref="T:System.String" />, представляющий данный экземпляр. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>Исключение, вызываемое объектом <see cref="T:System.Data.Entity.DbContext" />, когда ожидаемым поведением является обновление базы данных в результате выполнения метода SaveChanges для сущности, однако фактически ни одна строка в базе данных затронута не была.  Обычно это означает, что база данных была обновлена в параллельном потоке, а маркер параллелизма, который должен был совпасть, на самом деле не совпал. Записи о состоянии, на которые ссылается это исключение, не сериализуются из соображений безопасности, и при попытке доступа к ним после сериализации будет возвращаться значение NULL. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Сообщение.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>Представляет исключения, возникшие в процессе обновления базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Сообщение.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>Возвращает объекты <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, представляющие сущности, которые не удалось сохранить в базе данных. </summary>
      <returns>Сущности, которые не удалось сохранить в базе данных. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>Представляет сущность, используемую для хранения метаданных о модели EDM в базе данных. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>Возвращает или задает идентификатор сущности метаданных. В настоящее время он всегда равен 1. </summary>
      <returns>Идентификатор.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>Возвращает или задает хэш модели, который используется для проверки того, была ли модель изменена с тех пор, как на ее основе была создана база данных. </summary>
      <returns>Хэш модели.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>Пытается возвратить хэш модели, вычисленный механизмом Code First для данного контекста. Этот метод возвращает значение NULL, если контекст не используется в режиме Code First. </summary>
      <returns>Хэш-строка.</returns>
      <param name="context">Контекст.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Содержит методы, используемые для доступа к модели EDM, созданной механизмом Code First в форме EDMX. Эти методы обычно используются для отладки, если необходимо рассмотреть модель, созданную внутренне механизмом Code First. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>Использует Code First с указанным контекстом и записывает результирующую модель EDM в указанный модуль записи в форме EDMX.  Этот метод может использоваться только с экземплярами контекста, которые используют Code First и создают модель внутри.  Метод не может использоваться для контекстов, созданных с использованием подхода Database First или Model First, для контекстов, использующих уже существующий объект <see cref="T:System.Data.Objects.ObjectContext" />, а также для контекстов, созданных с использованием уже существующего объекта <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />. </summary>
      <param name="context">Контекст.</param>
      <param name="writer">Модуль записи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>Записывает модель EDM, представленную данным объектом <see cref="T:System.Data.Entity.Infrastructure.DbModel" />, в указанный модуль записи в форме EDMX. </summary>
      <param name="model">Объект, представляющий модель EDM.</param>
      <param name="writer">Модуль записи.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>Реализации данного интерфейса используются для создания объектов DbConnection для типа сервера базы данных на основе указанного имени базы данных.   Экземпляр задается для класса <see cref="T:System.Data.Entity.Database" />, чтобы все объекты <see cref="T:System.Data.Entity.DbContext" /> создавались без информации о соединении или с указанием только имени базы данных или строки подключения для использования по умолчанию определенного типа сервера базы данных. Две реализации этого интерфейса предоставлены объектом <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" />, который используется для создания соединений с Microsoft SQL Server, включая выпуски EXPRESS, и объектом <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" />, который используется для создания соединений с выпусками Microsoft SQL Server Compact Edition. При необходимости можно добавить другие реализации для других серверов баз данных. Реализации должны быть потокобезопасными или неизменяемыми, так к ним могут одновременно обращаться сразу несколько потоков. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>Создает соединение на основе указанного имени базы данных или строки подключения. </summary>
      <returns>Инициализированный объект DbConnection.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>Фабрика для создания производных экземпляров <see cref="T:System.Data.Entity.DbContext" />. Этот интерфейс необходимо реализовать для включения служб времени разработки и создания экземпляров типов контекста, у которых отсутствует открытый конструктор по умолчанию. Производные экземпляры <see cref="T:System.Data.Entity.DbContext" /> можно создавать во время разработки для включения поддержки конкретных операций времени разработки, таких как визуализация моделей и создание языка DDL. Службы времени разработки поддерживают автоматические реализации этого интерфейса, которые находятся в той же сборке, что и производный тип <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <typeparam name="TContext">Этот параметр типа ковариантен.
				Это означает, что можно использовать либо указанный тип, либо любой тип, производный от него.
				Дополнительные сведения о ковариации и контравариантности см. в разделе .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>Создает новый экземпляр производного типа <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Экземпляр <see cref="TContext" /></returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>В соответствии с этим соглашением <see cref="T:System.Data.Entity.DbModelBuilder" /> объект <see cref="T:System.Data.Entity.DbModelBuilder" /> включает метаданные о модели при построении модели. Когда объект <see cref="T:System.Data.Entity.DbContext" /> создает модель по соглашению, он добавляет это соглашение в список соглашений, используемых объектом <see cref="T:System.Data.Entity.DbModelBuilder" />.  В результате метаданные модели записываются в базу данных, если объект <see cref="T:System.Data.Entity.DbContext" /> используется для создания базы данных. Впоследствии это может быть использовано для проверки того, изменилась ли модель со времени последнего ее применения к базе данных.  Это соглашение можно удалить из списка соглашений <see cref="T:System.Data.Entity.DbModelBuilder" />, переопределив метод <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>Интерфейс, реализованный объектами, которые могут предоставить экземпляр класса <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />. Класс <see cref="T:System.Data.Entity.DbContext" /> реализует этот интерфейс, чтобы предоставить доступ к базовому объекту ObjectContext. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>Возвращает контекст объекта. </summary>
      <returns>Контекст объекта.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>     Экземпляры этого класса используются для создания объектов DbConnection для SQL Server LocalDb на основе указанного имени базы данных или строки подключения. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>     Создает новый экземпляр фабрики соединений для данной версии LocalDb.     Для SQL Server 2012 LocalDb следует использовать «v11.0». </summary>
      <param name="localDbVersion">Используемая версия LocalDb.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>     Создает новый экземпляр фабрики соединений для данной версии LocalDb.     Для SQL Server 2012 LocalDb следует использовать «v11.0».      </summary>
      <param name="localDbVersion">Используемая версия LocalDb.</param>
      <param name="baseConnectionString">     Строка подключения, используемая для параметров базы данных, кроме «Initial Catalog», «Data Source» и «AttachDbFilename».     В начало этой строки будут добавлены «Initial Catalog» и «AttachDbFilename» на основе имени базы данных при вызове метода CreateConnection.     Параметр «Data Source» будет задан на основе аргумента LocalDbVersion. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>     Строка подключения, используемая для параметров базы данных, кроме «Initial Catalog», «Data Source» и «AttachDbFilename».     В начало этой строки будут добавлены «Initial Catalog» и «AttachDbFilename» на основе имени базы данных при вызове метода CreateConnection.     Параметр «Data Source» будет задан на основе аргумента LocalDbVersion.     По умолчанию используется параметры «Integrated Security=True; MultipleActiveResultSets=True;». </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>     Создает подключение к SQL Server LocalDb на основе указанного имени базы данных или строки подключения.     Если указанная строка содержит символ «=», она рассматривается как строка подключения целиком. В противном случае она рассматривается только как имя базы данных. </summary>
      <returns>Инициализированный объект DbConnection.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>Данное соглашение <see cref="T:System.Data.Entity.DbModelBuilder" /> использует имя производного класса <see cref="T:System.Data.Entity.DbContext" /> в качестве контейнера для концептуальной модели, построенной механизмом Code First. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>Данное соглашение <see cref="T:System.Data.Entity.DbModelBuilder" /> использует пространство имен производного класса <see cref="T:System.Data.Entity.DbContext" /> в качестве пространства имен для концептуальной модели, построенной механизмом Code First. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>Экземпляры этого класса используются внутренне для создания константных выражений, которые вставляются в дерево выражений для замены ссылок на объекты <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> и <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />. </summary>
      <typeparam name="TElement">Тип элемента.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>Публичное свойство, которое ожидается в дереве выражения LINQ.</summary>
      <returns>Возвращает объект <see cref="T:System.Data.Objects.ObjectQuery`1" />. Запрос.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>Экземпляры этого класса используются для создания объектов DbConnection для SQL Server Compact Edition на основе указанного имени базы данных или строки подключения. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary> Создает новую фабрику соединений с пустыми (по умолчанию) свойствами <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> и <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" />. </summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика, указывающее выпуск SQL Server Compact Edition, который необходимо использовать.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>Создает новую фабрику соединений с указанными свойствами <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> и <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" />. </summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика, указывающее выпуск SQL Server Compact Edition, который необходимо использовать. </param>
      <param name="databaseDirectory">Путь, которым предваряется имя базы данных для создания имени файла, которое SQL Server Compact Edition использует при создании или чтении файла базы данных. Если задана пустая строка, в качестве расположения файла базы данных SQL Server Compact Edition использует расположение по умолчанию. </param>
      <param name="baseConnectionString">Строка подключения, используемая для указания параметров обращения к базе данных, отличной от «Data Source». В начало этой строки будет добавлено значение Data Source на основе имени базы данных при вызове метода CreateConnection. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>Строка подключения, используемая для указания параметров обращения к базе данных, отличной от «Data Source». В начало этой строки будет добавлено значение Data Source на основе имени базы данных при вызове метода CreateConnection. По умолчанию задана пустая строка — это означает, что другие параметры не используются. </summary>
      <returns>Используемая строка подключения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>Создает соединение с SQL Server Compact Edition на основе указанного имени базы данных или строки подключения. Если указанная строка содержит символ «=», то она рассматривается как строка подключения целиком. В противном случае она рассматривается только как имя базы данных. </summary>
      <returns>Инициализированный объект DbConnection.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>Путь, которым предваряется имя базы данных для создания имени файла, которое SQL Server Compact Edition использует при создании или чтении файла базы данных. Значение по умолчанию равно «|DataDirectory|», то есть файл будет размещен в назначенном каталоге данных. </summary>
      <returns>Путь к базе данных.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>Неизменяемое имя поставщика, указывающее выпуск SQL Server Compact Edition, который необходимо использовать. </summary>
      <returns>Неизменяемое имя поставщика.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary> Экземпляры этого класса используются для создания объектов DbConnection для SQL Server на основе указанного имени базы данных или строки подключения. По умолчанию используется соединение с «.\SQLEXPRESS».  Это поведение можно изменить, заменив базовую строку подключения при конструировании экземпляра фабрики. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>Создает новую фабрику соединений с заданным по умолчанию свойством BaseConnectionString, значение которого равно «Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True». </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>Создает новую фабрику соединений с указанным свойством BaseConnectionString. </summary>
      <param name="baseConnectionString">Строка подключения, используемая для указания параметров обращения к базе данных, отличной от «Initial Catalog». В начало этой строки будет добавлено значение «Initial Catalog» на основе имени базы данных при вызове метода CreateConnection. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>Строка подключения, используемая для указания параметров обращения к базе данных, отличной от «Initial Catalog». В начало этой строки будет добавлено значение «Initial Catalog» на основе имени базы данных при вызове метода CreateConnection. По умолчанию используется значение «Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True». </summary>
      <returns>Строка подключения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>Создает соединение с SQL Server на основе указанного имени базы данных или строки подключения. Если указанная строка содержит символ «=», то она рассматривается как строка подключения целиком. В противном случае она рассматривается только как имя базы данных. </summary>
      <returns>Инициализированный объект DbConnection.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>Этот атрибут может быть применен либо ко всему производному классу <see cref="T:System.Data.Entity.DbContext" />, либо к отдельным свойствам <see cref="T:System.Data.Entity.DbSet`1" /> или <see cref="T:System.Data.Entity.IDbSet`1" /> этого класса.  Если применен этот атрибут, любые обнаруженные свойства <see cref="T:System.Data.Entity.DbSet`1" /> или <see cref="T:System.Data.Entity.IDbSet`1" /> будут включены в модель, но не будут инициализированы автоматически. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Исключение, которое возникает, если контекст был сформирован из шаблонов <see cref="T:System.Data.Entity.DbContext" /> в режиме Database First или Model First, а затем использовался в режиме Code First. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="info">Объект, содержащий сериализованные данные объекта.</param>
      <param name="context">Контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="message">Сообщение.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>Представляет базовый класс для миграции на основе кода.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     Добавляет операцию добавления столбца в существующую таблицу. </summary>
      <param name="table">     Имя таблицы, в которую следует добавить столбец.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="name">     Имя добавляемого столбца. </param>
      <param name="columnAction">     Действие, задающее столбец для добавления, например c =&amp;gt; c.Int(nullable: false, defaultValue: 3).</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     Добавляет операцию создания нового ограничения внешнего ключа. </summary>
      <param name="dependentTable">     Таблица, содержащая столбец внешнего ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="dependentColumn">Столбец внешнего ключа.</param>
      <param name="principalTable">     Таблица, содержащая столбец, на который ссылается этот внешний ключ.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="principalColumn">     Столбец, на который ссылается этот внешний ключ.      Если значение не задано, будет использоваться первичный ключ базовой таблицы. </param>
      <param name="cascadeDelete">     Значение, указывающее, следует ли настроить каскадное удаление для связи по внешнему ключу.     Если значение не задано, каскадное удаление будет отключено. </param>
      <param name="name">     Имя ограничения внешнего ключа в базе данных.     Если значение не задано, будет сформировано уникальное имя. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     Добавляет операцию создания нового ограничения внешнего ключа. </summary>
      <param name="dependentTable">     Таблица, содержащая столбцы внешнего ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="dependentColumns">Столбцы внешнего ключа.</param>
      <param name="principalTable">     Таблица, содержащая столбцы, на которые ссылается этот внешний ключ.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="principalColumns">     Столбцы, на которые ссылается этот внешний ключ.      Если значение не задано, будет использоваться первичный ключ базовой таблицы. </param>
      <param name="cascadeDelete">     Значение, указывающее, следует ли настроить каскадное удаление для связи по внешнему ключу.     Если значение не задано, каскадное удаление будет отключено. </param>
      <param name="name">     Имя ограничения внешнего ключа в базе данных.     Если значение не задано, будет сформировано уникальное имя. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
      <summary>     Добавляет операцию создания нового первичного ключа. </summary>
      <param name="table">     Таблица, содержащая столбец первичного ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="column">Столбец первичного ключа.</param>
      <param name="name">     Имя первичного ключа в базе данных.     Если значение не задано, будет сформировано уникальное имя. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
      <summary>     Добавляет операцию создания нового первичного ключа на основе нескольких столбцов. </summary>
      <param name="table">     Таблица, содержащая столбцы первичного ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="columns">Столбцы первичного ключа.</param>
      <param name="name">     Имя первичного ключа в базе данных.     Если значение не задано, будет сформировано уникальное имя. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     Добавляет операцию изменения определения существующего столбца. </summary>
      <param name="table">     Имя таблицы, в которой существует столбец.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="name">Имя столбца для изменения.</param>
      <param name="columnAction">     Действие, задающее новое определение для столбца,     например c =&amp;gt; c.String(nullable: false, defaultValue: "none").</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     Добавляет операцию создания индекса на одном столбце. </summary>
      <param name="table">     Имя таблицы, в которой создается индекс.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="column">Имя столбца, на котором создается индекс.</param>
      <param name="unique">     Значение, указывающее, является ли этот индекс уникальным.     Если значение не задано, будет создан неуникальный индекс. </param>
      <param name="name">     Имя, которое будет использоваться для данного индекса в базе данных.     Если значение не задано, будет сформировано уникальное имя. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     Добавляет операцию создания индекса на нескольких столбцах. </summary>
      <param name="table">     Имя таблицы, в которой создается индекс.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="columns">Имена столбцов, на которых создается индекс.</param>
      <param name="unique">     Значение, указывающее, является ли этот индекс уникальным.     Если значение не задано, будет создан неуникальный индекс. </param>
      <param name="name">     Имя, которое будет использоваться для данного индекса в базе данных.     Если значение не задано, будет сформировано уникальное имя. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>     Добавляет операцию создания новой таблицы. </summary>
      <returns>Объект, позволяющий дальнейшую конфигурацию операции создания таблицы.</returns>
      <param name="name">Имя таблицы. Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="columnsAction">     Действие, задающее столбцы, которые будут включены в таблицу,     например t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
      <typeparam name="TColumns">     Столбцы в данной операции создания таблицы.      Этот тип указывать не нужно, он будет выведен из предоставляемого параметра columnsAction. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>     Операции, которые будут выполнены во время процесса понижения уровня. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>     Добавляет операцию удаления существующего столбца. </summary>
      <param name="table">     Имя таблицы, из которой следует удалить столбец.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>     Добавляет операцию удаления ограничения внешнего ключа на основе его имени. </summary>
      <param name="dependentTable">     Таблица, содержащая столбец внешнего ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="name">Имя ограничения внешнего ключа в базе данных.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>     Добавляет операцию удаления ограничения внешнего ключа на основе целевых столбцов. </summary>
      <param name="dependentTable">     Таблица, содержащая столбец внешнего ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="dependentColumn">Столбец внешнего ключа.</param>
      <param name="principalTable">     Таблица, содержащая столбец, на который ссылается этот внешний ключ.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="principalColumn">Столбцы, на которые ссылается этот внешний ключ.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>     Добавляет операцию удаления ограничения внешнего ключа на основе целевых столбцов. </summary>
      <param name="dependentTable">     Таблица, содержащая столбцы внешнего ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="dependentColumns">Столбцы внешнего ключа.</param>
      <param name="principalTable">     Таблица, содержащая столбцы, на которые ссылается этот внешний ключ.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>     Добавляет операцию удаления индекса на основе его имени. </summary>
      <param name="table">     Имя таблицы, из которой следует удалить индекс.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="name">Имя индекса для удаления.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>     Добавляет операцию удаления индекса на основе целевых столбцов. </summary>
      <param name="table">     Имя таблицы, из которой следует удалить индекс.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="columns">Имена целевых столбцов индекса.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>     Добавляет операцию удаления существующего первичного ключа, созданного с именем по умолчанию. </summary>
      <param name="table">     Таблица, содержащая столбец первичного ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>     Добавляет операцию удаления существующего первичного ключа, имеющего имя, отличное от имени по умолчанию. </summary>
      <param name="table">     Таблица, содержащая столбец первичного ключа.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="name">Имя первичного ключа для удаления.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>     Добавляет операцию удаления таблицы. </summary>
      <param name="name">     Имя таблицы для удаления.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>Определяет, равен ли данный экземпляр указанному объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>Возвращает данные указанного типа для параметра или столбца.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>Возвращает тип текущего экземпляра в среде выполнения.</summary>
      <returns>Экземпляр типа, представляющий точный тип времени выполнения для данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта.</summary>
      <returns>Неполная копия текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>     Добавляет операцию перемещения таблицы в новую схему. </summary>
      <param name="name">     Имя таблицы для перемещения.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="newSchema">Схема, в которую перемещается таблица.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>     Добавляет операцию переименования столбца. </summary>
      <param name="table">     Имя таблицы, содержащей переименуемый столбец.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="name">Имя столбца для переименования.</param>
      <param name="newName">Новое имя столбца.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>     Добавляет операцию переименования таблицы. Для изменения схемы таблицы используйте метод MoveTable.</summary>
      <param name="name">     Имя таблицы для переименования.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="newName">     Новое имя таблицы.     Имя схемы — необязательный параметр; если схема не указана, предполагается dbo. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>     Добавляет операцию выполнения команды SQL. </summary>
      <param name="sql">Команда SQL, которую требуется выполнить.</param>
      <param name="suppressTransaction">     Значение, указывающее, выполнять ли SQL-код вне транзакции, используемой для процесса миграции.     Если значение не задано, SQL-код будет выполняться в пределах транзакции. </param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>     Операции, которые будут выполнены в процессе обновления. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>Конфигурация, связанная с использованием миграции для данной модели. Вместо использования этого класса обычно создается класс конфигурации, который является производным от <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>     Инициализирует новый экземпляр класса DbMigrationsConfiguration. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>     Возвращает или задает значение, указывающее, приемлемы ли потери данных во время автоматической миграции.     Если задано значение false, то при возникновении в процессе автоматической миграции потерь данных будет сформировано исключение. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>     Возвращает или задает значение, указывающее, будет ли использоваться автоматическая миграция при переносе базы данных. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>     Возвращает или задает генератор кода для использования при создании шаблонов миграции. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>     Возвращает или задает производный DbContext, представляющий перенесенную модель. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>     Возвращает генератор SQL, который настроен для использования с данным поставщиком базы данных. </summary>
      <returns>Генератор SQL, настроенный для поставщика базы данных.</returns>
      <param name="providerInvariantName">Имя поставщика базы данных для возвращения генератора SQL.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>     Возвращает или задает сборку, содержащую миграцию на основе кода. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>     Возвращает или задает вложенный каталог, в котором хранятся миграции на основе кода. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>     Возвращает или задает пространство имен, используемое для миграции на основе кода. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>     Добавляет новый генератор SQL, который используется для данного поставщика базы данных. </summary>
      <param name="providerInvariantName">Имя поставщика базы данных для задания для генератора SQL.</param>
      <param name="migrationSqlGenerator">Генератор SQL для использования.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>     Возвращает или задает значение для переопределения соединения перенесенной базы данных. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>Представляет конфигурацию, связанную с использованием миграции для данной модели.</summary>
      <typeparam name="TContext">Контекст.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>     Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>Возвращает данные указанного типа для параметра или столбца.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра в среде выполнения.</summary>
      <returns>Экземпляр типа, представляющий точный тип времени выполнения для данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта.</summary>
      <returns>Неполная копия текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>     Запускается после обновления до последней миграции для обеспечения возможности обновления начального значения данных. </summary>
      <param name="context">Контекст, используемый для обновления начального значения данных.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>Используется для применения существующих миграций к базе данных. Этот класс может использоваться для повышения и понижения до любой указанной миграции. Для формирования шаблонов миграции на основе изменений используемой модели следует использовать <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>     Инициализирует новый экземпляр класса DbMigrator. </summary>
      <param name="configuration">Конфигурация, которая будет использована для процесса миграции.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>     Возвращает конфигурацию, которая будет использована для процесса миграции. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>     Возвращает список всех миграций, примененных к целевой базе данных. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>     Возвращает все миграции, заданные в настроенной сборке миграций. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>     Возвращает список всех миграций, определенных в сборке, но не примененных к целевой базе данных. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>     Идентификатор миграции, представляющий состояние базы данных до применения каких-либо миграций. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>     Обновляет целевую базу данных до данного переноса. </summary>
      <param name="targetMigration">Перенос для повышения или понижения уровня.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
      <summary>Набор методов расширений для <see cref="T:System.Data.Entity.IDbSet`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>Добавляет или обновляет сущности с помощью ключей при вызове метода SaveChanges. Эквивалент операции «upsert» из терминологии баз данных. Этот метод может оказаться полезным при заполнении данных с помощью миграции.</summary>
      <param name="set">Объект <see cref="T:System.Data.Entity.IDbSet`1" />, который используется для выполнения операций создания, чтения, обновления и удаления.</param>
      <param name="identifierExpression">Выражение, указывающее свойства, которые следует использовать при определении необходимости выполнения операции добавления или обновления. </param>
      <param name="entities">Добавляемые и обновляемые сущности.</param>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>Добавляет или обновляет сущности с помощью ключей при вызове метода SaveChanges. Эквивалент операции «upsert» из терминологии баз данных. Этот метод может оказаться полезным при заполнении данных с помощью миграции.</summary>
      <param name="set">Объект <see cref="T:System.Data.Entity.IDbSet`1" />, который используется для выполнения операций создания, чтения, обновления и удаления.</param>
      <param name="entities">Добавляемые и обновляемые сущности.</param>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>Представляет вспомогательный класс, который используется для настройки столбца.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных двоичного типа.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="maxLength">Максимально допустимая длина данных массива.</param>
      <param name="fixedLength">Значение, указывающее, должны ли все данные быть дополнены до максимальной длины.</param>
      <param name="isMaxLength">Значение, указывающее, следует ли использовать максимальную длину, поддерживаемую поставщиком базы данных.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="timestamp">Значение, указывающее, должен ли этот столбец быть настроен в качестве отметки времени.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа Boolean.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа Byte.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа DateTime.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="precision">Точность столбца.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа DateTimeOffset.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="precision">Точность столбца.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение столбца для хранения данных Decimal.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="precision">Числовая точность столбца.</param>
      <param name="scale">Числовой масштаб столбца.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа Double.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>Указывает, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения географических данных.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения геометрических данных.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Тип текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных идентификатора GUID.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа Integer.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа Long.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта.</summary>
      <returns>Неполная копия текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа Short.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных Single.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных String.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="maxLength">Максимально допустимая длина строковых данных.</param>
      <param name="fixedLength">Значение, указывающее, должны ли все данные быть дополнены до максимальной длины.</param>
      <param name="isMaxLength">Значение, указывающее, следует ли использовать максимальную длину, поддерживаемую поставщиком базы данных.</param>
      <param name="unicode">Значение, указывающее, поддерживает столбец содержимое в Юникоде или нет.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
      <summary>Создает новое определение столбца для хранения данных типа Time.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="precision">Точность столбца.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Вспомогательный класс, который используется для дальнейшей настройки таблицы, создаваемой с помощью вызова метода CreateTable для <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <typeparam name="TColumns">Тип столбцов в таблице.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Builders.TableBuilder`1" />.</summary>
      <param name="createTableOperation">Операция создания таблицы для дальнейшей настройки.</param>
      <param name="migration">Миграция, в которой создается таблица.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>Указывает ограничения внешнего ключа, которое будет создано в таблице. </summary>
      <returns>Он сам, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="principalTable">Имя таблицы, для которой создается ограничение внешнего ключа.</param>
      <param name="dependentKeyExpression">Лямбда-выражение, представляющее свойства внешнего ключа.      Если внешний ключ состоит из нескольких свойств, укажите анонимный тип, включающий эти свойства.</param>
      <param name="cascadeDelete">Значение, указывающее, следует ли настроить каскадное удаление для ограничения внешнего ключа. </param>
      <param name="name">Имя ограничения внешнего ключа. Если имя не определено, вычисляется имя по умолчанию.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками. Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>Возвращает хэш-код текущего объекта.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>Возвращает тип текущего объекта.</summary>
      <returns>Тип текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
      <summary>Указывает индекс, который будет создан для таблицы.</summary>
      <returns>Он сам, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="indexExpression">Лямбда-выражение, представляющее свойство, которое нужно проиндексировать.Если индексированию подлежат несколько свойств, укажите анонимный тип, включающий эти свойства.</param>
      <param name="unique">Значение, указывающее, является ли этот индекс уникальным.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками. Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта.</summary>
      <returns>Неполная копия текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
      <summary>Указывает первичный ключ для таблицы. </summary>
      <returns>Он сам, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="keyExpression">Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве первичного ключа. Если первичный ключ состоит из нескольких свойств, укажите анонимный тип, включающий в себя эти свойства.</param>
      <param name="name">Имя первичного ключа. Если указывается значение NULL, будет сформировано имя по умолчанию.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками. Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>Возвращает строковое представление текущего объекта.</summary>
      <returns>Строковое представление текущего объекта.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>Формирует код на языке C# для миграции на основе кода.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Byte" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Byte[]" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Формирует главный файл кода, доступный для просмотра и изменения пользователем. </summary>
      <returns>Сформированный код.</returns>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код, задающий набор имен столбцов с помощью лямбда-выражения.</summary>
      <param name="columns">Столбцы, для которых будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Формирует код для задания определения модели <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Определение столбца, для которого будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="emitName">Значение, указывающее, следует ли включать в определение имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.DateTime" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Decimal" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Guid" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Int64" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>Формирует код, задающий значение по умолчанию для столбца неизвестного типа данных.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Single" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.String" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Формирует файл фонового кода, содержащий метаданные миграции.</summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Формирует файл фонового кода, содержащий метаданные миграции.</summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.TimeSpan" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>Заключает идентификатор в кавычки с применением соответствующего экранирования, чтобы его можно было сохранить в строке.</summary>
      <returns>Заключенный в кавычки идентификатор.</returns>
      <param name="identifier">Идентификатор для заключения в кавычки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Удаляет все недопустимые символы из имени артефакта базы данных.</summary>
      <returns>Очищенное имя.</returns>
      <param name="name">Имя для очистки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Возвращает имя типа для столбца заданного типа данных.</summary>
      <returns>Имя типа для использования в сформированной миграции.</returns>
      <param name="primitiveTypeKind">Тип данных для перевода.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует завершающий код для класса, начатого с WriteClassStart.</summary>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Формирует пространство имен с помощью определения класса и инструкций.</summary>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="base">Базовый класс для формируемого.</param>
      <param name="designer">Значение, указывающее, будет ли код формироваться в файле с выделенным кодом.</param>
      <param name="namespaces">Пространства имен, для которых будут добавлены директивы using. Если имеет значение NULL, то будут использоваться пространства имен, возвращенные из GetDefaultNamespaces.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует свойство для получения исходной или целевой модели в файле фонового кода.</summary>
      <param name="name">Имя свойства.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>Базовый класс для поставщиков, формирующих код для миграции на основе кода.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>     Формирует код, который будет добавлен к пользовательскому проекту. </summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary> Возвращает пространства имен по умолчанию, которые будут выводиться через директивы using или Imports для любого формируемого кода. </summary>
      <returns>Упорядоченный список пространств имен.</returns>
      <param name="designer">Значение, указывающее, будет ли код формироваться в файле с выделенным кодом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary> Возвращает пространства имен, которые будут выводиться через директивы using или Imports для обработки кода, сформированного данными операциями. </summary>
      <returns>Упорядоченный список пространств имен.</returns>
      <param name="operations">Операции, для которых предполагается формирование кода.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>Формирует шаблоны миграций на основе кода для применения ожидающих изменений модели к базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />. </summary>
      <param name="migrationsConfiguration">Конфигурация, которая будет использована для формирования шаблонов.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary> Возвращает или задает пространство имен, используемое в сформированном коде миграции.  По умолчанию совпадает с MigrationsNamespace для объекта конфигурации миграции, переданного в конструктор. Для проектов VB.NET его необходимо изменить с учетом корневого пространства имен проекта. </summary>
      <returns>Пространство имен, используемое в сформированном коде миграции.  </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>     Формирует шаблоны миграций на основе кода для применения ожидающих изменений модели к базе данных. </summary>
      <returns>Миграция с формированием шаблонов.</returns>
      <param name="migrationName">Имя, которое будет использовано для миграции с формированием шаблонов.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>Формирует шаблоны миграций на основе кода для применения ожидающих изменений модели к базе данных.</summary>
      <returns>Миграция с формированием шаблонов.</returns>
      <param name="migrationName">Имя, которое будет использовано для миграции с формированием шаблонов.</param>
      <param name="ignoreChanges">Значение true, чтобы исключались изменения модели, в противном случае — значение false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary> Формирует шаблоны первоначальной миграции на основе кода, соответствующей ранее запущенному инициализатору базы данных.</summary>
      <returns>Миграция с формированием шаблонов.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>   Представляет миграцию на основе кода, для которой сформированы шаблоны и которая готова для записи в файл.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>     Возвращает или задает код миграции, для которой сформированы шаблоны и которая должна быть сохранена в файле фонового кода. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>     Возвращает или задает подкаталог в пользовательском проекте, где должна быть сохранена данная миграция. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>     Возвращает или задает язык программирования, используемый для данной миграции.     Как правило, используется для выбора расширения файла сформированного кода. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>     Возвращает или задает уникальный идентификатор данной миграции.     Как правило, используется для выбора имени файла сформированного кода. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>     Возвращает или задает сформированные шаблоны кода миграции, которые пользователь может редактировать. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
      <summary>Представляет исключение, вызываемое при запуске операции в другом AppDomain в классе <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> с сериализованными данными.</summary>
      <param name="info">Данные сериализованного объекта о вызываемом исключении.</param>
      <param name="context">Контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> с указанной ошибкой, типом внутреннего исключения и трассировкой стека.</summary>
      <param name="message">Сообщение об ошибке, объясняющее причину исключения.</param>
      <param name="innerType">Тип вызванного исключения.</param>
      <param name="innerStackTrace">Трассировка стека для вызванного исключения.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации целевого объекта.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> для заполнения данными.</param>
      <param name="context">Целевой тип для данной сериализации.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
      <summary>Возвращает трассировку стека для вызванного исключения. </summary>
      <returns>Трассировка стека для вызванного исключения.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
      <summary>Возвращает тип вызванного исключения. </summary>
      <returns>Тип вызванного исключения.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Представляет вспомогательный класс, используемый во время разработки для выполнения команд, связанных с миграцией, которым необходимо взаимодействие с приложением, которое редактируется в среде Visual Studio.Поскольку приложение редактируется, загрузка сборок должна производиться в отдельном AppDomain, чтобы гарантировать загрузку последних версий. Кроме того, копируется файл конфигурации App/Web.config запускаемого проекта, чтобы обеспечить применение актуальной конфигурации.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />. </summary>
      <param name="assemblyName">Имя сборки, которая содержит используемую конфигурацию миграции. </param>
      <param name="configurationTypeName">Используется полное имя конфигурации миграции с указанием пространства имен. </param>
      <param name="workingDirectory">Рабочая папка каталога, содержащая скомпилированные сборки. </param>
      <param name="configurationFilePath">Путь файла конфигурации запускаемого проекта. </param>
      <param name="dataDirectory">Путь каталога данных приложения для запускаемого проекта. Как правило, это каталог App_Data для веб-приложений или рабочая папка каталога для исполняемых файлов. </param>
      <param name="connectionStringInfo">Соединение с перенесенной базой данных. Если указано значение NULL, то будет использоваться соединение по умолчанию для контекста. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
      <param name="disposing">Укажите значение true, чтобы освободить управляемые и неуправляемые ресурсы, или значение false, чтобы освободить только неуправляемые ресурсы. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>Освобождает все неуправляемые ресурсы, используемые фасадом. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>Возвращает полное имя для всех типов, производных от <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Все найденные типы контекста.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>Возвращает список всех миграций, примененных к базе данных. </summary>
      <returns>Идентификаторы примененных миграций.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>Возвращает список всех миграций, не примененных к базе данных. </summary>
      <returns>Идентификаторы ожидающих миграций.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>Возвращает или задает действие, выполняемое для регистрации информации. </summary>
      <returns>Действие, выполняемое для регистрации информации.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>Возвращает или задает действие, выполняемое для регистрации подробной информации. </summary>
      <returns>Действие, выполняемое для регистрации подробной информации.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>Возвращает или задает действие, выполняемое для регистрации предупреждений. </summary>
      <returns>Действие, выполняемое для регистрации предупреждений.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>Формирует шаблоны миграций на основе кода для применения ожидающих изменений модели.</summary>
      <returns>Миграция с формированием шаблонов.</returns>
      <param name="migrationName">Имя сформированной миграции.</param>
      <param name="language">Язык программирования для формируемой миграции.</param>
      <param name="rootNamespace">Корневое пространство имен для проекта, куда будет добавлена миграция.</param>
      <param name="ignoreChanges">Значение true, чтобы исключались изменения модели, в противном случае — значение false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>Формирует шаблоны первоначальной миграции на основе кода, соответствующей ранее запущенному инициализатору базы данных. </summary>
      <returns>Миграция с формированием шаблонов.</returns>
      <param name="language">Язык программирования для формируемой миграции.</param>
      <param name="rootNamespace">Корневое пространство имен для проекта, куда будет добавлена миграция.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>Формирует скрипт SQL для миграции между двумя миграциями. </summary>
      <returns>Сформированный скрипт SQL.</returns>
      <param name="sourceMigration">Миграция, с которой нужно обновиться. Если указано значение NULL, то скрипт обновляет текущую создаваемую базу данных. </param>
      <param name="targetMigration">Миграция, на которую нужно обновиться. Если указано значение NULL, то скрипт обновляет последнюю созданную миграцию. </param>
      <param name="force">Значение, указывающее, приемлемы ли потери данных во время автоматической миграции.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>Обновляет базу данных для указанной миграции. </summary>
      <param name="targetMigration">Идентификатор миграции, на которую будет произведен переход. Если указано значение NULL, то база данных будет обновлена до последней миграции. </param>
      <param name="force">Значение, указывающее, приемлемы ли потери данных во время автоматической миграции.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>Формирует код на языке Visual Basic .NET для миграции на основе кода.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Byte" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Byte[]" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Формирует главный файл кода, доступный для просмотра и изменения пользователем.</summary>
      <returns>Сформированный код.</returns>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код, задающий набор имен столбцов с помощью лямбда-выражения.</summary>
      <param name="columns">Столбцы, для которых будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />. </summary>
      <param name="addPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Формирует код для задания определения модели <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />. </summary>
      <param name="column">Определение столбца, для которого будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="emitName">Значение, указывающее, следует ли включать в определение имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />. </summary>
      <param name="dropForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />. </summary>
      <param name="dropIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />. </summary>
      <param name="dropPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />. </summary>
      <param name="dropTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />. </summary>
      <param name="moveTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />. </summary>
      <param name="renameColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />. </summary>
      <param name="renameTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />. </summary>
      <param name="sqlOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Data.Spatial.DbGeography" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Data.Spatial.DbGeometry" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.DateTime" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.DateTimeOffset" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Decimal" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Guid" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Int64" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца неизвестного типа данных. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Single" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.String" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Формирует файл фонового кода, содержащий метаданные миграции. </summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Формирует файл фонового кода, содержащий метаданные миграции. </summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>     Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.TimeSpan" />. </summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="addForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="addPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="createIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>     Заключает идентификатор в кавычки с применением соответствующего экранирования, чтобы его можно было сохранить в строке. </summary>
      <returns>Заключенный в кавычки идентификатор.</returns>
      <param name="identifier">Идентификатор для заключения в кавычки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>     Удаляет все недопустимые символы из имени артефакта базы данных. </summary>
      <returns>Очищенное имя.</returns>
      <param name="name">Имя для очистки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     Возвращает имя типа для столбца заданного типа данных. </summary>
      <returns>Имя типа для использования в сформированной миграции.</returns>
      <param name="primitiveTypeKind">Тип данных для перевода.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary> Формирует завершающий код для класса, начатого с WriteClassStart. </summary>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>     Формирует пространство имен с помощью определения класса и инструкций. </summary>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="base">Базовый класс для сформированного класса.</param>
      <param name="designer">Значение, указывающее, будет ли код формироваться в файле с выделенным кодом.</param>
      <param name="namespaces">Пространства имен, для которых будут добавлены директивы Imports. Если имеет значение NULL, то будут использоваться пространства имен, возвращенные из GetDefaultNamespaces.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Формирует свойство для получения исходной или целевой модели в файле фонового кода. </summary>
      <param name="name">Имя свойства.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>   Этот класс используется миграциями на основе Code First для чтения и записи журнала миграции из базы данных. Не предназначен для использования другим кодом и является открытым, что обеспечивает возможность доступа платформе Entity Framework при выполнении с частичным уровнем доверия. Может быть изменен или удален в будущем.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
      <summary>     Возвращает или задает дату и время создания записи журнала миграции. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>     Возвращает или задает идентификатор миграции, которую представляет эта строка. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>     Возвращает или задает состояние модели после применения этой миграции. </summary>
      <returns>Возвращает значение типа <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>     Возвращает или задает версию платформы Entity Framework, в которой была создана эта запись. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>Представляет ошибку, которая возникает при потере данных во время автоматической миграции.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>     Инициализирует новый экземпляр класса AutomaticDataLossException. </summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>Представляет ошибку, которая возникла при наличии ожидающих изменений модели после применения последней миграции и отключения автоматической миграции.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>     Инициализирует новый экземпляр класса AutomaticMigrationsDisabledException. </summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>Обеспечивает дополнительные метаданные о переносе на основе кода.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>     Возвращает уникальный идентификатор для переноса. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>     Возвращает состояние модели до запуска этого переноса. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>     Возвращает состояние модели после запуска этого переноса. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Представляет ошибки, возникающие внутри конвейера Code First Migrations.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Инициализирует новый экземпляр класса MigrationsException с сериализованными данными. </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />, содержащий данные сериализованного объекта о сформированном исключении.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные данные об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary> Инициализирует новый экземпляр класса MigrationsException. </summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>Базовый класс для регистраторов, которые могут быть использованы для процессов миграции.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>     Добавляет в журнал информационное сообщение. </summary>
      <param name="message">Сообщение, которое нужно добавить в журнал.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>     Добавляет в журнал дополнительные сведения, которые должны быть представлены для пользователя после запроса подробной выходной информации. </summary>
      <param name="message">Сообщение, которое нужно добавить в журнал.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>     Добавляет в журнал предупреждение, о котором следует уведомить пользователя. </summary>
      <param name="message">Сообщение, которое нужно добавить в журнал.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>Базовый класс для декораторов, заключающих в оболочку базовый <see cref="T:System.Data.Entity.Migrations.DbMigrator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>     Инициализирует новый экземпляр класса MigratorBase. </summary>
      <param name="innerMigrator">Средство переноса, помещаемое этим декоратором в оболочку.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>     Возвращает конфигурацию, используемую для процесса переноса. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>     Возвращает список переносов, примененных к базе данных. </summary>
      <returns>Список идентификаторов переносов</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>     Возвращает список переносов, определенных в сборке. </summary>
      <returns>Список идентификаторов переносов</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>     Возвращает список отложенных переносов, не примененных к базе данных. </summary>
      <returns>Список идентификаторов переносов</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>     Обновляет целевую базу данных до последнего переноса. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>     Обновляет целевую базу данных до данного переноса. </summary>
      <param name="targetMigration">Перенос для повышения или понижения уровня.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>Декоратор для обеспечения протоколирования при выполнении операций переноса.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>     Инициализирует новый экземпляр класса MigratorLoggingDecorator. </summary>
      <param name="innerMigrator">Средство переноса, помещаемое этим декоратором в оболочку.</param>
      <param name="logger">Регистратор, в который выполняется запись сообщений.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>Представляет декоратор для создания скрипта SQL вместо применения изменений к базе данных. Использование этого декоратора для использования программы-оболочки <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> позволит предотвратить <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> от применения каких-либо изменений к целевой базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator" />. </summary>
      <param name="innerMigrator">Средство переноса, помещаемое этим декоратором в оболочку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>Обновляет базу данных до целевой миграции.</summary>
      <returns>Сформированный скрипт SQL.</returns>
      <param name="sourceMigration">Исходная миграция.</param>
      <param name="targetMigration">Перенос для повышения или понижения уровня.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>Представляет столбец, добавляемый в таблицу.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>     Инициализирует новый экземпляр класса AddColumnOperation. </summary>
      <param name="table">Имя таблицы, в которую добавляется столбец.</param>
      <param name="column">Сведения о добавляемом столбце.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>     Возвращает сведения о добавляемом столбце. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>     Возвращает операцию, представляющую удаление добавленного столбца. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>Возвращает {вставьте здесь текст}.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>     Возвращает имя таблицы, в которую добавляется столбец. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>Представляет ограничение внешнего ключа, добавляемое в таблицу.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса AddForeignKeyOperation.     Также должны быть заполнены свойства PrincipalTable, PrincipalColumns, DependentTable и DependentColumns. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>     Возвращает или задает значение, указывающее, следует ли настроить каскадное удаление для ограничения внешнего ключа. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>     Возвращает операцию создания индекса на столбцах внешнего ключа. </summary>
      <returns>Операция добавления индекса.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>     Возвращает операцию удаления ограничения внешнего ключа. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>     Имена столбцов, которые являются целевыми для ограничения внешнего ключа. </summary>
      <returns>Имена столбцов.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>Представляет добавление первичного ключа в таблицу.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса AddPrimaryKeyOperation.     Также должны быть заполнены свойства Table и Columns. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { образец_аргумента = "мое_значение" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>     Возвращает операцию удаления первичного ключа. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>Представляет изменение существующего столбца.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>     Инициализирует новый экземпляр класса AlterColumnOperation. </summary>
      <param name="table">Имя таблицы, к которой принадлежит столбец.</param>
      <param name="column">Сведения о том, какие изменение следует внести в столбец.</param>
      <param name="isDestructiveChange">Значение, указывающее, приведет ли это изменение к потере данных.</param>
      <param name="inverse">Операция для отката изменения столбца.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>     Инициализирует новый экземпляр класса AlterColumnOperation. </summary>
      <param name="table">Имя таблицы, к которой принадлежит столбец.</param>
      <param name="column">Сведения о том, какие изменение следует внести в столбец.</param>
      <param name="isDestructiveChange">Значение, указывающее, приведет ли это изменение к потере данных.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>     Возвращает новое определение столбца. </summary>
      <returns>Определение столбца.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>     Возвращает операцию, представляющую откат изменения.     Обратная операция не может быть вычислена автоматически, если      она не была предоставлена конструктору, это свойство возвратит значение NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>     Возвращает имя таблицы, к которой принадлежит столбец. </summary>
      <returns>Имя таблицы.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>Представляет информацию о столбце.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     Инициализирует новый экземпляр класса. </summary>
      <param name="type">Тип данных для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
      <summary>     Инициализирует новый экземпляр класса. </summary>
      <param name="type">Тип данных для этого столбца.</param>
      <param name="typeUsage">     Дополнительные сведения о типе данных.     Включает такие сведения, как максимальная длина, допустимость значений NULL и т. д. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>     Возвращает значение по умолчанию для типа CLR, соответствующего типу базы данных для данного столбца. </summary>
      <returns>Значение по умолчанию.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>     Возвращает тип CLR, соответствующий типу базы данных для данного столбца. </summary>
      <returns>Тип CLR.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
      <summary>     Возвращает или задает константу, используемую в качестве значения по умолчанию для этого столбца. </summary>
      <returns>Значение по умолчанию для столбца.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
      <summary>     Возвращает или задает выражение SQL, используемое в качестве значения по умолчанию для этого столбца. </summary>
      <returns>Значение по умолчанию для столбца.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
      <summary>     Возвращает или задает значение, показывающее, имеет ли этот столбец фиксированную длину.     Допустимо только для типов данных, представляющих массивы. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>     Возвращает или задает значение, указывающее, будут ли значения для этого столбца создаваться базой данных с помощью шаблонов идентификации. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
      <summary>     Определяет, относится ли столбец к более узкому типу данных, чем другой столбец.     Используется для определения, приведет ли изменение определения столбца к потере данных. </summary>
      <returns>Значение true, если столбец относится к более узкому типу данных.</returns>
      <param name="column">Столбец для сравнения.</param>
      <param name="providerManifest">Сведения о базе данных, предоставленные поставщиком.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>     Возвращает или задает значение, показывающее, может ли этот столбец содержать значения NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>     Возвращает или задает значение, указывающее, должен ли этот столбец быть настроен в качестве отметки времени. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
      <summary>     Возвращает или задает значение, показывающее, поддерживает ли этот столбец символы Юникода.     Допустимо только для текстовых типов данных. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
      <summary>     Возвращает или задает максимальную длину данного столбца.     Допустимо только для типов данных, представляющих массивы. </summary>
      <returns>Максимальная длина.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
      <summary>     Возвращает или задает имя столбца. </summary>
      <returns>Имя.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
      <summary>     Возвращает или задает точность для этого столбца.     Допустимо только для типов данных decimal. </summary>
      <returns>Точность.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
      <summary>     Возвращает или задает масштаб этого столбца.     Допустимо только для типов данных decimal. </summary>
      <returns>Масштаб.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
      <summary>     Возвращает или задает зависящий от поставщика тип данных, используемый для этого столбца. </summary>
      <returns>Тип данных.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
      <summary>     Возвращает тип данных для этого столбца. </summary>
      <returns>Тип данных.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
      <summary>     Возвращает дополнительные сведения о типе данных данного столбца.     Включает такие сведения, как максимальная длина, допустимость значений NULL и т. д. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>Представляет создание индекса базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса CreateIndexOperation.     Также должны быть заполнены свойства Table и Columns. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>     Возвращает операцию удаления этого индекса. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>     Возвращает или задает значение, указывающее, является ли этот индекс уникальным. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>Представляет создание таблицы.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса CreateTableOperation. </summary>
      <param name="name">Имя создаваемой таблицы.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>     Возвращает столбцы, включаемые в новую таблицу. </summary>
      <returns>Включаемые столбцы.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>     Возвращает операцию удаления таблицы. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>     Возвращает имя создаваемой таблицы. </summary>
      <returns>Имя.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>     Возвращает или задает первичный ключ для новой таблицы. </summary>
      <returns>Первичный ключ.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
      <summary>Представляет удаление новой записи из таблицы журнала миграций. Таблица журнала миграций используется для хранения журнала миграций, примененных к базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса DeleteHistoryOperation. </summary>
      <param name="table">Имя таблицы журнала миграций.</param>
      <param name="migrationId">Идентификатор записи миграции для удаления.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>Представляет столбец, удаляемый из таблицы.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropColumnOperation. </summary>
      <param name="table">Имя таблицы, из которой следует удалить столбец.</param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="inverse">Операция, представляющая откат операции удаления.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropColumnOperation. </summary>
      <param name="table">Имя таблицы, из которой следует удалить столбец.</param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>     Возвращает операцию, представляющую откат удаления столбца.     Обратная операция не может быть вычислена автоматически, если      она не была предоставлена конструктору, это свойство возвратит значение NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>     Возвращает имя столбца для удаления. </summary>
      <returns>Имя столбца.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>     Возвращает имя таблицы, из которой следует удалить столбец. </summary>
      <returns>Имя таблицы.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>Представляет ограничение внешнего ключа, удаляемое из таблицы.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropForeignKeyOperation. </summary>
      <param name="inverse">Операция, представляющая откат удаления ограничения внешнего ключа.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropForeignKeyOperation.     Также должны быть заполнены свойства PrincipalTable, DependentTable и DependentColumns. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>     Возвращает операцию удаления связанного индекса для столбцов внешнего ключа. </summary>
      <returns>Операция удаления индекса.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>     Возвращает операцию, представляющую откат удаления ограничения внешнего ключа.     Обратная операция не может быть вычислена автоматически, если      она не была предоставлена конструктору, это свойство возвратит значение NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>Представляет удаление существующего индекса.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropIndexOperation. </summary>
      <param name="inverse">Операция, представляющая откат удаления индекса.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropIndexOperation. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>     Возвращает операцию, представляющую откат удаления индекса.     Обратная операция не может быть вычислена автоматически, если      она не была предоставлена конструктору, это свойство возвратит значение NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>Представляет удаление первичного ключа из таблицы.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropPrimaryKeyOperation.     Также должны быть заполнены свойства Table и Columns. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>     Возвращает операцию добавления первичного ключа. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>Представляет удаление существующей таблицы.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropTableOperation. </summary>
      <param name="name">Имя таблицы для удаления.</param>
      <param name="inverse">Операция, представляющая откат удаления таблицы.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса DropTableOperation. </summary>
      <param name="name">Имя таблицы для удаления.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>     Возвращает операцию, представляющую откат удаления таблицы.     Обратная операция не может быть вычислена автоматически, если      она не была предоставлена конструктору, это свойство возвратит значение NULL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>     Возвращает имя удаляемой таблицы. </summary>
      <returns>Имя таблицы.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>Базовый класс для изменений, влияющих на ограничения внешнего ключа.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса ForeignKeyOperation. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>     Имена столбцов внешнего ключа. </summary>
      <returns>Имена столбцов.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>     Возвращает или задает имя таблицы, в которой существуют столбцы внешнего ключа. </summary>
      <returns>Имя таблицы.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>     Возвращает значение, указывающее, задано ли для этого ограничения внешнего ключа определенное имя. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>     Возвращает или задает имя ограничения внешнего ключа.     Если имя не определено, вычисляется имя по умолчанию. </summary>
      <returns>Имя ограничения.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>     Возвращает или задает имя целевой таблицы для ограничения внешнего ключа. </summary>
      <returns>Имя таблицы.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>Общий базовый класс для операций, влияющих на таблицу журнала миграций.  Таблица журнала миграций используется для хранения журнала миграций, примененных к базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса HistoryOperation. </summary>
      <param name="table">Имя таблицы журнала миграций.</param>
      <param name="migrationId">Имя миграции, которой касаются изменения.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
      <summary>     Возвращает имя миграции, которой касаются изменения. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
      <summary>     Возвращает имя таблицы журнала миграций. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>Общий базовый класс для операций, влияющих на индексы.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса IndexOperation. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>     Возвращает или задает индексируемые столбцы. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>     Возвращает значение, указывающее, задано ли для этого индекса специфическое имя. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>     Возвращает или задает имя индекса.     Если имя не определено, вычисляется имя по умолчанию. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>     Возвращает или задает таблицу, к которой принадлежит индекс. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
      <summary>Представляет вставку новой записи в таблицу журнала миграций. Таблица журнала миграций используется для хранения журнала миграций, примененных к базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
      <summary>     Инициализирует новый экземпляр класса InsertHistoryOperation. </summary>
      <param name="table">Имя таблицы журнала миграций.</param>
      <param name="migrationId">Идентификатор записи миграции для вставки.</param>
      <param name="model">Значение, сохраняемое в столбце модели.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
      <summary>Возвращает {вставьте здесь текст}.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
      <summary>     Возвращает значение для сохранения в таблице журнала, представляющее целевую модель миграции. </summary>
      <returns>Возвращает значение типа <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
      <summary>     Возвращает значение для сохранения в таблице журнала, указывающее версию Entity Framework, использованную для подготовки данной миграции. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>Представляет операцию изменения схемы базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса MigrationOperation. </summary>
      <param name="anonymousArguments">       Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>     Возвращает дополнительные аргументы, которые могут обрабатываться поставщиками. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>     Возвращает операцию, отменяющую данную операцию. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>     Возвращает значение, указывающее, может ли эта операция привести к потере данных. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>Представляет перемещение таблицы из одной схемы в другую.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса MoveTableOperation. </summary>
      <param name="name">Имя таблицы для перемещения.</param>
      <param name="newSchema">Имя схемы, в которую перемещается таблица.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>     Возвращает операцию, перемещающую таблицу обратно в первоначальную схему. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>     Возвращает имя перемещаемой таблицы. </summary>
      <returns>Имя.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>     Возвращает имя схемы, в которую перемещается таблица. </summary>
      <returns>Имя схемы.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>Общий базовый класс для представления операций, влияющих на первичные ключи.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Инициализирует новый экземпляр класса PrimaryKeyOperation. </summary>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>     Возвращает столбцы, составляющие первичный ключ. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>     Возвращает значение, указывающее, задано ли для этого первичного ключа определенное имя. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>     Возвращает или задает имя первичного ключа.     Если имя не определено, вычисляется имя по умолчанию. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>     Возвращает или задает имя таблицы, содержащей первичный ключ. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>Представляет переименование существующего столбца.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса RenameColumnOperation. </summary>
      <param name="table">Имя таблицы, к которой принадлежит столбец.</param>
      <param name="name">Имя столбца для переименования.</param>
      <param name="newName">Новое имя столбца.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>     Возвращает операцию отката переименования. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>     Возвращает имя столбца для переименования. </summary>
      <returns>Имя.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>     Возвращает новое имя столбца. </summary>
      <returns>Новое имя.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>     Возвращает имя таблицы, к которой принадлежит столбец. </summary>
      <returns>Имя таблицы.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>  Представляет переименование существующей таблицы.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса RenameTableOperation. </summary>
      <param name="name">Имя таблицы для переименования.</param>
      <param name="newName">Новое имя таблицы.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>     Возвращает операцию отката переименования. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>     Возвращает имя переименуемой таблицы. </summary>
      <returns>Имя.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>     Возвращает новое имя таблицы. </summary>
      <returns>Новое имя.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>Представляет зависящую от поставщика инструкцию SQL для выполнения непосредственно в целевой базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>     Инициализирует новый экземпляр класса SqlOperation. </summary>
      <param name="sql">Команда SQL, которую требуется выполнить.</param>
      <param name="anonymousArguments">     Дополнительные аргументы, которые могут обрабатываться поставщиками.      Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>     Возвращает выполняемую команду SQL. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>     Возвращает или задает значение, указывающее, следует ли выполнять эту инструкцию за пределами области транзакции, которая используется для того, чтобы процесс миграции был транзакционным.     Если задано значение true, откат этой операции в случае сбоя процесса выполнен не будет. </summary>
      <returns>Значение true, если откат операции в случае сбоя миграции выполнен не будет.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>   Общий базовый класс для поставщиков, который преобразует зависящие от поставщика операции миграции в команды SQL, определяемые поставщиком базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>     Преобразует набор операций миграции в определяемые поставщиком базы данных команды SQL. </summary>
      <returns>Список инструкций SQL, выполняемых в рамках операции миграции.</returns>
      <param name="migrationOperations">Операции для преобразования.</param>
      <param name="providerManifestToken">Токен, представляющий версию целевой базы данных.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>Представляет операцию миграции, преобразованную в инструкцию SQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>     Возвращает или задает SQL, который должен быть выполнен в рамках выполнения операции миграции. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>     Возвращает или задает значение, указывающее, следует ли выполнять эту инструкцию за пределами области транзакции, которая используется для того, чтобы процесс миграции был транзакционным.     Если задано значение true, откат этой операции в случае сбоя процесса выполнен не будет. </summary>
      <returns>Значение true, если откат операции в случае сбоя процесса миграции выполнен не будет. В противном случае ― значение false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
      <summary>Представляет поставщик для преобразования не зависящих от поставщика операций миграции в команды SQL, которые могут быть выполнены для Microsoft SQL Server Compact Edition.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
      <summary>Создает пустое соединение для текущего поставщика. Разрешает производным поставщикам использовать другие соединения, отличные от <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      <returns>Пустое соединение для текущего поставщика.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement.</summary>
      <param name="alterColumnOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement.</summary>
      <param name="dropColumnOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement.</summary>
      <param name="dropIndexOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement.</summary>
      <param name="moveTableOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement.</summary>
      <param name="renameColumnOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement.</summary>
      <param name="renameTableOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>Формирует SQL для указания константы по умолчанию типа DateTime, задаваемого столбцу.     Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию.</summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>Формирует SQL для создания схемы базы данных. Сформированный SQL должен добавляться с помощью метода Statement.</summary>
      <param name="schema">Создаваемая схема базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Формирует SQL, чтобы пометить таблицу как системную. Сформированный SQL должен добавляться с помощью метода Statement.</summary>
      <param name="createTableOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
      <summary>Формирует имя в кавычках. Указанное имя может содержать схему, а может и не содержать ее.</summary>
      <returns>Имя в кавычках.</returns>
      <param name="name">Имя, заключаемое в кавычки.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
      <summary>Представляет поставщика для преобразования не зависящих от поставщика операций миграции в команды SQL, которые можно выполнять для Microsoft SQL Server.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
      <summary>Формирует SQL для задания типа данных столбца. Этот метод формирует только фактический тип, а не код SQL для создания столбца. </summary>
      <returns>SQL, представляющий тип данных.</returns>
      <param name="column">Столбец, для которого формируется SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
      <summary>Создает пустое соединение для текущего поставщика. Разрешает производным поставщикам использовать другие соединения, отличные от <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      <returns>Пустое соединение для текущего поставщика.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
      <summary>Формирует SQL для задания константы по умолчанию типа bool, задаваемого для столбца. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию.</summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
      <summary>Формирует SQL для задания константы по умолчанию типа byte[], задаваемого для столбца. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>Преобразует набор операций миграции в команды SQL, определяемые Microsoft SQL Server. </summary>
      <returns>Список инструкций SQL, выполняемых в рамках операции миграции.</returns>
      <param name="migrationOperations">Операции для преобразования.</param>
      <param name="providerManifestToken">Токен, представляющий версию целевой базы данных SQL Server (т. е. «2005», «2008»).</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="addColumnOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="addForeignKeyOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="addPrimaryKeyOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="alterColumnOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="createIndexOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="createTableOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="deleteHistoryOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="dropColumnOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="dropForeignKeyOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="dropIndexOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="dropPrimaryKeyOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="dropTableOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="insertHistoryOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="moveTableOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="renameColumnOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="renameTableOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
      <summary>Формирует SQL для операции <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.     Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="sqlOperation">Операция, для которой создается SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>Формирует SQL для задания константы по умолчанию типа geogrpahy, задаваемого для столбца. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>Формирует SQL для задания константы по умолчанию типа geometry, задаваемого для столбца. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>Формирует SQL для указания константы по умолчанию типа DateTime, задаваемого столбцу. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
      <summary>Формирует SQL для задания константы по умолчанию типа DateTimeOffset, задаваемого для столбца. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
      <summary>Формирует SQL для задания константы по умолчанию типа идентификатора Guid, задаваемого для столбца. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
      <summary>Формирует SQL для задания константы по умолчанию, задаваемой для столбца.     Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
      <summary>Формирует SQL для задания константы по умолчанию типа string, задаваемого для столбца. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
      <summary>Формирует SQL для задания константы по умолчанию типа TimeSpan, задаваемого для столбца. Этот метод формирует только фактическое значение, а не код SQL для задания значения по умолчанию. </summary>
      <returns>SQL, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>Формирует SQL для создания схемы базы данных. Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="schema">Создаваемая схема базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Формирует SQL, чтобы пометить таблицу как системную. Сформированный SQL должен добавляться с помощью метода Statement. </summary>
      <param name="createTableOperation">Таблица, которая будет помечена как системная.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
      <summary>Формирует имя в кавычках. Указанное имя может содержать схему, а может и не содержать ее. </summary>
      <returns>Сформированное имя в кавычках.</returns>
      <param name="name">Имя, заключаемое в кавычки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
      <summary>Заключает в кавычки идентификатор для SQL Server. </summary>
      <returns>Заключенный в кавычки идентификатор для SQL Server.</returns>
      <param name="identifier">Идентификатор для заключения в кавычки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Добавляет новую инструкцию для выполнения в базе данных. </summary>
      <param name="writer">Модуль записи, содержащий выполняемый код SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
      <summary>Добавляет новую инструкцию для выполнения в базе данных. </summary>
      <param name="sql">Выполняемая инструкция.</param>
      <param name="suppressTransaction">Значение, указывающее, следует ли выполнять эту инструкцию за пределами области транзакции, которая используется для того, чтобы процесс миграции был транзакционным. Если задано значение true, откат этой операции в случае сбоя процесса выполнен не будет.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
      <summary>Возвращает новый объект <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" />, который может быть использован для сборки SQL. Это просто вспомогательный метод для создания модуля записи. Запись в этот модуль записи не приводит к регистрации SQL для выполнения. Необходимо передать сформированный SQL в метод Statement. </summary>
      <returns>Пустой текстовый модуль записи текста для создания SQL.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>  То же, что и T:System.CodeDom.Compiler.IndentedTextWriter, но работает с частичным уровнем доверия.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>     Инициализирует новый экземпляр класса IndentedTextWriter, используя указанный модуль записи текста и строку табуляции по умолчанию. </summary>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, используемый для вывода данных. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>     Инициализирует новый экземпляр класса IndentedTextWriter, используя указанный модуль записи текста и строку табуляции. </summary>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, используемый для вывода данных. </param>
      <param name="tabString">Строка табуляции, используемая для отступа. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>     Закрывает документ, в который производилась запись. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>     Указывает строку табуляции по умолчанию. Это поле является константой. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>     Возвращает кодирование, которое использует модуль записи текста. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>     Сбрасывает поток записи на диск. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>     Возвращает или задает количество пробелов для отступа. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>     Возвращает используемый <see cref="T:System.IO.TextWriter" />. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>     Возвращает или задает используемый символ новой строки. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>     Выводит строку табуляции один раз для каждого уровня отступа в соответствии со свойством <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>     Записывает текстовое представление значения типа Boolean в текстовый поток. </summary>
      <param name="value">Записываемое значение типа Boolean. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>     Записывает символ в текстовый поток. </summary>
      <param name="value">Символ, записываемый в поток. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>     Записывает массив символов в текстовый поток. </summary>
      <param name="buffer">Записываемый массив символов. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>     Записывает подмассив символов в текстовый поток. </summary>
      <param name="buffer">Массив символов, из которого записываются данные. </param>
      <param name="index">Начальный индекс в буфере. </param>
      <param name="count">Число символов для записи. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>     Записывает текстовое представление значения типа Double в текстовый поток. </summary>
      <param name="value">Записываемое значение типа Double. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>     Записывает текстовое представление целочисленного типа в текстовый поток. </summary>
      <param name="value">Записываемое целочисленное значение. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>     Записывает текстовое представление целого числа размером 8 байт в текстовый поток. </summary>
      <param name="value">Записываемое целочисленное значение размером 8 байт. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>     Записывает текстовое представление объекта в текстовый поток. </summary>
      <param name="value">Записываемый объект. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>     Записывает текстовое представление значения типа Single в текстовый поток. </summary>
      <param name="value">Записываемое значение типа Single. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>     Записывает указанную строку в текстовый поток. </summary>
      <param name="s">Записываемая строка. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>     Записывает отформатированную строку с использованием указанной семантики. </summary>
      <param name="format">Отформатированная строка. </param>
      <param name="arg0">Объект, записываемый в отформатированную строку. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>     Записывает отформатированную строку с использованием указанной семантики. </summary>
      <param name="format">Используемая отформатированная строка. </param>
      <param name="arg0">Первый объект, записываемый в отформатированную строку. </param>
      <param name="arg1">Второй объект, записываемый в отформатированную строку. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>     Записывает отформатированную строку с использованием указанной семантики. </summary>
      <param name="format">Используемая отформатированная строка. </param>
      <param name="arg">Массив аргументов для вывода. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>     Записывает признак конца строки. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>     Записывает в текстовый поток текстовое представление значения типа Boolean, за которым следует признак конца строки. </summary>
      <param name="value">Записываемое значение типа Boolean. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>     Записывает в текстовый поток символ, за которым следует признак конца строки. </summary>
      <param name="value">Символ, записываемый в поток. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>     Записывает в текстовый поток массив символов, за которым следует признак конца строки. </summary>
      <param name="buffer">Записываемый массив символов. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>     Записывает в текстовый поток подмассив символов, за которым следует признак конца строки. </summary>
      <param name="buffer">Массив символов, из которого записываются данные. </param>
      <param name="index">Начальный индекс в буфере. </param>
      <param name="count">Число символов для записи. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>     Записывает в текстовый поток текстовое представление значения типа Double, за которым следует признак конца строки. </summary>
      <param name="value">Записываемое значение типа Double. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>     Записывает в текстовый поток текстовое представление целого числа, за которым следует признак конца строки. </summary>
      <param name="value">Записываемое целочисленное значение. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>     Записывает в текстовый поток текстовое представление целого числа размером 8 байт, за которым следует признак конца строки. </summary>
      <param name="value">Записываемое целочисленное значение размером 8 байт. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>     Записывает в текстовый поток текстовое представление объекта, за которым следует признак конца строки. </summary>
      <param name="value">Записываемый объект. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>     Записывает в текстовый поток текстовое представление значения типа Single, за которым следует признак конца строки. </summary>
      <param name="value">Записываемое значение типа Single. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>     Записывает в текстовый поток указанную строку, за которой следует признак конца строки. </summary>
      <param name="s">Записываемая строка. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>     Выводит отформатированную строку, за которой следует признак конца строки, используя заданную семантику. </summary>
      <param name="format">Отформатированная строка. </param>
      <param name="arg0">Объект, записываемый в отформатированную строку. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>     Выводит отформатированную строку, за которой следует признак конца строки, используя заданную семантику. </summary>
      <param name="format">Используемая отформатированная строка. </param>
      <param name="arg0">Первый объект, записываемый в отформатированную строку. </param>
      <param name="arg1">Второй объект, записываемый в отформатированную строку. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>     Выводит отформатированную строку, за которой следует признак конца строки, используя заданную семантику. </summary>
      <param name="format">Используемая отформатированная строка. </param>
      <param name="arg">Массив аргументов для вывода. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>     Записывает в текстовый поток текстовое представление значения типа UInt32, за которым следует признак конца строки. </summary>
      <param name="value">Выводимое значение типа UInt32. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>     Записывает указанное строковое значение в строку без табуляций. </summary>
      <param name="s">Записываемая строка. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary> Разрешает выполнить настройку для сложного типа в модели.  Объект <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> может быть получен путем использования метода <see cref="M:System.Data.Entity.DbModelBuilder.ComplexType``1" />, либо пользовательский тип, производный от <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />, может быть зарегистрирован с помощью свойства <see cref="P:System.Data.Entity.DbModelBuilder.Configurations" />. </summary>
      <typeparam name="TComplexType">Настраиваемый сложный тип.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary> Инициализирует новый экземпляр <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>Разрешает выполнить настройку для типа сущности в модели.  Объект <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> может быть получен с помощью метода Entity в классе <see cref="T:System.Data.Entity.DbModelBuilder" />, либо пользовательский тип, производный от <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, может быть зарегистрирован с использованием свойства Configurations в классе <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TEntityType">Представляет тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary> Настраивает имя набора сущностей, используемого для этого типа сущности. Имя набора сущностей можно настраивать только для базового типа в каждом наборе. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="entitySetName">Имя набора сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Настраивает свойства первичного ключа для этого типа сущности. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="keyExpression"> Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве первичного ключа.  Например, на языке C# будет иметь вид t =&gt; t.Id    , а на языке Visual Basic .Net будет иметь вид Function(t) t.Id.  Если первичный ключ состоит из нескольких свойств, укажите анонимный тип, включающий в себя эти свойства.  Например, на языке C# будет иметь вид t =&gt; new { t.Id1, t.Id2 }, а на языке Visual Basic .Net будет иметь вид Function(t) New From { t.Id1, t.Id2 }.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary> Настраивает множественную связь для этого типа сущности. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации для этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
      <typeparam name="TTargetEntity">Тип сущности на другом конце связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Настраивает дополнительную связь этого типа сущности. Экземпляры этого типа сущности смогут сохраняться в базе данных без указания этой связи. Внешний ключ в базе данных допускает значения NULL. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации для этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
      <typeparam name="TTargetEntity">Тип сущности на другом конце связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Настраивает требуемое отношение этого типа сущности. Экземпляры этого типа сущности не смогут сохраняться в базе данных без указания этой связи. Внешний ключ в базе данных не допускает значения NULL. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации для этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
      <typeparam name="TTargetEntity">Тип сущности на другом конце связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary> Позволяет осуществить дополнительную настройку, связанную с сопоставлением производного типа сущности со схемой базы данных. Вызовы этого метода аддитивны, поэтому последующие вызовы не переопределяют настройки, выполненные предыдущими вызовами этого метода. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="derivedTypeMapConfigurationAction">Действие, которое выполняет настройку класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
      <typeparam name="TDerived">Производный тип сущности, который необходимо настроить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary> Позволяет осуществить дополнительную настройку, связанную с сопоставлением этого типа сущности со схемой базы данных. По умолчанию любая настройка будет применена к любому типу, производному от этого типа сущности.  Производные типы можно настраивать с помощью специальной перегрузки этого метода, которая настраивает производный тип, или с помощью метода <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> для данного производного типа.  Свойства сущности могут разбиваться по разным таблицам с помощью нескольких вызовов этого метода.  Вызовы аддитивны, так что последующие вызовы не переопределят настройку, уже выполненную предыдущими вызовами этого метода. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="entityMappingConfigurationAction">Действие, которое выполняет настройку класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>Настраивает имя таблицы, с которой сопоставлен этот тип сущности. </summary>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary> Настраивает имя таблицы, с которой сопоставлен этот тип сущности. </summary>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Имя схемы базы данных для таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary> Исключение, которое вызывается <see cref="T:System.Data.Entity.DbModelBuilder" /> во время создания модели, если создана недопустимая модель. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
      <param name="info">Данные сериализации.</param>
      <param name="context">Контекст.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />. </summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />. </summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary> Базовый класс для выполнения настройки отношения. Функции настройки показаны в API для Code First fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary> Используется для настройки свойства <see cref="T:System.byte[]" /> типа сущности или сложного типа. Функции настройки показаны в API для Code First fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary> Настраивает имя столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства. Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary> Настраивает тип данных столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Указывает, как база данных будет формировать значения этого свойства. </summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">     Шаблон для формирования значений этого свойства в базе данных.     Установка «NULL» удалит сформированный базой данных аспект шаблона из этого свойства.     Установка «NULL» приведет к такому же поведению среды выполнения, как при установке «None». </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Указывает, что свойство будет иметь заданную максимальную длину. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="value"> Максимальная длина для данного свойства. Установка «NULL» удалит любое ограничение максимальной длины из этого свойства. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary> Настраивает использование свойства в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="concurrencyToken"> Значение, указывающее, является ли свойство маркером параллелизма. Установка «NULL» удалит аспект маркера параллелизма из этого свойства. Установка «NULL» приведет к такому же поведению среды выполнения, что и установка «false». </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary> Указывает, что свойство будет фиксированной длины. Используйте HasMaxLength для установки фиксированной длины для этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary> Настраивает для свойства разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary> Делает свойство необязательным. Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL. Свойства <see cref="T:System.byte[]" /> по умолчанию необязательные. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary> Делает свойство обязательным. Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary> Настраивает свойство, чтобы отображалась версия строки в базе данных. Реальный тип данных будет разным в зависимости от используемого поставщика баз данных. Установка отображения версии строки для этого свойства автоматически сделает его маркером оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary> Указывает, что свойство будет переменной длины. Свойства <see cref="T:System.byte[]" /> имеют переменную длину по умолчанию. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary> Настраивает связь, которая сможет поддерживать функции каскадного удаления. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary> Настраивает для связи каскадное удаление. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary> Настраивает для связи наличие или отсутствие каскадного удаления. </summary>
      <param name="value">Значение true, если каскадное удаление включено. В противном случае — значение false.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary> Разрешает производным классам конфигурации для типов сущностей и сложных типов регистрироваться с помощью <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary> Добавляет <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> к <see cref="T:System.Data.Entity.DbModelBuilder" />. Для каждого типа в модели можно добавить только один класс <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="complexTypeConfiguration">Добавляемая настройка сложного типа</param>
      <typeparam name="TComplexType">Настраиваемый сложный тип.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary> Добавляет <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> к <see cref="T:System.Data.Entity.DbModelBuilder" />. Для каждого типа в модели можно добавить только один класс <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="entityTypeConfiguration">Добавляемая настройка типа сущности.</param>
      <typeparam name="TEntityType">Настраиваемый тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary> Позволяет настроить соглашения, используемые экземпляром <see cref="T:System.Data.Entity.DbModelBuilder" />. В настоящее время единственной поддерживаемой операцией является удаление одного или нескольких соглашений, используемых по умолчанию. Соглашения, используемые по умолчанию, можно найти в пространстве имен <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>Отключает соглашение для <see cref="T:System.Data.Entity.DbModelBuilder" />. Соглашения по умолчанию, доступные для удаления, можно найти в пространстве имен <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" />. </summary>
      <typeparam name="TConvention">Тип соглашения, которое должно быть отключено.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary> Используется для настройки свойства <see cref="T:System.DateTime" /> типа сущности или сложного типа. Функции настройки показаны в Fluent API для Code First. Дополнительные сведения см. в разделе <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary> Настраивает имя столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства. Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary> Настраивает тип данных столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Указывает, как база данных будет формировать значения этого свойства. </summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">     Шаблон для формирования значений этого свойства в базе данных.     Установка «NULL» удалит сформированный базой данных аспект шаблона из этого свойства.     Установка «NULL» приведет к такому же поведению среды выполнения, как при установке «None». </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary> Настраивает точность свойства. Если поставщик баз данных не поддерживает точность для типа данных этого столбца, это значение не учитывается. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="value">Точность свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary> Настраивает использование свойства в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="concurrencyToken"> Значение, указывающее, является ли свойство маркером параллелизма. Установка «NULL» удалит аспект маркера параллелизма из этого свойства. Установка «NULL» приведет к такому же поведению среды выполнения, что и установка «false». </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary> Делает свойство необязательным. Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary> Делает свойство обязательным. Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL. Свойства <see cref="T:System.DateTime" /> требуются по умолчанию. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary> Используется для настройки свойства <see cref="T:System.decimal" /> типа сущности или сложного типа.  Функции настройки показаны в API для Code First fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary> Настраивает имя столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства. Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary> Настраивает тип данных столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Указывает, как база данных будет формировать значения этого свойства. </summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">     Шаблон для формирования значений этого свойства в базе данных.     Установка «NULL» удалит сформированный базой данных аспект шаблона из этого свойства.     Установка «NULL» приведет к такому же поведению среды выполнения, как при установке «None». </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary> Настраивает точность и масштаб свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="precision">Точность свойства.</param>
      <param name="scale">Масштаб значения свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary> Настраивает использование свойства в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="concurrencyToken"> Значение, указывающее, является ли свойство маркером параллелизма. Установка «NULL» удалит аспект маркера параллелизма из этого свойства. Установка «NULL» приведет к такому же поведению среды выполнения, что и установка «false». </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary> Делает свойство необязательным. Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary> Делает свойство обязательным. Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL. По умолчанию требуются свойства <see cref="T:System.decimal" />. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary> Настраивает связь, которая поддерживает свойства внешнего ключа, отображаемые в объектной модели. Функции настройки показаны в API для Code First fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TDependentEntityType">Зависимый тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Настраивает для связи использование свойств внешнего ключа, отображаемых в объектной модели. Если свойства внешнего ключа не отображаются в объектной модели, воспользуйтесь методом Map.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="foreignKeyExpression">Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве внешнего ключа. Если внешний ключ состоит из нескольких свойств, укажите анонимный тип, включающий эти свойства. При использовании нескольких свойств внешнего ключа эти свойства должны указываться в том же порядке, в котором были настроены свойства первичного ключа для основного типа сущности.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary> Настраивает сопоставление таблиц и столбцов для типа сущности или подмножества свойств типа сущности. Функции настройки показаны в API для Code First fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TEntityType">Тип сущности, подлежащей сопоставлению.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary> Повторно сопоставляет все свойства, наследуемые от базовых типов.  При настройке сопоставления с производным типом отдельной таблицы это приведет к включению в таблицу всех свойств, а не только ненаследуемых. Это называется сопоставлением «одна таблица на конкретный тип». </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Настраивает свойства, которые будут включены в этот фрагмент сопоставления. Если этот метод не вызывается, будут настроены все свойства, которые до сих пор не вошли во фрагмент сопоставления. </summary>
      <param name="propertiesExpression"> Лямбда-выражение для анонимного типа, содержащего свойства для сопоставления.</param>
      <typeparam name="TObject">Анонимный тип, включающий сопоставляемые свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Настраивает условие дискриминатора, используемое для идентификации типов в иерархии наследования. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки условия дискриминатора.</returns>
      <param name="property"> Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве дискриминатора типов. </param>
      <typeparam name="TProperty">Тип свойства, которое должно использоваться в качестве дискриминатора типов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary> Настраивает столбец дискриминатора, используемый для идентификации типов в иерархии наследования. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки столбца дискриминатора и значений.</returns>
      <param name="discriminator">Имя столбца дискриминатора.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary> Настраивает имя таблицы для сопоставления. </summary>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary> Настраивает имя таблицы и схему для сопоставления. </summary>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Схема таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>Представляет конфигурацию сопоставления для сопоставления на основе внешнего ключа.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>Определяет, равен ли заданный объект <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="other">Объект <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary> Настраивает имя столбцов для внешнего ключа. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="keyColumnNames"> Имена столбцов внешнего ключа. При использовании нескольких свойств внешнего ключа эти свойства должны указываться в том же порядке, в котором были настроены свойства первичного ключа для целевого типа сущности. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Настраивает имя таблицы, содержащей столбцы внешнего ключа.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="tableName">Имя настраиваемой таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Настраивает имя таблицы и схему, содержащие внешние ключевые столбцы. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Схема таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>Настраивает связь, которая поддерживает только свойства внешнего ключа, неотображаемые в объектной модели. Функции настройки показаны в API для Code First fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>Настраивает связь на использование свойств внешнего ключа, неотображаемых в объектной модели. Столбцы и таблицу можно настроить, указав действие конфигурации. Если указано пустое действие конфигурации, имена столбцов будут сформированы в соответствии с соглашением. Если свойства внешнего ключа отображаются в объектной модели, воспользуйтесь методом HasForeignKey. Не все связи поддерживают отображение свойств внешнего ключа в объектной модели.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="configurationAction">Действие, которое настраивает столбцы и таблицу внешнего ключа.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary> Используется для настройки столбца с аспектами длины для типа сущности или сложного типа.  Функции настройки показаны в API для Code First Fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Настраивает для столбца указанную максимальную длину. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="value"> Максимальная длина для данного столбца. Установка значения NULL удалит из столбца любое ограничение максимальной длины и приведет к использованию для этого столбца базы данных длины по умолчанию. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>Настраивает столбец на фиксированную длину. </summary>
      <returns>Возвращает true, если столбец имеет фиксированную длину. В противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary> Настраивает для столбца разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary> Настраивает столбец на переменную длину. </summary>
      <returns>Возвращает true, если столбец имеет переменную длину. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary> Используется для настройки свойства с аспектами длины для типа сущности или сложного типа.  Функции настройки доступны при использовании API для Code First Fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Указывает, что свойство будет иметь заданную максимальную длину. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="value"> Максимальная длина для данного свойства. Установка значения NULL удалит из свойства любое ограничение максимальной длины и приведет к использованию для этого столбца базы данных длины по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary> Указывает, что свойство будет фиксированной длины. Используйте HasMaxLength для установки фиксированной длины для этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary> Настраивает для свойства разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary> Настраивает свойство на переменную длину. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary> Настраивает связь множественного типа, исходящую из этого типа сущности. </summary>
      <typeparam name="TEntityType">Тип сущности, от которой исходит данная связь.</typeparam>
      <typeparam name="TTargetEntityType">Тип сущности, к которой направлена данная связь.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary> Настраивает связь, меняя ее тип на «многие ко многим» без свойства навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Настраивает связь типа «многие ко многим» со свойством навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary> Настраивает связь, делая ее необязательной множественного типа без свойства навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Настраивает связь, делая ее необязательной множественного типа со свойством навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary> Настраивает связь, делая ее обязательной множественного типа без свойства навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Настраивает связь, делая ее требуемой множественного типа со свойством навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary> Настраивает связь для таблицы и столбца, делая ее типа «многие ко многим». Функции настройки показаны в API для Code First Fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>Определяет, равен ли заданный объект <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> текущему объекту.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="other">Объект <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary> Настраивает имя столбцов для левого внешнего ключа. Левый внешний ключ представляет свойство навигации, указанное в вызове метода HasMany для объекта <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="keyColumnNames"> Имена столбцов внешнего ключа. При использовании нескольких свойств внешнего ключа эти свойства должны указываться в том же порядке, в котором были настроены свойства первичного ключа для целевого типа сущности. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary> Настраивает имя столбцов для правого внешнего ключа. Правый внешний ключ представляет свойство навигации, указанное в вызове WithMany. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="keyColumnNames"> Имена столбцов внешнего ключа. При использовании нескольких свойств внешнего ключа эти свойства должны указываться в том же порядке, в котором были настроены свойства первичного ключа для целевого типа сущности. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary> Настраивает для связи имя таблицы соединения. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary> Настраивает для связи имя таблицы соединения и схему. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Схема таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
      <summary> Настраивает связь типа «многие ко многим». Функции настройки показаны в API для Code First Fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary> Настраивает столбцы и таблицу внешнего ключа, используемые для хранения связи. </summary>
      <param name="configurationAction">Действие, которое настраивает столбцы и таблицу внешнего ключа.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary> Настраивает условие, используемое для различения типов в иерархии наследования на основании значений, назначенных свойству. Функции настройки показаны в API для Code First Fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary> Настраивает условие, требующее ввода значения для свойства.  Строки, в которых нет назначенного значения для столбца, в котором хранится это свойство, считаются относящимися к базовому типу для этого типа сущности. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>Настраивает дополнительную связь из типа сущности. </summary>
      <typeparam name="TEntityType">Тип сущности, от которой исходит данная связь.</typeparam>
      <typeparam name="TTargetEntityType">Тип сущности, к которой направлена данная связь.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary> Настраивает связь, делая ее необязательной множественного типа без свойства навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Настраивает связь, делая ее необязательной множественного типа со свойством навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary> Настраивает связь, делая ее необязательной необязательного типа без свойства навигации на другом конце связи. Настраиваемый тип сущности будет зависимым и будет содержать внешний ключ для основного типа сущности.  Тип сущности, к которому направлена эта связь, будет основным для этой связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Настраивает связь, делая ее необязательной необязательного типа со свойством навигации на другом конце связи. Настраиваемый тип сущности будет зависимым и будет содержать внешний ключ для основного типа сущности.  Тип сущности, к которому направлена эта связь, будет основным для этой связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary> Настраивает связь, делая ее необязательной необязательного типа без свойства навигации на другом конце связи. Настраиваемый тип сущности будет основным для этой связи.  Тип сущности, к которому направлена эта связь, будет зависимым и будет содержать внешний ключ для основного типа сущности. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Настраивает связь, делая ее необязательной необязательного типа со свойством навигации на другом конце связи. Настраиваемый тип сущности будет основным для этой связи.  Тип сущности, к которому направлена эта связь, будет зависимым и будет содержать внешний ключ для основного типа сущности. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>Настраивает определенный конец связи, который должен быть обязательным, без свойства навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает определенный конец связи, который должен быть обязательным, со свойством навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>Настраивает столбец-примитив из типа сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Настраивает порядковый номер столбца-примитива, используемого для хранения этого свойства. Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary> Настраивает тип данных столбца-примитива, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>Делает столбец-примитив необязательным.</summary>
      <returns>Если столбец необязательный, возвращает значение true; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>Делает столбец-примитив обязательным.</summary>
      <returns>Если столбец обязательный, возвращает значение true; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary> Используется для настройки свойства-примитива для типа сущности или сложного типа.  Функции настройки показаны в API для Code First Fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary> Настраивает имя столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства. Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary> Настраивает тип данных столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Указывает, как база данных будет формировать значения этого свойства. </summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">     Шаблон для формирования значений этого свойства в базе данных.     Установка «NULL» удалит сформированный базой данных аспект шаблона из этого свойства.     Установка «NULL» приведет к такому же поведению среды выполнения, как при установке «None». </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary> Настраивает использование свойства в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="concurrencyToken"> Значение, указывающее, является ли свойство маркером параллелизма. Указание NULL удалит аспект маркера параллелизма из этого свойства. Указание NULL приведет к такому же поведению среды выполнения, как при указании false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary> Делает свойство необязательным. Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary> Делает свойство обязательным. Столбец базы данных, используемый для хранения этого свойства, не будет допускать значений NULL. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary> Настраивает требуемую связь, исходящую из этого типа сущности. </summary>
      <typeparam name="TEntityType">Тип сущности, от которой исходит данная связь.</typeparam>
      <typeparam name="TTargetEntityType">Тип сущности, к которой направлена данная связь.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary> Настраивает требуемую связь множественного типа без свойства навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Настраивает требуемую связь множественного типа со свойством навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary> Настраивает требуемую связь необязательного типа без свойства навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Настраивает требуемую связь необязательного типа со свойством навигации на другом конце связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary> Настраивает требуемую связь обязательного типа без свойства навигации на другом конце связи. Настраиваемый тип сущности будет зависимым и будет содержать внешний ключ для основного типа сущности.  Тип сущности, к которому направлена эта связь, будет основным для этой связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Настраивает требуемую связь обязательного типа со свойством навигации на другом конце связи. Настраиваемый тип сущности будет зависимым и будет содержать внешний ключ для основного типа сущности.  Тип сущности, к которому направлена эта связь, будет основным для этой связи. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary> Настраивает требуемую связь обязательного типа без свойства навигации на другом конце связи. Настраиваемый тип сущности будет основным для этой связи.  Тип сущности, к которому направлена эта связь, будет зависимым и будет содержать внешний ключ для основного типа сущности. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Настраивает требуемую связь обязательного типа со свойством навигации на другом конце связи. Настраиваемый тип сущности будет основным для этой связи.  Тип сущности, к которому направлена эта связь, будет зависимым и будет содержать внешний ключ для основного типа сущности. </summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression"> Лямбда-выражение, представляющее свойство навигации на другом конце этой связи. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.  </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary> Настраивает столбец базы данных, используемый для хранения строковых значений. Функции настройки показаны в Fluent API для Code First. Дополнительные сведения см. в разделе <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Настраивает порядковый номер этого столбца базы данных. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary> Настраивает тип данных этого столбца базы данных. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Указывает, что свойство будет иметь заданную максимальную длину.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="value">Максимальная длина для данного свойства. Установка значения NULL приведет к использованию для столбца длины по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary> Настраивает столбец на фиксированную длину. Используйте HasMaxLength для установки фиксированной длины для этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary> Настраивает для столбца разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary> Делает столбец необязательным. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary> Делает столбец обязательным. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary> Указывает, что столбец будет поддерживать содержимое строк в Юникоде. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary> Указывает, будет ли этот столбец поддерживать содержимое строк в Юникоде. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="unicode"> Значение, указывающее, будет этот столбец поддерживать содержимое строк в Юникоде или нет. Установка NULL удалит из столбца аспект Юникод. Указание NULL приведет к такому же поведению среды выполнения, как при указании false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary> Настраивает столбец на переменную длину. По умолчанию столбцы имеют переменную длину. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>Используется для настройки свойства <see cref="T:System.string" /> типа сущности или сложного типа. Функции настройки показаны в API для Code First Fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>Настраивает имя столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства. Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary> Настраивает тип данных столбца базы данных, используемого для хранения этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Указывает, как база данных будет формировать значения этого свойства. </summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">     Шаблон для формирования значений этого свойства в базе данных.     Установка «NULL» удалит сформированный базой данных аспект шаблона из этого свойства.     Установка «NULL» приведет к такому же поведению среды выполнения, как при установке «None». </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Указывает, что свойство будет иметь заданную максимальную длину. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="value">Максимальная длина для данного свойства. Если установить для этого свойства значение NULL, из свойства будет удалено любое ограничение максимальной длины и для этого столбца базы данных будет использоваться длина по умолчанию. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary> Настраивает использование свойства в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="concurrencyToken"> Указывает, является ли это свойство маркером параллелизма. Указание NULL удалит аспект маркера параллелизма из этого свойства. Указание NULL приведет к такому же поведению среды выполнения, как при указании false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>Указывает, что свойство будет фиксированной длины. Используйте HasMaxLength для установки фиксированной длины для этого свойства. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>Настраивает для свойства разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>Делает свойство необязательным. Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL. Свойства <see cref="T:System.string" /> по умолчанию необязательные. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary> Делает свойство обязательным. Столбец базы данных, используемый для хранения этого свойства, не будет допускать значений NULL. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Указывает, что это свойство будет поддерживать содержимое строк в Юникоде. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Указывает, будет ли это свойство поддерживать содержимое строк в Юникоде. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="unicode"> Значение, указывающее, будет это свойство поддерживать содержимое строк в Юникоде или нет. Указание NULL удалит из свойства аспект Юникод. Указание NULL приведет к такому же поведению среды выполнения, как при указании false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>Указывает, что свойство будет переменной длины. Свойства <see cref="T:System.string" /> имеют переменную длину по умолчанию. </summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>Разрешает настройку типа в модели. </summary>
      <typeparam name="TStructuralType">Тип, который нужно настроить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Исключает свойство из модели, в результате чего оно не будет сопоставляться с базой данных. </summary>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
      <typeparam name="TProperty">Тип исключаемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary> Настраивает свойство <see cref="T:System.byte[]" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
      <summary>   Настраивает свойство <see cref="T:DbGeography" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">   Лямбда-выражение, представляющее свойство, которое нужно настроить.   C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
      <summary>   Настраивает свойство <see cref="T:DbGeometry" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">   Лямбда-выражение, представляющее свойство, которое нужно настроить.   C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary> Настраивает свойство <see cref="T:System.DateTime" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary> Настраивает свойство <see cref="T:System.DateTimeOffset" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary> Настраивает свойство <see cref="T:System.decimal" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary> Настраивает свойство Nullable(<see cref="T:System.DateTime" />), определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary> Настраивает свойство Nullable(<see cref="T:System.DateTimeOffset" />), определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary> Настраивает свойство Nullable(<see cref="T:System.Decimal" />), определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary> Настраивает свойство Nullable(<see cref="T:System.TimeSpan" />), определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary> Настраивает свойство Nullable(<see cref="T:System.struct" />), определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
      <typeparam name="T">Настраиваемый тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary> Настраивает свойство <see cref="T:System.string" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary> Настраивает свойство <see cref="T:System.TimeSpan" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Настраивает свойство <see cref="T:System.struct" />, определенное для этого типа. </summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression"> Лямбда-выражение, представляющее свойство, которое нужно настроить. Например, на языке C# будет иметь вид t =&gt; t.MyProperty, а на языке Visual Basic .Net будет иметь вид Function(t) t.MyProperty. </param>
      <typeparam name="T">Настраиваемый тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary> Настраивает столбец-дискриминатор, используемый для различения типов в иерархии наследования. Функции настройки показаны в Fluent API для Code First. Дополнительные сведения см. в разделе <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту. Этот метод скрыт от IntelliSense.</summary>
      <returns>Возвращает значение true, если объекты равны. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа. Этот метод скрыт от IntelliSense.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра. Этот метод скрыт от IntelliSense.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>Настраивает значение дискриминатора, используемое для идентификации типа сущности, настраиваемого из других типов в иерархии наследования. </summary>
      <returns>Объект настройки для настройки столбца, используемого для хранения значений дискриминатора.</returns>
      <param name="value">Значение, используемое для идентификации типа сущности.</param>
      <typeparam name="T">Тип значения дискриминатора.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>Настраивает значение дискриминатора, используемое для идентификации типа сущности, настраиваемого из других типов в иерархии наследования. </summary>
      <returns>Объект настройки для настройки столбца, используемого для хранения значений дискриминатора.</returns>
      <param name="value">Значение, используемое для идентификации типа сущности.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary> Настраивает значение дискриминатора, используемое для идентификации типа сущности, настраиваемого из других типов в иерархии наследования. </summary>
      <returns>Объект настройки для настройки столбца, используемого для хранения значений дискриминатора.</returns>
      <param name="value">Значение, используемое для идентификации типа сущности.</param>
      <typeparam name="T">Тип значения дискриминатора.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект. Этот метод скрыт от IntelliSense.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>Соглашение об инверсии свойств навигации относительно друг друга, если существует только одна пара свойств навигации между связанными типами.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
      <summary> Соглашение о преобразовании любых, явно указанных типов данных — с использованием заметок данных или API <see cref="T:System.Data.Entity.DbModelBuilder" /> — к нижнему регистру. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.ComplexTypeAttribute" />, найденных для типов в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>Соглашение об отнесении типа к сложному типу, если у него нет первичного ключа, нет сопоставленного базового типа и нет свойств навигации. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary> Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute" />, найденных для свойств в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>Соглашение об установке точности, равной 18, и масштаба, равного 2, для десятичных свойств. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>Соглашение о перемещении свойств первичного ключа в начало. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>Соглашение о различении дополнительных и обязательных связей на основании допустимости значений NULL для свойств внешнего ключа в среде CLR. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" />, найденных для свойств навигации в модели.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" />, обнаруженных в свойствах внешнего ключа модели.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>Идентифицирует соглашения, которые можно удалить из экземпляра <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>Соглашение об обнаружении свойств первичного ключа.  </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.InversePropertyAttribute" />, найденных для свойств в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" />, найденных для свойств в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>Соглашение о добавлении каскадного удаления в таблицу соединения из обеих таблиц, участвующих в связи «многие ко многим».</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>Позволяет предотвратить создание недопустимых или неподдерживаемых сопоставлений при сопоставлении наследуемых свойств</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" />, найденных для свойств в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>Соглашение об обнаружении свойств внешнего ключа, чьи имена являются сочетанием имени зависимого свойства навигации и имен свойств первичного ключа основного типа. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" />, найденных для свойств в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" />, найденных для типов в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>Соглашение о включении каскадного удаления для любых требуемых связей. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>Соглашение о настройке первичных ключей зависимого типа сущности как внешних ключей в связи «один к одному». </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>Соглашение об установке имени набора сущностей в виде множественного числа от имени типа сущности. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>Соглашение об установке имени таблицы в виде множественного числа от имени типа сущности. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>Соглашение об обнаружении свойств внешнего ключа, чьи имена совпадают с именами свойств первичного ключа основного типа. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>Соглашение об установке максимальной длины по умолчанию для типов свойств, которые поддерживают аспекты длины. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />, найденных для свойств навигации в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />, найденных для свойств примитивов в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>Задает максимально допустимую длину по умолчанию, равную 4000, для свойств, тип которых поддерживает аспекты длины, если SqlCe является поставщиком.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>Соглашение о настройке использования целочисленных первичных ключей в качестве идентификаторов. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" />, найденных для свойств в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.TableAttribute" />, найденных для типов в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" />, найденных для свойств в модели. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>Соглашение об обнаружении свойств внешнего ключа, чьи имена являются сочетанием имени основного типа и имен свойств первичного ключа основного типа. </summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>Исключение, формируемое в <see cref="M:System.Data.Entity.DbContext.SaveChanges" />, когда сущность не прошла проверку.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="entityValidationResults">Результаты проверки.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="entityValidationResults">Результаты проверки.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>Возвращает любые ошибки проверки.</summary>
      <returns>Ошибки проверки при их наличии.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>Представляет результаты проверки для одной сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />. </summary>
      <param name="entry">Запись сущности, к которой применяются результаты. Никогда не может быть NULL.</param>
      <param name="validationErrors">Список экземпляров класса <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Это значение не может быть равно NULL, но может быть пустым набором; это означает, что сущность допустима. </param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>Возвращает экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, к которому применяются результаты.</summary>
      <returns>Класс <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>Возвращает значение, указывающее, допустима ли сущность.</summary>
      <returns>Если сущность допустима, значение true; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>Возвращает ошибки проверки. Это свойство не может принимать значения NULL. </summary>
      <returns>Ошибки проверки.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>Исключение, формируемое в <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />, когда возникает исключение в коде проверки.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> с указанными сведениями о сериализации и контекстом. </summary>
      <param name="info">Данные сериализации.</param>
      <param name="context">Контекст потоковой передачи.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>Ошибка проверки. Ошибка проверки может быть на уровне сущности или на уровне свойства. </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Entity.Validation.DbValidationError" />.</summary>
      <param name="propertyName">Имя недопустимого свойства. Может принимать значение NULL.</param>
      <param name="errorMessage">Сообщение об ошибке проверки. Может принимать значение NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>Возвращает сообщение об ошибке проверки.</summary>
      <returns>Сообщение об ошибке проверки.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>Возвращает имя недопустимого свойства. </summary>
      <returns>Имя недопустимого свойства.</returns>
    </member>
  </members>
</doc>